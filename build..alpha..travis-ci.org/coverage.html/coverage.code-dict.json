{"/home/travis/build/npmtest/node-npmtest-alloy/test.js":"/* istanbul instrument in package npmtest_alloy */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - init-after\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - init-after\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - init-after\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-alloy/lib.npmtest_alloy.js":"/* istanbul instrument in package npmtest_alloy */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_alloy = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_alloy = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-alloy/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-alloy && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_alloy */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_alloy\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // init-after\n    // run browser js-env code - init-after\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - init-after\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_alloy.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_alloy.rollup.js'] =\n            local.assetsDict['/assets.npmtest_alloy.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_alloy.__dirname + '/lib.npmtest_alloy.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-alloy/node_modules/alloy/Alloy/alloy.js":"/**\n * Alloy\n * Copyright (c) 2012 by Appcelerator, Inc. All Rights Reserved.\n * See LICENSE for more information on licensing.\n */\nvar program = require('commander'),\n\tlogger = require('./logger'),\n\tos = require('os'),\n\tU = require('./utils'),\n\tcolors = require('colors'),\n\t_ = require('./lib/alloy/underscore')._,\n\tpkginfo = require('pkginfo')(module, 'version'),\n\tpath = require('path'),\n\tfs = require('fs'),\n\tCONST = require('./common/constants');\n\n// patch to remove the warning in node >=0.8\npath.existsSync = fs.existsSync || path.existsSync;\n\n// avoid io issues on Windows in nodejs 0.10.X: https://github.com/joyent/node/issues/3584\nif (process.env.ALLOY_TESTS && /^win/i.test(os.platform())) {\n\tconsole.error = function(m) {\n\t\tfs.writeSync(2, m);\n\t};\n\tconsole.log = console.warn = console.info = function(m) {\n\t\tfs.writeSync(1, m);\n\t};\n}\n\n////////////////////////////////////\n////////// MAIN EXECUTION //////////\n////////////////////////////////////\n\n// Process command line input\nprogram\n\t.version(module.exports.version, '-v, --version')\n\t.description('Alloy command line')\n\t.usage('COMMAND [ARGS] [OPTIONS]')\n\t.option('-a, --app <app>', 'Test app folder for running \"alloy test\"')\n\t.option('-A, --apply', 'Applies command changes [extract-i18n]')\n\t.option('-b, --noBanner', 'Disable the banner')\n\t.option('-c, --config <config>', 'Pass in compiler configuration')\n\t.option('-f, --force', 'Force the command to execute')\n\t.option('-l, --logLevel <logLevel>', 'Log level (default: 3 [DEBUG])')\n\t.option('-n, --no-colors', 'Turn off colors')\n\t.option('-o, --outputPath <outputPath>', 'Output path for generated code')\n\t.option('-p, --project-dir <project-dir>', 'Titanium project directory')\n\t.option('-q, --platform <platform>', 'Target mobile platform [android,ios,mobileweb]')\n\t.option('-s, --spec <spec>', 'test spec to use with \"alloy test\"')\n\t.option('-w, --all', 'require flag for generate styles')\n\t.option('-x, --column <column>', 'Column for source map query', 1)\n\t.option('-y, --line <line>', 'Line for source map query', 1)\n\t.option('-z, --source <source>', 'Source original file for source map query')\n\t.option('--widgetname <name>', 'Widget name, used with generate command')\n\t.option('--testapp <name>', 'Test app name to import, used with new command');\n\nprogram.command('new'.blue + ' <dir>'.white)\n\t\t.description('    create a new alloy project'.grey);\n\nprogram.command('compile'.blue + ' [dir]'.white)\n\t\t.description('    compile into titanium source code'.grey);\n\nprogram.command('extract-i18n'.blue + ' <language>'.white)\n\t\t.description('    extracts i18n strings from the source code (js and tss files)'.grey);\n\nprogram.command('generate'.blue + ' <type> <name>'.white)\n\t\t.description('    generate a new alloy type such as a controller'.grey);\n\nprogram.command('copy'.blue + ' <source> <destination>'.white)\n\t\t.description('    copy the controller, view, and style files from <source> to <destination>'.grey);\n\nprogram.command('move'.blue + ' <source> <destination>'.white)\n\t\t.description('    move the controller, view, and style files from <source> to <destination>'.grey);\n\nprogram.command('remove'.blue + ' <source>'.white)\n\t\t.description('    remove the controller, view, and style files at <source>'.grey);\n\nprogram.parse(process.argv);\n\n\n// Setup up logging output\nError.stackTraceLimit = Infinity;\nlogger.stripColors = program['colors'] === false;\nlogger.logLevel = program['logLevel'] || logger.TRACE;\nif (program.config && program.config.indexOf('logLevel') !== -1) {\n\tlogger.logLevel = -1;\n}\n\nif (!program.noBanner && program.args[0] !== 'info' && (program.config && program.config.indexOf('noBanner') === -1)) {\n\tbanner();\n}\n\nif (program.args.length === 0) {\n\tvar help = program.helpInformation();\n\thelp = help.replace('Usage: alloy COMMAND [ARGS] [OPTIONS]', 'Usage: ' + 'alloy'.blue + ' COMMAND'.white + ' [ARGS] [OPTIONS]'.grey);\n\thelp = logger.stripColors ? colors.stripColors(help) : help;\n\tconsole.log(help);\n\tprocess.exit(0);\n}\n\nif (program.platform && !_.contains(CONST.PLATFORM_FOLDERS_ALLOY, program.platform)) {\n\tU.die('Invalid platform \"' + program.platform + '\" specified, must be [' + CONST.PLATFORM_FOLDERS_ALLOY.join(',') + ']');\n}\n\n// Validate the given command\nvar command = program.args[0];\nif (!_.contains(getCommands(), command)) {\n\tU.die('Unknown command: ' + command.red);\n}\n\n// Launch command with given arguments and options\n(require('./commands/' + command + '/index'))(program.args.slice(1), program);\n\n///////////////////////////////\n////////// FUNCTIONS //////////\n///////////////////////////////\nfunction banner() {\n\tvar str =\n\t'       .__  .__                \\n' +\n\t'_____  |  | |  |   ____ ___.__.\\n' +\n\t'\\\\__  \\\\ |  | |  |  /  _ <   |  |\\n' +\n\t' / __ \\\\|  |_|  |_(  <_> )___  |\\n' +\n\t'(____  /____/____/\\\\____// ____|\\n' +\n\t'     \\\\/                 \\\\/';\n\n\tif (!program.dump) {\n\t\tconsole.log(logger.stripColors ? str : str.blue);\n\t\tvar m = 'Alloy ' + module.exports.version + ' by Appcelerator. The MVC app framework for Titanium.\\n'.white;\n\t\tconsole.log(logger.stripColors ? colors.stripColors(m) : m);\n\t}\n}\n\nfunction getCommands() {\n\ttry {\n\t\tvar commandsPath = path.join(__dirname, 'commands');\n\t\treturn _.filter(fs.readdirSync(commandsPath), function(file) {\n\t\t\treturn path.existsSync(path.join(commandsPath, file, 'index.js'));\n\t\t});\n\t} catch (e) {\n\t\tU.die('Error getting command list', e);\n\t}\n}\n","/home/travis/build/npmtest/node-npmtest-alloy/node_modules/alloy/Alloy/logger.js":"var colors = require('colors'),\n\tU = require('./utils');\n\nexports.TRACE = 4;\nexports.DEBUG = 3;\nexports.INFO = 2;\nexports.WARN = 1;\nexports.ERROR = 0;\nexports.NONE = -1;\nexports.logLevel = exports.TRACE;\nexports.stripColors = false;\nexports.showTimestamp = false;\n\nexports.trace = function(msg) {\n\tif (exports.logLevel >= exports.TRACE) { printMessage(msg, 'trace', 'grey'); }\n};\n\nexports.debug = function(msg) {\n\tif (exports.logLevel >= exports.DEBUG) { printMessage(msg, 'debug', 'cyan'); }\n};\n\nexports.info = function(msg) {\n\tif (exports.logLevel >= exports.INFO) { printMessage(msg, 'info', 'white'); }\n};\n\nexports.warn = function(msg) {\n\tif (exports.logLevel >= exports.WARN) { printMessage(msg, 'warn', 'yellow'); }\n};\n\nexports.error = function(msg) {\n\tif (exports.logLevel >= exports.ERROR) { printMessage(msg, 'error', 'red'); }\n};\n\n// Private functions and members\nvar levels = ['info', 'debug', 'error', 'warn', 'trace'];\nvar has = function(array, item) {\n\tvar len = array.length;\n\tfor (var i = 0; i < len; i++) {\n\t\tif (array[i] === item) {\n\t\t\treturn true;\n\t\t}\n\t}\n\treturn false;\n};\nvar isArray = function(object) {\n\treturn Object.prototype.toString.call(object) === '[object Array]';\n};\n\nvar formattedDate = function() {\n\tvar date = new Date();\n\tvar pad = function(val) {\n\t\tval += '';\n\t\treturn val.length < 2 ? '0' + val : val;\n\t};\n\treturn date.getFullYear() + '-' + pad(date.getMonth() + 1) + '-' + pad(date.getDate()) + ' ' +\n\t\tpad(date.getHours()) + ':' + pad(date.getMinutes()) + ':' + pad(date.getSeconds());\n};\n\nvar printMessage = function(msg, level, color) {\n\t// Validate arguments\n\tmsg = msg || '';\n\tlevel = level || 'info';\n\tlevel = has(levels, level) ? level : 'info';\n\tcolor = color || 'white';\n\n\t// Have to wrap in a function to avoid \"Illegal invocation\" error on android\n\tvar logFunc = function(msg) {\n\t\t(level === 'debug' || level === 'trace' ? console.log : console[level])(msg);\n\t};\n\n\tfunction printLine(line) {\n\t\tif (isArray(line)) {\n\t\t\tfor (var i = 0; i < line.length; i++) {\n\t\t\t\tprintLine(line[i]);\n\t\t\t}\n\t\t} else {\n\t\t\tvar tag = (exports.showTimestamp ? formattedDate() + ' -- ' : '') + '[' +\n\t\t\t\tlevel.toUpperCase() + '] ';\n\t\t\tvar str = tag.grey + (line || '')[color];\n\t\t\tif (exports.stripColors) { str = U.stripColors(str); }\n\t\t\tlogFunc(str);\n\t\t}\n\t}\n\tprintLine(msg);\n};\n","/home/travis/build/npmtest/node-npmtest-alloy/node_modules/alloy/Alloy/utils.js":"// The island of misfit toys... for functions\n\nvar path = require('path'),\n\tfs = require('fs'),\n\tcolors = require('colors'),\n\tcrypto = require('crypto'),\n\tutil = require('util'),\n\twrench = require('wrench'),\n\tjsonlint = require('jsonlint'),\n\tresolve = require('resolve'),\n\tpaths = require('global-paths'),\n\tlogger = require('./logger'),\n\ttiapp = require('./tiapp'),\n\tXMLSerializer = require('xmldom').XMLSerializer,\n\tDOMParser = require('xmldom').DOMParser,\n\t_ = require('./lib/alloy/underscore')._,\n\tCONST = require('./common/constants'),\n\tsourceMapper = require('./commands/compile/sourceMapper');\n\nvar NODE_ACS_REGEX = /^ti\\.cloud\\..+?\\.js$/;\n\nexports.XML = {\n\tgetNodeText: function(node) {\n\t\tif (!node) { return ''; }\n\t\tvar serializer = new XMLSerializer(),\n\t\t\tstr = '';\n\t\tfor (var c = 0; c < node.childNodes.length; c++) {\n\t\t\tif (node.childNodes[c].nodeType === 3) {\n\t\t\t\tstr += serializer.serializeToString(node.childNodes[c]);\n\t\t\t}\n\t\t}\n\t\treturn str.replace(/\\&amp;/g, '&');\n\t},\n\tgetElementsFromNodes: function(nodeList) {\n\t\tvar elems = [];\n\t\tif (nodeList && nodeList.length) {\n\t\t\tfor (var i = 0, l = nodeList.length; i < l; i++) {\n\t\t\t\tvar node = nodeList.item(i);\n\t\t\t\tif (node.nodeType === 1) {\n\t\t\t\t\telems.push(node);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn elems;\n\t},\n\tparseFromString: function(string) {\n\t\tvar doc;\n\t\ttry {\n\t\t\tvar errorHandler = {};\n\t\t\terrorHandler.error = errorHandler.fatalError = function(m) {\n\t\t\t\texports.die(['Error parsing XML file.'].concat((m || '').split(/[\\r\\n]/)));\n\t\t\t};\n\t\t\terrorHandler.warn = errorHandler.warning = function(m) {\n\t\t\t\t// ALOY-840: die on unclosed XML tags\n\t\t\t\t// xmldom hardcodes this as a warning with the string message 'unclosed xml attribute'\n\t\t\t\t// even when it's a tag that's unclosed\n\t\t\t\tif (m.indexOf('unclosed xml attribute') === -1) {\n\t\t\t\t\tlogger.warn((m || '').split(/[\\r\\n]/));\n\t\t\t\t} else {\n\t\t\t\t\tm = m.replace('unclosed xml attribute', 'Unclosed XML tag or attribute');\n\t\t\t\t\texports.die(['Error parsing XML file.'].concat((m || '').split(/[\\r\\n]/)));\n\t\t\t\t}\n\t\t\t};\n\t\t\tdoc = new DOMParser({errorHandler:errorHandler, locator:{}}).parseFromString(string);\n\t\t} catch (e) {\n\t\t\texports.die('Error parsing XML file.', e);\n\t\t}\n\n\t\treturn doc;\n\t},\n\tparseFromFile: function(filename) {\n\t\tvar xml = fs.readFileSync(filename, 'utf8');\n\t\treturn exports.XML.parseFromString(xml);\n\t},\n\tcreateEmptyNode: function(name, ns) {\n\t\tvar str = '<' + name + (ns ? ' ns=\"' + ns + '\"' : '') + '></' + name + '>';\n\t\treturn exports.XML.parseFromString(str).documentElement;\n\t},\n\tgetAlloyFromFile: function(filename) {\n\t\tvar doc = exports.XML.parseFromFile(filename);\n\t\tvar docRoot = doc.documentElement;\n\n\t\t// Make sure the markup has a top-level <Alloy> tag\n\t\tif (docRoot.nodeName !== CONST.ROOT_NODE) {\n\t\t\texports.die([\n\t\t\t\t'Invalid view file \"' + filename + '\".',\n\t\t\t\t'All view markup must have a top-level <Alloy> tag'\n\t\t\t]);\n\t\t}\n\n\t\treturn docRoot;\n\t},\n\ttoString: function(node) {\n\t\treturn (new XMLSerializer()).serializeToString(node);\n\t},\n\tpreviousSiblingElement: function(node) {\n\t\tif (!node || !node.previousSibling || node.previousSibling === null) {\n\t\t\treturn null;\n\t\t} else if (node.previousSibling.nodeType === 1) {\n\t\t\treturn node.previousSibling;\n\t\t} else {\n\t\t\treturn exports.XML.previousSiblingElement(node.previousSibling);\n\t\t}\n\t}\n};\n\nexports.readTemplate = function(name) {\n\treturn fs.readFileSync(path.join(__dirname, 'template', name), 'utf8');\n};\n\nexports.evaluateTemplate = function(name, o) {\n\treturn _.template(exports.readTemplate(name), o);\n};\n\nexports.getAndValidateProjectPaths = function(argPath, opts) {\n\topts = opts || {};\n\tvar projectPath = path.resolve(argPath);\n\n\t// See if we got the \"app\" path or the project path as an argument\n\tprojectPath = fs.existsSync(path.join(projectPath, '..', 'tiapp.xml')) ?\n\t\tpath.join(projectPath, '..') : projectPath;\n\n\t// Assign paths objects\n\tvar paths = {\n\t\tproject: projectPath,\n\t\tapp: path.join(projectPath, 'app'),\n\t\tindexBase: path.join(CONST.DIR.CONTROLLER, CONST.NAME_DEFAULT + '.' + CONST.FILE_EXT.CONTROLLER)\n\t};\n\tpaths.index = path.join(paths.app, paths.indexBase);\n\tpaths.assets = path.join(paths.app, 'assets');\n\tpaths.resources = path.join(paths.project, 'Resources');\n\tpaths.resourcesAlloy = path.join(paths.resources, 'alloy');\n\n\t// validate project and \"app\" paths\n\tif (!fs.existsSync(paths.project)) {\n\t\texports.die('Titanium project path does not exist at \"' + paths.project + '\".');\n\t} else if (!fs.existsSync(path.join(paths.project, 'tiapp.xml'))) {\n\t\texports.die('Invalid Titanium project path (no tiapp.xml) at \"' + paths.project + '\"');\n\t} else if (!fs.existsSync(paths.app)) {\n\t\texports.die('Alloy \"app\" directory does not exist at \"' + paths.app + '\"');\n\t} else if (!fs.existsSync(paths.index) && (opts.command !== CONST.COMMANDS.GENERATE)) {\n\t\texports.die('Alloy \"app\" directory has no \"' + paths.indexBase + '\" file at \"' + paths.index + '\".');\n\t}\n\n\t// TODO: https://jira.appcelerator.org/browse/TIMOB-14683\n\t// Resources/app.js must be present, even if not used\n\tvar appjs = path.join(paths.resources, 'app.js');\n\tif (!fs.existsSync(appjs)) {\n\t\twrench.mkdirSyncRecursive(paths.resources, 0755);\n\t\tfs.writeFileSync(appjs, '');\n\t}\n\n\treturn paths;\n};\n\nexports.createErrorOutput = function(msg, e) {\n\tvar errs = [msg || 'An unknown error occurred'];\n\tvar posArray = [];\n\n\tif (e) {\n\t\tvar line = e.line || e.lineNumber;\n\t\tif (e.message) { errs.push(e.message.split('\\n')); }\n\t\tif (line)  { posArray.push('line ' + line); }\n\t\tif (e.col) { posArray.push('column ' + e.col); }\n\t\tif (e.pos) { posArray.push('position ' + e.pos); }\n\t\tif (posArray.length) { errs.push(posArray.join(', ')); }\n\n\t\t// add the stack trace if we don't get anything good\n\t\tif (errs.length < 2) { errs.unshift(e.stack); }\n\t} else {\n\t\terrs.unshift(e.stack);\n\t}\n\n\treturn errs;\n};\n\nexports.updateFiles = function(srcDir, dstDir, opts) {\n\topts = opts || {};\n\topts.rootDir = opts.rootDir || dstDir;\n\tvar copiedFiles = [];\n\n\tif (!fs.existsSync(srcDir)) {\n\t\treturn;\n\t}\n\tlogger.trace('SRC_DIR=' + srcDir);\n\n\tif (!fs.existsSync(dstDir)) {\n\t\twrench.mkdirSyncRecursive(dstDir, 0755);\n\t}\n\n\t// don't process XML/controller files inside .svn folders (ALOY-839)\n\tvar excludeRegex = new RegExp('(?:^|[\\\\/\\\\\\\\])(?:' + CONST.EXCLUDED_FILES.join('|') + ')(?:$|[\\\\/\\\\\\\\])');\n\tvar ordered = [];\n\t_.each(wrench.readdirSyncRecursive(srcDir), function(file) {\n\t\tvar src = path.join(srcDir, file);\n\t\tvar dst = path.join(dstDir, file);\n\n\t\tif (excludeRegex.test(src)) {\n\t\t\treturn;\n\t\t}\n\n\t\t// make sure the file exists and that it is not filtered\n\t\tif (!fs.existsSync(src) ||\n\t\t\t(opts.filter && opts.filter.test(file)) ||\n\t\t\t(opts.exceptions && _.contains(opts.exceptions, file)) ||\n\t\t\t(opts.restrictionPath && !_.contains(opts.restrictionPath, src)) ) {\n\t\t\treturn;\n\t\t}\n\n\t\t// if this is the current platform-specific folder, adjust the dst path\n\t\tvar parts = file.split(/[\\/\\\\]/);\n\t\tif (opts.titaniumFolder && parts[0] === opts.titaniumFolder) {\n\t\t\tif (opts.type && opts.type !== 'ASSETS' && parts[0] === 'iphone') {\n\t\t\t\t// don't copy files in lib/iphone or vendor/iphone\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tdst = path.join(dstDir, parts.slice(1).join('/'));\n\t\t\tordered.push({ src:src, dst:dst });\n\t\t} else if (opts.titaniumFolder && opts.titaniumFolder === 'iphone' && opts.type && opts.type !== 'ASSETS' && parts[0] === 'ios') {\n\t\t\t// copy files in lib/ios and vendor/ios\n\t\t\tdst = path.join(dstDir, parts.slice(1).join('/'));\n\t\t\tordered.push({ src:src, dst:dst });\n\t\t} else {\n\t\t\tordered.unshift({ src:src, dst:dst });\n\t\t}\n\t});\n\n\t_.each(ordered, function(o) {\n\t\tvar src = o.src;\n\t\tvar dst = o.dst;\n\t\tvar srcStat = fs.statSync(src);\n\t\tif (fs.existsSync(dst)) {\n\t\t\tvar dstStat = fs.statSync(dst);\n\n\t\t\tif (!dstStat.isDirectory()) {\n\t\t\t\t// copy file in if it is a JS file or if its mtime is\n\t\t\t\t// greater than the one in Resources\n\t\t\t\tif (path.extname(src) === '.js' || opts.themeChanged || opts.isNew ||\n\t\t\t\t\tsrcStat.mtime.getTime() > dstStat.mtime.getTime()) {\n\t\t\t\t\tlogger.trace('Copying ' +\n\t\t\t\t\t\tpath.join('SRC_DIR', path.relative(srcDir, src)).yellow + ' --> ' +\n\t\t\t\t\t\tpath.relative(opts.rootDir, dst).yellow);\n\t\t\t\t\texports.copyFileSync(src, dst);\n\t\t\t\t\tcopiedFiles.push(path.relative(path.join(opts.rootDir, 'Resources'), dst));\n\t\t\t\t}\n\t\t\t}\n\t\t} else {\n\t\t\tif (srcStat.isDirectory()) {\n\t\t\t\tlogger.trace('Creating directory ' + path.relative(opts.rootDir, dst).yellow);\n\t\t\t\twrench.mkdirSyncRecursive(dst, 0755);\n\t\t\t} else {\n\t\t\t\tlogger.trace('Copying ' + path.join('SRC_DIR', path.relative(srcDir, src)).yellow +\n\t\t\t\t\t' --> ' + path.relative(opts.rootDir, dst).yellow);\n\t\t\t\texports.copyFileSync(src, dst);\n\t\t\t\tcopiedFiles.push(path.relative(path.join(opts.rootDir, 'Resources'), dst));\n\t\t\t}\n\t\t}\n\t\tif (!srcStat.isDirectory() && opts.createSourceMap && path.extname(src) === '.js') {\n\t\t\tvar tpath = path.join(opts.rootDir, 'build', 'map', 'Resources', (opts.compileConfig.alloyConfig.platform === 'ios' ? 'iphone' : opts.compileConfig.alloyConfig.platform), 'alloy');\n\t\t\tvar target = {\n\t\t\t\t\tfilename: path.join(tpath, path.basename(src)),\n\t\t\t\t\tfilepath: path.dirname(dst),\n\t\t\t\t\ttemplate: dst\n\t\t\t\t},\n\t\t\t\tdata = {\n\t\t\t\t\t'__MAPMARKER_NONCONTROLLER__': {\n\t\t\t\t\t\tfilename: src,\n\t\t\t\t\t\tfilepath: path.dirname(src),\n\t\t\t\t\t}\n\t\t\t\t};\n\t\t\tsourceMapper.generateSourceMap({\n\t\t\t\ttarget: target,\n\t\t\t\tdata: data,\n\t\t\t\torigFile: {\n\t\t\t\t\tfilename: src,\n\t\t\t\t\tfilepath: path.dirname(src)\n\t\t\t\t}\n\t\t\t}, opts.compileConfig);\n\t\t}\n\t});\n\tlogger.trace('');\n\n\treturn copiedFiles;\n};\n\nexports.getWidgetDirectories = function(appDir) {\n\tvar configPath = path.join(appDir, 'config.json');\n\tvar appWidgets = [];\n\tif (fs.existsSync(configPath)) {\n\t\ttry {\n\t\t\tvar content = fs.readFileSync(configPath, 'utf8');\n\t\t\tappWidgets = jsonlint.parse(content).dependencies;\n\t\t} catch (e) {\n\t\t\texports.die('Error parsing \"config.json\"', e);\n\t\t}\n\t}\n\n\tvar dirs = [];\n\tvar collections = [];\n\tvar widgetPaths = [];\n\twidgetPaths.push(path.join(__dirname, '..', 'widgets'));\n\twidgetPaths.push(path.join(appDir, 'widgets'));\n\n\t_.each(widgetPaths, function(widgetPath) {\n\t\tif (fs.existsSync(widgetPath)) {\n\t\t\tvar wFiles = fs.readdirSync(widgetPath);\n\t\t\tfor (var i = 0; i < wFiles.length; i++) {\n\t\t\t\tvar wDir = path.join(widgetPath, wFiles[i]);\n\t\t\t\tif (fs.statSync(wDir).isDirectory() &&\n\t\t\t\t\t_.indexOf(fs.readdirSync(wDir), 'widget.json') !== -1) {\n\t\t\t\t\tvar collection = parseManifestAsCollection(path.join(wDir, 'widget.json'));\n\t\t\t\t\tcollections[collection.manifest.id] = collection;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t});\n\n\tfunction parseManifestAsCollection(wFile) {\n\t\tvar wDir = path.dirname(wFile);\n\t\tvar manifest;\n\t\ttry {\n\t\t\tmanifest = jsonlint.parse(fs.readFileSync(wFile, 'utf8'));\n\t\t} catch (e) {\n\t\t\texports.die('Error parsing \"' + wFile + '\"', e);\n\t\t}\n\n\t\treturn {\n\t\t\tdir: wDir,\n\t\t\tmanifest: manifest\n\t\t};\n\t}\n\n\tfunction findWidgetAsNodeModule(id) {\n\t\tvar wFile;\n\t\ttry {\n\t\t\twFile = resolve.sync(path.join(CONST.NPM_WIDGET_PREFIX + id, 'widget'), { basedir: path.join(appDir, '..'), extensions: [ '.json' ], paths: paths() });\n\t\t} catch (err) {\n\t\t\treturn;\n\t\t}\n\n\t\tvar collection = parseManifestAsCollection(wFile);\n\t\tif (collection.manifest.id !== id) {\n\t\t\treturn logger.warn('Expected \"' + wFile + '\" to have id \"' + id + '\" instead of \"' + collection.manifest.id + '\"');\n\t\t}\n\n\t\tvar pFile = path.join(path.dirname(wFile), 'package.json');\n\t\tvar pkg;\n\t\ttry {\n\t\t\tpkg = jsonlint.parse(fs.readFileSync(pFile, 'utf8'));\n\t\t} catch (e) {\n\t\t\texports.die('Error parsing \"' + pFile + '\"', e);\n\t\t}\n\n\t\tvar missingKeywords = _.difference(CONST.NPM_WIDGET_KEYWORDS, pkg.keywords || []);\n\t\tif (missingKeywords.length > 0) {\n\t\t\treturn logger.warn('Expected \"' + pFile + '\" to have missing keywords \"' + missingKeywords.join('\", \"') + '\"');\n\t\t}\n\n\t\treturn collection;\n\t}\n\n\tfunction walkWidgetDependencies(id) {\n\t\tvar collection = collections[id];\n\n\t\tif (!collection) {\n\t\t\tcollection = findWidgetAsNodeModule(id);\n\n\t\t\tif (!collection) {\n\t\t\t\tnotFound.push(id);\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\n\t\tdirs.push(collection);\n\t\tfor (var dependency in collection.manifest.dependencies) {\n\t\t\twalkWidgetDependencies(dependency);\n\t\t}\n\t}\n\n\t// walk the dependencies, tracking any missing widgets\n\tvar notFound = [];\n\tfor (var id in appWidgets) {\n\t\twalkWidgetDependencies(id);\n\t}\n\n\t// if there are missing widgets, abort and tell the developer which ones\n\tif (!!notFound.length) { // eslint-disable-line no-extra-boolean-cast\n\t\texports.die([\n\t\t\t'config.json references non-existent widgets: ' + JSON.stringify(notFound),\n\t\t\t'If you are not using these widgets, remove them from your config.json dependencies.',\n\t\t\t'If you are using them, add them to your project\\'s widget folder or as NPM package.'\n\t\t]);\n\t}\n\n\treturn dirs;\n};\n\nexports.properCase = function(n) {\n\treturn n.charAt(0).toUpperCase() + n.substring(1);\n};\n\nexports.ucfirst = function (text) {\n\tif (!text)\n\t\treturn text;\n\treturn text[0].toUpperCase() + text.substr(1);\n};\n\nexports.lcfirst = function (text) {\n\tif (!text)\n\t\treturn text;\n\treturn text[0].toLowerCase() + text.substr(1);\n};\n\nexports.trim = function(line) {\n\treturn String(line).replace(/^\\s\\s*/, '').replace(/\\s\\s*$/, '');\n};\n\nexports.rmdirContents = function(dir, exceptions) {\n\tvar files;\n\ttry {\n\t\tfiles = fs.readdirSync(dir);\n\t} catch (e) {\n\t\treturn;\n\t}\n\n\tfor (var i = 0, l = files.length; i < l; i++) {\n\t\tvar currFile = path.join(dir, files[i]);\n\t\tvar stat = fs.lstatSync(currFile);\n\n\t\t// process the exceptions\n\t\tvar result = _.find(exceptions, function(exception) {\n\t\t\tif (exception instanceof RegExp) {\n\t\t\t\treturn exception.test(files[i]);\n\t\t\t} else {\n\t\t\t\treturn files[i] === exception;\n\t\t\t}\n\t\t});\n\n\t\t// skip any exceptions\n\t\tif (result) {\n\t\t\tcontinue;\n\t\t// use wrench to delete directories\n\t\t} else if (stat.isDirectory()) {\n\t\t\twrench.rmdirSyncRecursive(currFile, true);\n\t\t// unlink any files or links\n\t\t} else {\n\t\t\tfs.unlinkSync(currFile);\n\t\t}\n\t}\n};\n\nexports.resolveAppHome = function() {\n\tvar indexView = path.join(CONST.DIR.VIEW, CONST.NAME_DEFAULT + '.' + CONST.FILE_EXT.VIEW);\n\tvar paths = [ path.join('.', 'app'), path.join('.') ];\n\n\t// Do we have an Alloy project? Find views/index.xml.\n\tfor (var i = 0; i < paths.length; i++) {\n\t\tpaths[i] = path.resolve(paths[i]);\n\t\tvar testPath = path.join(paths[i], indexView);\n\t\tif (fs.existsSync(testPath)) {\n\t\t\treturn paths[i];\n\t\t}\n\t}\n\n\t// Report error, show the paths searched.\n\tvar errs = [ 'No valid Alloy project found at the following paths (no \"views/index.xml\"):' ];\n\terrs.push(paths);\n\texports.die(errs);\n};\n\nexports.copyFileSync = function(srcFile, destFile) {\n\tvar BUF_LENGTH = 64 * 1024,\n\t\tbuff,\n\t\tbytesRead,\n\t\tfdr,\n\t\tfdw,\n\t\tpos;\n\tbuff = new Buffer(BUF_LENGTH);\n\tfdr = fs.openSync(srcFile, 'r');\n\texports.ensureDir(path.dirname(destFile));\n\tfdw = fs.openSync(destFile, 'w');\n\tbytesRead = 1;\n\tpos = 0;\n\twhile (bytesRead > 0) {\n\t\tbytesRead = fs.readSync(fdr, buff, 0, BUF_LENGTH, pos);\n\t\tfs.writeSync(fdw, buff, 0, bytesRead);\n\t\tpos += bytesRead;\n\t}\n\tfs.closeSync(fdr);\n\treturn fs.closeSync(fdw);\n};\n\nexports.ensureDir = function(p) {\n\tif (!fs.existsSync(p)) {\n\t\twrench.mkdirSyncRecursive(p, 0755);\n\t}\n};\n\nexports.die = function(msg, e) {\n\tif (e) {\n\t\tlogger.error(exports.createErrorOutput(msg, e));\n\t} else {\n\t\tlogger.error(msg);\n\t}\n\tprocess.exit(1);\n};\n\nexports.dieWithNode = function(node, msg) {\n\tmsg = _.isArray(msg) ? msg : [msg];\n\tmsg.unshift('Error with <' + node.nodeName + '> at line ' + node.lineNumber);\n\texports.die(msg);\n};\n\nexports.changeTime = function(file) {\n\tif (!fs.existsSync(file)) { return -1; }\n\tvar stat = fs.statSync(file);\n\treturn Math.max(stat.mtime.getTime(), stat.ctime.getTime());\n};\n\nexports.stripColors = function(str) {\n\treturn str.replace(/\\x1B\\[([0-9]{1,2}(;[0-9]{1,2})?)?[m|K]/g, '');\n};\n\nexports.installPlugin = function(alloyPath, projectPath) {\n\tvar id = 'ti.alloy';\n\tvar plugins = {\n\t\tplugin: {\n\t\t\tfile: CONST.PLUGIN_FILE,\n\t\t\tsrc: path.join(alloyPath, 'Alloy', 'plugin'),\n\t\t\tdest: path.join(projectPath, 'plugins', id)\n\t\t},\n\t\thook: {\n\t\t\tfile: CONST.HOOK_FILE,\n\t\t\tsrc: path.join(alloyPath, 'hooks'),\n\t\t\tdest: path.join(projectPath, 'plugins', id, 'hooks')\n\t\t},\n\t\tcleanhook: {\n\t\t\tfile: CONST.HOOK_FILE_CLEAN,\n\t\t\tsrc: path.join(alloyPath, 'hooks'),\n\t\t\tdest: path.join(projectPath, 'plugins', id, 'hooks')\n\t\t}\n\t};\n\n\t_.each(plugins, function(o, type) {\n\t\tvar srcFile = path.join(o.src, o.file);\n\t\tvar destFile = path.join(o.dest, o.file);\n\n\t\t// skip if the src and dest are the same file\n\t\tif (fs.existsSync(destFile) &&\n\t\t\tfs.readFileSync(srcFile, 'utf8') === fs.readFileSync(destFile, 'utf8')) {\n\t\t\treturn;\n\t\t}\n\t\texports.ensureDir(o.dest);\n\t\texports.copyFileSync(srcFile, destFile);\n\n\t\tlogger.info('Deployed ti.alloy ' + type + ' to ' + destFile);\n\t});\n\n\t// add the plugin to tiapp.xml, if necessary\n\ttiapp.init(path.join(projectPath, 'tiapp.xml'));\n\ttiapp.installPlugin({\n\t\tid: 'ti.alloy',\n\t\tversion: '1.0'\n\t});\n};\n\nexports.normalizeReturns = function(s) {\n\treturn s.replace(/\\r\\n/g, '\\n');\n};\n\nexports.createHash = function(files) {\n\tif (_.isString(files)) {\n\t\tfiles = [files];\n\t} else if (!_.isArray(files)) {\n\t\tthrow new TypeError('bad argument');\n\t}\n\n\tvar source = '';\n\t_.each(files, function(f) {\n\t\tsource += util.format('%s\\n%s\\n', f, fs.existsSync(f) ? fs.readFileSync(f, 'utf8') : '');\n\t});\n\n\treturn crypto.createHash('md5').update(source).digest('hex');\n};\n\nexports.createHashFromString = function(string) {\n\tif (!_.isString(string)) {\n\t\tthrow new TypeError('bad argument');\n\t}\n\treturn crypto.createHash('md5').update(string).digest('hex');\n};\n\nexports.proxyPropertyNameFromFullname = function(fullname) {\n\tvar nameParts = fullname.split('.');\n\treturn exports.lcfirst(nameParts[nameParts.length - 1]);\n};\n\n/*\nTwo date-related functions for ALOY-263\n\t- used by compile/parsers/Ti.UI.Picker.js and compile/styler.js\n*/\nexports.isValidDate = function(d, dateField) {\n\t// not using _.isDate() because it accepts some invalid date strings\n\tif (!require('moment')(d).isValid()) {\n\t\texports.die('Invalid date string. ' + dateField + \" must be a string that can be parsed by MomentJS's `moment()` constructor.\");\n\t} else {\n\t\treturn true;\n\t}\n};\nexports.createDate = function(val) {\n\treturn require('moment')(val).toDate();\n};\n\nexports.isLocaleAlias = function(string) {\n\treturn /^\\s*L\\((['\\\"])(.+)\\1\\)\\s*$/.test(string);\n};\n\nexports.getDeploymentTargets = function(projDir) {\n\tvar tiappPath = path.join(projDir, 'tiapp.xml'),\n\t\ttiappDoc,\n\t\ttargets;\n\n\tif (fs.existsSync(tiappPath)) {\n\t\ttiapp.init(tiappPath);\n\t\ttargets = tiapp.getDeploymentTargets().join(',');\n\t} else {\n\t\ttargets = CONST.PLATFORMS.join(',');\n\t}\n\n\treturn targets;\n};\n","/home/travis/build/npmtest/node-npmtest-alloy/node_modules/alloy/Alloy/tiapp.js":"var fs = require('fs'),\n\tpath = require('path'),\n\tXMLSerializer = require('xmldom').XMLSerializer,\n\tpkg = require('../package'),\n\tU = require('./utils'),\n\tCONST = require('./common/constants'),\n\tlogger = require('./logger');\n\nvar DEFAULT_TIAPP = path.join('.', 'tiapp.xml');\n\nvar tiapp = {},\n\ttiappFile, doc;\n\n// initialize the project folder\ntiapp.init = function(file) {\n\ttiappFile = file || DEFAULT_TIAPP;\n\tdoc = tiapp.parse(tiappFile);\n};\n\n// Return an XML document object representing the tiapp.xml file\ntiapp.parse = function(file) {\n\tfile = file || tiappFile;\n\tif (!fs.existsSync(file)) {\n\t\tU.die('tiapp.xml file does not exist at \"' + file + '\"');\n\t}\n\treturn U.XML.parseFromFile(file);\n};\n\n// Get the Titanium SDK version as a string\n// Get the Titanium SDK version as a string\ntiapp.getSdkVersion = function() {\n\tvar elems = doc.documentElement.getElementsByTagName('sdk-version');\n\tif (elems && elems.length > 0) {\n\t\treturn U.XML.getNodeText(elems.item(elems.length - 1));\n\t} else {\n\t\tif (process.env.sdk) {\n\t\t\treturn process.env.sdk;\n\t\t} else {\n\t\t\treturn getSdkSelectVersion();\n\t\t}\n\t}\n};\nfunction getSdkSelectVersion() {\n\tvar homeDir = process.env[(process.platform == 'win32') ? 'USERPROFILE' : 'HOME'],\n\t\tfile = path.join(homeDir, '.titanium', 'config.json');\n\tif (!fs.existsSync(file)) {\n\t\tU.die('Titanium configuration file does not exist at \"' + file + '\"');\n\t}\n\tvar ticonfig = JSON.parse(fs.readFileSync(file, {encoding: 'utf8'}));\n\treturn ticonfig.sdk.selected;\n}\n\n// Get the value of a property from the tiapp.xml\ntiapp.getProperty = function(name) {\n\tvar props = doc.documentElement.getElementsByTagName('property');\n\tfor (var i = 0; i < props.length; i++) {\n\t\tif (props.item(i).getAttribute('name') === name) {\n\t\t\treturn props.item(i);\n\t\t}\n\t}\n\treturn null;\n};\n\n// Add a module to the tiapp.xml\ntiapp.installModule = function(opts) {\n\tinstall('module', opts);\n};\n\n// Add a plugin to the tiapp.xml\ntiapp.installPlugin = function(opts) {\n\tinstall('plugin', opts);\n};\n\n// make sure the target TiSDK version meets the minimum for Alloy\ntiapp.validateSdkVersion = function() {\n\tvar tiVersion = tiapp.getSdkVersion();\n\tif (tiVersion === null) {\n\t\tlogger.warn('Unable to determine Titanium SDK version from tiapp.xml.');\n\t\tlogger.warn('Your app may have unexpected behavior. Make sure your tiapp.xml is valid.');\n\t} else if (tiapp.version.lt(tiVersion, CONST.MINIMUM_TI_SDK)) {\n\t\tlogger.error('Alloy ' + pkg.version + ' requires Titanium SDK ' +\n\t\t\tCONST.MINIMUM_TI_SDK + ' or higher.');\n\t\tlogger.error('\"' + tiVersion + '\" was found in the \"sdk-version\" field of your tiapp.xml.');\n\t\tlogger.error('If you are building with the legacy titanium.py script and are specifying ');\n\t\tlogger.error('an SDK version as a CLI argument that is different than the one in your ');\n\t\tlogger.error('tiapp.xml, please change the version in your tiapp.xml file.');\n\t\tprocess.exit(1);\n\t}\n};\n\n// version comparison functions\ntiapp.version = {\n\tcompare: function(v1, v2) {\n\t\t// use the tiapp.xml version if v2 is not specified\n\t\tif (typeof v2 === 'undefined') {\n\t\t\tv2 = v1;\n\t\t\tv1 = tiapp.getSdkVersion();\n\t\t}\n\n\t\tvar parts1 = (v1 || '').split('.'),\n\t\t\tparts2 = (v2 || '').split('.');\n\n\t\tfor (var i = 0; i < 3; i++) {\n\t\t\tvar p1 = parseInt(parts1[i] || 0, 10),\n\t\t\t\tp2 = parseInt(parts2[i] || 0, 10);\n\t\t\tif (p1 > p2) {\n\t\t\t\treturn 1;\n\t\t\t} else if (p1 < p2) {\n\t\t\t\treturn -1;\n\t\t\t}\n\t\t}\n\n\t\treturn 0;\n\t},\n\teq: function(v1, v2) { return tiapp.version.compare(v1, v2) === 0; },\n\tgt: function(v1, v2) { return tiapp.version.compare(v1, v2) === 1; },\n\tgte: function(v1, v2) { return tiapp.version.compare(v1, v2) !== -1; },\n\tlt: function(v1, v2) { return tiapp.version.compare(v1, v2) === -1; },\n\tlte: function(v1, v2) { return tiapp.version.compare(v1, v2) !== 1; },\n\tneq: function(v1, v2) { return tiapp.version.compare(v1, v2) !== 0; }\n};\n\ntiapp.getDeploymentTargets = function() {\n\tvar deployment = doc.documentElement.getElementsByTagName('deployment-targets'),\n\t\tresults = [];\n\n\tif (deployment.length > 0) {\n\t\tvar targets = deployment.item(0).getElementsByTagName('target');\n\t\tfor (var i = 0, j = targets.length; i < j; i++) {\n\t\t\tvar target = targets.item(i);\n\t\t\tif (U.XML.getNodeText(target) === 'true') {\n\t\t\t\tvar platform = target.getAttribute('device');\n\t\t\t\tif (platform === 'iphone' || platform === 'ipad') {\n\t\t\t\t\tplatform = 'ios';\n\t\t\t\t}\n\n\t\t\t\tif (results.indexOf(platform) === -1) {\n\t\t\t\t\tresults.push(platform);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn results;\n};\n\nfunction install(type, opts) {\n\ttype = type || 'module';\n\topts = opts || {};\n\n\tvar err = 'Project creation failed. Unable to install ' + type + ' \"' +\n\t\t(opts.name || opts.id) + '\"';\n\n\t// read the tiapp.xml file\n\tvar collection = doc.documentElement.getElementsByTagName(type + 's');\n\tvar found = false;\n\n\t// Determine if the module or plugin is already installed\n\tif (collection.length > 0) {\n\t\tvar items = collection.item(0).getElementsByTagName(type);\n\t\tif (items.length > 0) {\n\t\t\tfor (var c = 0; c < items.length; c++) {\n\t\t\t\tvar theItem = items.item(c);\n\t\t\t\tvar theItemText = U.XML.getNodeText(theItem);\n\t\t\t\tif (theItemText == opts.id) {\n\t\t\t\t\tfound = true;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t// install module or plugin\n\tif (!found) {\n\t\t// create the node to be inserted\n\t\tvar node = doc.createElement(type);\n\t\tvar text = doc.createTextNode(opts.id);\n\t\tif (opts.platform) {\n\t\t\tnode.setAttribute('platform', opts.platform);\n\t\t}\n\t\tif (opts.version) {\n\t\t\tnode.setAttribute('version', opts.version);\n\t\t}\n\t\tnode.appendChild(text);\n\n\t\t// add the node into tiapp.xml\n\t\tvar pna = null;\n\t\tif (collection.length === 0) {\n\t\t\tvar pn = doc.createElement(type + 's');\n\t\t\tdoc.documentElement.appendChild(pn);\n\t\t\tdoc.documentElement.appendChild(doc.createTextNode('\\n'));\n\t\t\tpna = pn;\n\t\t} else {\n\t\t\tpna = collection.item(0);\n\t\t}\n\t\tpna.appendChild(node);\n\t\tpna.appendChild(doc.createTextNode('\\n'));\n\n\t\t// serialize the xml and write to tiapp.xml\n\t\tvar serializer = new XMLSerializer();\n\t\tvar newxml = serializer.serializeToString(doc);\n\t\tfs.writeFileSync(tiappFile, newxml, 'utf8');\n\n\t\tlogger.info('Installed \"' + opts.id + '\" ' + type + ' to ' + tiappFile);\n\t}\n\n}\n\nmodule.exports = tiapp;\n","/home/travis/build/npmtest/node-npmtest-alloy/node_modules/alloy/Alloy/common/constants.js":"var isTitanium = typeof Titanium !== 'undefined';\nvar _, generatePlatformArray;\n\nif (isTitanium) {\n\t_ = require('/alloy/underscore')._;\n} else {\n\tvar platforms = require('../../platforms/index');\n\t_ = require('../lib/alloy/underscore')._;\n\n\t// iterate through supported platforms to create specific constants\n\tgeneratePlatformArray = function(key) {\n\t\tvar ret = [];\n\t\t_.each(_.keys(platforms), function(p) {\n\t\t\tret.push(platforms[p][key]);\n\t\t});\n\t\treturn ret;\n\t};\n\n\t// generate compile time constants based on supported platforms\n\texports.PLATFORMS = generatePlatformArray('platform');\n\texports.PLATFORM_FOLDERS_ALLOY = generatePlatformArray('alloyFolder');\n\texports.PLATFORM_FOLDERS = generatePlatformArray('titaniumFolder');\n}\n\n// General default values\nexports.ALLOY_DIR = 'app';\nexports.ALLOY_RUNTIME_DIR = 'alloy';\nexports.RESOURCES_DIR = 'Resources';\nexports.NAME_DEFAULT = 'index';\nexports.NAME_WIDGET_DEFAULT = 'widget';\nexports.NPM_WIDGET_PREFIX = 'alloy-widget-';\nexports.NPM_WIDGET_KEYWORDS = ['appcelerator', 'titanium', 'alloy', 'widget'];\nexports.GLOBAL_STYLE = 'app.tss';\nexports.ROOT_NODE = 'Alloy';\nexports.NAMESPACE_DEFAULT = 'Ti.UI';\nexports.REQUIRE_TYPE_DEFAULT = 'view';\nexports.PLUGIN_NAME = 'ti.alloy';\nexports.EXPR_PREFIX = '#';\nexports.PLUGIN_FILE = 'plugin.py';\nexports.HOOK_FILE = 'alloy.js';\nexports.HOOK_FILE_CLEAN = 'deepclean.js';\nexports.MINIMUM_TI_SDK = '3.0.0';\nexports.ITEM_TEMPLATE_VAR = '__itemTemplate';\nexports.PARENT_SYMBOL_VAR = '__parentSymbol';\nexports.WIDGET_OBJECT = 'Widget';\nexports.SKIP_EVENT_HANDLING = ['Ti.UI.ListItem', 'Alloy.Abstract.ItemTemplate'];\nexports.ADAPTERS = ['localStorage', 'properties', 'sql'];\nexports.CONTROLLER_NODES = ['Alloy.Require', 'Alloy.Widget'];\nexports.DEFAULT_BACKBONE_VERSION = '0.9.2';\nexports.SUPPORTED_BACKBONE_VERSIONS = ['0.9.2', '1.1.2'];\n\n// property names\nexports.CLASS_PROPERTY = 'classes';\nexports.APINAME_PROPERTY = 'apiName';\nexports.AUTOSTYLE_PROPERTY = 'autoStyle';\nexports.DOCROOT_MODULE_PROPERTY = 'module';\nexports.DOCROOT_BASECONTROLLER_PROPERTY = 'baseController';\n\n// Constants related to model-view binding\nexports.BIND_PROPERTIES = ['dataCollection', 'dataFilter', 'dataTransform', 'dataFunction'];\nexports.BIND_COLLECTION = 'dataCollection';\nexports.BIND_WHERE = 'dataFilter';\nexports.BIND_TRANSFORM = 'dataTransform';\nexports.BIND_FUNCTION = 'dataFunction';\nexports.BIND_TRANSFORM_VAR = '__transform';\nexports.BIND_MODEL_VAR = '$model';\nexports.MODEL_ELEMENTS = ['Alloy.Collection', 'Alloy.Model'];\nexports.MODEL_BINDING_EVENTS = 'fetch change destroy';\nexports.COLLECTION_BINDING_EVENTS = 'fetch destroy change add remove reset';\n\n// Listings for supported platforms and commands\nexports.INSTALL_TYPES = ['plugin'];\nexports.GENERATE_TARGETS = ['controller', 'jmk', 'model', 'migration', 'view', 'widget', 'style'];\nexports.DEPLOY_TYPES = [\n\t{ key: 'ENV_DEV', value: 'development' },\n\t{ key: 'ENV_DEVELOPMENT', value: 'development' },\n\t{ key: 'ENV_TEST', value: 'test' },\n\t{ key: 'ENV_PROD', value: 'production' },\n\t{ key: 'ENV_PRODUCTION', value: 'production' }\n];\nexports.DIST_TYPES = [\n\t{ key: 'DIST_ADHOC', value: ['dist-adhoc'] },\n\t{ key: 'DIST_STORE', value: ['dist-appstore', 'dist-playstore'] }\n];\n\n// mappings of file extensions and folders for each file type\nexports.FILE_EXT = {\n\tVIEW: 'xml',\n\tSTYLE: 'tss',\n\tMODEL: 'js',\n\tMODELCODE: 'js',\n\tMIGRATION: 'js',\n\tCONTROLLER: 'js',\n\tCOMPONENT: 'js',\n\tCONFIG: 'json',\n\tJMK: 'jmk',\n\tMAP: 'map'\n};\nexports.DIR = {\n\tVIEW: 'views',\n\tSTYLE: 'styles',\n\tRUNTIME_STYLE: 'styles',\n\tCONTROLLER: 'controllers',\n\tMODEL: 'models',\n\tMODELCODE: 'models',\n\tMIGRATION: 'migrations',\n\tCONFIG: 'config',\n\tASSETS: 'assets',\n\tWIDGET: 'widgets',\n\tLIB: 'lib',\n\tCOMPONENT: 'controllers',\n\tMAP: 'build/map',\n\tVENDOR: 'vendor',\n\tTHEME: 'themes',\n\tBUILD: 'build/alloy',\n\tI18N: 'i18n',\n\tPLATFORM: 'platform'\n};\n// folders/files to exclude when copying and processing files\n// RegEx format: must escape special chars - so use \\.svn not .svn\nexports.EXCLUDED_FILES = [\n\t'\\\\.svn', '\\\\.git'\n];\n\n// constants identifying JS reserved words\nexports.JS_RESERVED = [\n\t'break', 'case', 'catch', 'continue', 'debugger', 'default', 'delete',\n\t'do', 'else', 'finally', 'for', 'function', 'if', 'in', 'instanceof',\n\t'new', 'return', 'switch', 'this', 'throw', 'try', 'typeof', 'var',\n\t'void', 'while', 'with'\n];\nexports.JS_RESERVED_FUTURE = [\n\t'class', 'enum', 'export', 'extends', 'import', 'super', 'implements',\n\t'interface', 'let', 'package', 'private', 'protected', 'public',\n\t'static', 'yield'\n];\nexports.JS_RESERVED_ALL = _.union(exports.JS_RESERVED, exports.JS_RESERVED_FUTURE);\n\n// constants for implicit namespaces in markup\nvar NS_ALLOY = 'Alloy',\n\tNS_ALLOY_ABSTRACT = 'Alloy.Abstract',\n\tNS_TI_ANDROID = 'Ti.Android',\n\tNS_TI_MAP = 'Ti.Map',\n\tNS_TI_MEDIA = 'Ti.Media',\n\tNS_TI_UI_IOS = 'Ti.UI.iOS',\n\tNS_TI_UI_IPAD = 'Ti.UI.iPad',\n\tNS_TI_UI_IPHONE = 'Ti.UI.iPhone',\n\tNS_TI_UI_MOBILEWEB = 'Ti.UI.MobileWeb',\n\tNS_TI_UI_WINDOWS = 'Ti.UI.Windows';\n\nexports.IMPLICIT_NAMESPACES = {\n\t// Alloy\n\tCollection: NS_ALLOY,\n\tModel: NS_ALLOY,\n\tModule: NS_ALLOY,\n\tRequire: NS_ALLOY,\n\tWidget: NS_ALLOY,\n\n\t// Alloy.Abstract\n\tButtonNames: NS_ALLOY_ABSTRACT,\n\tButtonName: NS_ALLOY_ABSTRACT,\n\tBarItemTypes: NS_ALLOY_ABSTRACT,\n\tBarItemType: NS_ALLOY_ABSTRACT,\n\tCoverFlowImageTypes: NS_ALLOY_ABSTRACT,\n\tCoverFlowImageType: NS_ALLOY_ABSTRACT,\n\tFlexSpace: NS_ALLOY_ABSTRACT,\n\tFixedSpace: NS_ALLOY_ABSTRACT,\n\tImages: NS_ALLOY_ABSTRACT,\n\tItem: NS_ALLOY_ABSTRACT,\n\tItems: NS_ALLOY_ABSTRACT,\n\tItemTemplate: NS_ALLOY_ABSTRACT,\n\tLabels: NS_ALLOY_ABSTRACT,\n\tOption: NS_ALLOY_ABSTRACT,\n\tOptions: NS_ALLOY_ABSTRACT,\n\tTemplates: NS_ALLOY_ABSTRACT,\n\tPreview: NS_ALLOY_ABSTRACT,\n\tActions: NS_ALLOY_ABSTRACT,\n\n\t// Ti.Android\n\tMenu: NS_TI_ANDROID,\n\tMenuItem: NS_TI_ANDROID,\n\tActionBar: NS_TI_ANDROID,\n\n\t// Ti.UI.Android\n\tCardView: 'Ti.UI.Android',\n\n\t// Ti.Map\n\tAnnotation: NS_TI_MAP,\n\n\t// Ti.Media\n\tVideoPlayer: NS_TI_MEDIA,\n\tMusicPlayer: NS_TI_MEDIA,\n\n\t// Ti.UI.iOS\n\tAdView: NS_TI_UI_IOS,\n\tBlurView: NS_TI_UI_IOS,\n\tCoverFlowView: NS_TI_UI_IOS,\n\tDocumentViewer: NS_TI_UI_IOS,\n\tLivePhotoView: NS_TI_UI_IOS,\n\tNavigationWindow: NS_TI_UI_IOS,\n\tSplitWindow: NS_TI_UI_IOS,\n\tTabbedBar: NS_TI_UI_IOS,\n\tToolbar: NS_TI_UI_IOS,\n\tPreviewContext: NS_TI_UI_IOS,\n\tPreviewAction: NS_TI_UI_IOS,\n\tPreviewActionGroup: NS_TI_UI_IOS,\n\tMenuPopup: NS_TI_UI_IOS,\n\tStepper: NS_TI_UI_IOS,\n\n\t// Ti.UI.iPad\n\tPopover: NS_TI_UI_IPAD,\n\n\t// Ti.UI.iPhone\n\tNavigationGroup: isTitanium && Ti.Platform.osname === 'mobileweb' ?\n\t\tNS_TI_UI_MOBILEWEB : NS_TI_UI_IPHONE,\n\tStatusBar: NS_TI_UI_IPHONE,\n\n\t// Ti.UI.Windows\n\tCommandBar: NS_TI_UI_WINDOWS,\n\tAppBarButton: NS_TI_UI_WINDOWS,\n\tAppBarToggleButton: NS_TI_UI_WINDOWS,\n\tAppBarSeparator: NS_TI_UI_WINDOWS,\n\n\t// Ti.UI.Window\n\tLeftNavButton: 'Ti.UI.Window',\n\tRightNavButton: 'Ti.UI.Window',\n\tLeftNavButtons: 'Ti.UI.Window',\n\tRightNavButtons: 'Ti.UI.Window',\n\tTitleControl: 'Ti.UI.Window',\n\tWindowToolbar: 'Ti.UI.Window',\n\n\t// Ti.UI.iPad.Popover\n\tContentView: 'Ti.UI.iPad.Popover',\n\n\t// Table and List proxy properties\n\tFooterView: '_ProxyProperty._Lists',\n\tHeaderView: '_ProxyProperty._Lists',\n\tHeaderPullView: '_ProxyProperty._Lists',\n\tPullView: '_ProxyProperty._Lists',\n\tSearch: '_ProxyProperty._Lists',\n\tSearchView: '_ProxyProperty._Lists',\n\n\t// misc proxy properties\n\tRightButton: '_ProxyProperty',\n\tLeftButton: '_ProxyProperty',\n\tKeyboardToolbar: '_ProxyProperty',\n\tActionView: '_ProxyProperty'\n\n};\n\n// properties named with \"on\" that aren't used to signify event listeners\nexports.SPECIAL_PROPERTY_NAMES = [\n\t'onHomeIconItemSelected',\n\t'onTintColor',\n\t'onCreateOptionsMenu',\n\t'onPrepareOptionsMenu'\n];\n\nexports.COMMANDS = {\n\tGENERATE: 'generate'\n};\n","/home/travis/build/npmtest/node-npmtest-alloy/node_modules/alloy/platforms/index.js":"var fs = require('fs'),\n\tpath = require('path'),\n\t_ = require('../Alloy/lib/alloy/underscore')._;\n\nmodule.exports = (function() {\n\tvar obj = {};\n\t_.each(fs.readdirSync(__dirname), function(file) {\n\t\tif (fs.existsSync(path.join(__dirname, file, 'index.js'))) {\n\t\t\tobj[file] = require('./' + file + '/index');\n\t\t}\n\t});\n\treturn obj;\n})();","/home/travis/build/npmtest/node-npmtest-alloy/node_modules/alloy/Alloy/lib/alloy/underscore.js":"//     Underscore.js 1.6.0\n//     http://underscorejs.org\n//     (c) 2009-2014 Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors\n//     Underscore may be freely distributed under the MIT license.\n\n(function() {\n\n  // Baseline setup\n  // --------------\n\n  // Establish the root object, `window` in the browser, or `exports` on the server.\n  var root = this;\n\n  // Save the previous value of the `_` variable.\n  var previousUnderscore = root._;\n\n  // Establish the object that gets returned to break out of a loop iteration.\n  var breaker = {};\n\n  // Save bytes in the minified (but not gzipped) version:\n  var ArrayProto = Array.prototype, ObjProto = Object.prototype, FuncProto = Function.prototype;\n\n  // Create quick reference variables for speed access to core prototypes.\n  var\n    push             = ArrayProto.push,\n    slice            = ArrayProto.slice,\n    concat           = ArrayProto.concat,\n    toString         = ObjProto.toString,\n    hasOwnProperty   = ObjProto.hasOwnProperty;\n\n  // All **ECMAScript 5** native function implementations that we hope to use\n  // are declared here.\n  var\n    nativeForEach      = ArrayProto.forEach,\n    nativeMap          = ArrayProto.map,\n    nativeReduce       = ArrayProto.reduce,\n    nativeReduceRight  = ArrayProto.reduceRight,\n    nativeFilter       = ArrayProto.filter,\n    nativeEvery        = ArrayProto.every,\n    nativeSome         = ArrayProto.some,\n    nativeIndexOf      = ArrayProto.indexOf,\n    nativeLastIndexOf  = ArrayProto.lastIndexOf,\n    nativeIsArray      = Array.isArray,\n    nativeKeys         = Object.keys,\n    nativeBind         = FuncProto.bind;\n\n  // Create a safe reference to the Underscore object for use below.\n  var _ = function(obj) {\n    if (obj instanceof _) return obj;\n    if (!(this instanceof _)) return new _(obj);\n    this._wrapped = obj;\n  };\n\n  // Export the Underscore object for **Node.js**, with\n  // backwards-compatibility for the old `require()` API. If we're in\n  // the browser, add `_` as a global object via a string identifier,\n  // for Closure Compiler \"advanced\" mode.\n  if (typeof exports !== 'undefined') {\n    if (typeof module !== 'undefined' && module.exports) {\n      exports = module.exports = _;\n    }\n    exports._ = _;\n  } else {\n    root._ = _;\n  }\n\n  // Current version.\n  _.VERSION = '1.6.0';\n\n  // Collection Functions\n  // --------------------\n\n  // The cornerstone, an `each` implementation, aka `forEach`.\n  // Handles objects with the built-in `forEach`, arrays, and raw objects.\n  // Delegates to **ECMAScript 5**'s native `forEach` if available.\n  var each = _.each = _.forEach = function(obj, iterator, context) {\n    if (obj == null) return obj;\n    if (nativeForEach && obj.forEach === nativeForEach) {\n      obj.forEach(iterator, context);\n    } else if (obj.length === +obj.length) {\n      for (var i = 0, length = obj.length; i < length; i++) {\n        if (iterator.call(context, obj[i], i, obj) === breaker) return;\n      }\n    } else {\n      var keys = _.keys(obj);\n      for (var i = 0, length = keys.length; i < length; i++) {\n        if (iterator.call(context, obj[keys[i]], keys[i], obj) === breaker) return;\n      }\n    }\n    return obj;\n  };\n\n  // Return the results of applying the iterator to each element.\n  // Delegates to **ECMAScript 5**'s native `map` if available.\n  _.map = _.collect = function(obj, iterator, context) {\n    var results = [];\n    if (obj == null) return results;\n    if (nativeMap && obj.map === nativeMap) return obj.map(iterator, context);\n    each(obj, function(value, index, list) {\n      results.push(iterator.call(context, value, index, list));\n    });\n    return results;\n  };\n\n  var reduceError = 'Reduce of empty array with no initial value';\n\n  // **Reduce** builds up a single result from a list of values, aka `inject`,\n  // or `foldl`. Delegates to **ECMAScript 5**'s native `reduce` if available.\n  _.reduce = _.foldl = _.inject = function(obj, iterator, memo, context) {\n    var initial = arguments.length > 2;\n    if (obj == null) obj = [];\n    if (nativeReduce && obj.reduce === nativeReduce) {\n      if (context) iterator = _.bind(iterator, context);\n      return initial ? obj.reduce(iterator, memo) : obj.reduce(iterator);\n    }\n    each(obj, function(value, index, list) {\n      if (!initial) {\n        memo = value;\n        initial = true;\n      } else {\n        memo = iterator.call(context, memo, value, index, list);\n      }\n    });\n    if (!initial) throw new TypeError(reduceError);\n    return memo;\n  };\n\n  // The right-associative version of reduce, also known as `foldr`.\n  // Delegates to **ECMAScript 5**'s native `reduceRight` if available.\n  _.reduceRight = _.foldr = function(obj, iterator, memo, context) {\n    var initial = arguments.length > 2;\n    if (obj == null) obj = [];\n    if (nativeReduceRight && obj.reduceRight === nativeReduceRight) {\n      if (context) iterator = _.bind(iterator, context);\n      return initial ? obj.reduceRight(iterator, memo) : obj.reduceRight(iterator);\n    }\n    var length = obj.length;\n    if (length !== +length) {\n      var keys = _.keys(obj);\n      length = keys.length;\n    }\n    each(obj, function(value, index, list) {\n      index = keys ? keys[--length] : --length;\n      if (!initial) {\n        memo = obj[index];\n        initial = true;\n      } else {\n        memo = iterator.call(context, memo, obj[index], index, list);\n      }\n    });\n    if (!initial) throw new TypeError(reduceError);\n    return memo;\n  };\n\n  // Return the first value which passes a truth test. Aliased as `detect`.\n  _.find = _.detect = function(obj, predicate, context) {\n    var result;\n    any(obj, function(value, index, list) {\n      if (predicate.call(context, value, index, list)) {\n        result = value;\n        return true;\n      }\n    });\n    return result;\n  };\n\n  // Return all the elements that pass a truth test.\n  // Delegates to **ECMAScript 5**'s native `filter` if available.\n  // Aliased as `select`.\n  _.filter = _.select = function(obj, predicate, context) {\n    var results = [];\n    if (obj == null) return results;\n    if (nativeFilter && obj.filter === nativeFilter) return obj.filter(predicate, context);\n    each(obj, function(value, index, list) {\n      if (predicate.call(context, value, index, list)) results.push(value);\n    });\n    return results;\n  };\n\n  // Return all the elements for which a truth test fails.\n  _.reject = function(obj, predicate, context) {\n    return _.filter(obj, function(value, index, list) {\n      return !predicate.call(context, value, index, list);\n    }, context);\n  };\n\n  // Determine whether all of the elements match a truth test.\n  // Delegates to **ECMAScript 5**'s native `every` if available.\n  // Aliased as `all`.\n  _.every = _.all = function(obj, predicate, context) {\n    predicate || (predicate = _.identity);\n    var result = true;\n    if (obj == null) return result;\n    if (nativeEvery && obj.every === nativeEvery) return obj.every(predicate, context);\n    each(obj, function(value, index, list) {\n      if (!(result = result && predicate.call(context, value, index, list))) return breaker;\n    });\n    return !!result;\n  };\n\n  // Determine if at least one element in the object matches a truth test.\n  // Delegates to **ECMAScript 5**'s native `some` if available.\n  // Aliased as `any`.\n  var any = _.some = _.any = function(obj, predicate, context) {\n    predicate || (predicate = _.identity);\n    var result = false;\n    if (obj == null) return result;\n    if (nativeSome && obj.some === nativeSome) return obj.some(predicate, context);\n    each(obj, function(value, index, list) {\n      if (result || (result = predicate.call(context, value, index, list))) return breaker;\n    });\n    return !!result;\n  };\n\n  // Determine if the array or object contains a given value (using `===`).\n  // Aliased as `include`.\n  _.contains = _.include = function(obj, target) {\n    if (obj == null) return false;\n    if (nativeIndexOf && obj.indexOf === nativeIndexOf) return obj.indexOf(target) != -1;\n    return any(obj, function(value) {\n      return value === target;\n    });\n  };\n\n  // Invoke a method (with arguments) on every item in a collection.\n  _.invoke = function(obj, method) {\n    var args = slice.call(arguments, 2);\n    var isFunc = _.isFunction(method);\n    return _.map(obj, function(value) {\n      return (isFunc ? method : value[method]).apply(value, args);\n    });\n  };\n\n  // Convenience version of a common use case of `map`: fetching a property.\n  _.pluck = function(obj, key) {\n    return _.map(obj, _.property(key));\n  };\n\n  // Convenience version of a common use case of `filter`: selecting only objects\n  // containing specific `key:value` pairs.\n  _.where = function(obj, attrs) {\n    return _.filter(obj, _.matches(attrs));\n  };\n\n  // Convenience version of a common use case of `find`: getting the first object\n  // containing specific `key:value` pairs.\n  _.findWhere = function(obj, attrs) {\n    return _.find(obj, _.matches(attrs));\n  };\n\n  // Return the maximum element or (element-based computation).\n  // Can't optimize arrays of integers longer than 65,535 elements.\n  // See [WebKit Bug 80797](https://bugs.webkit.org/show_bug.cgi?id=80797)\n  _.max = function(obj, iterator, context) {\n    if (!iterator && _.isArray(obj) && obj[0] === +obj[0] && obj.length < 65535) {\n      return Math.max.apply(Math, obj);\n    }\n    var result = -Infinity, lastComputed = -Infinity;\n    each(obj, function(value, index, list) {\n      var computed = iterator ? iterator.call(context, value, index, list) : value;\n      if (computed > lastComputed) {\n        result = value;\n        lastComputed = computed;\n      }\n    });\n    return result;\n  };\n\n  // Return the minimum element (or element-based computation).\n  _.min = function(obj, iterator, context) {\n    if (!iterator && _.isArray(obj) && obj[0] === +obj[0] && obj.length < 65535) {\n      return Math.min.apply(Math, obj);\n    }\n    var result = Infinity, lastComputed = Infinity;\n    each(obj, function(value, index, list) {\n      var computed = iterator ? iterator.call(context, value, index, list) : value;\n      if (computed < lastComputed) {\n        result = value;\n        lastComputed = computed;\n      }\n    });\n    return result;\n  };\n\n  // Shuffle an array, using the modern version of the\n  // [Fisher-Yates shuffle](http://en.wikipedia.org/wiki/Fisher–Yates_shuffle).\n  _.shuffle = function(obj) {\n    var rand;\n    var index = 0;\n    var shuffled = [];\n    each(obj, function(value) {\n      rand = _.random(index++);\n      shuffled[index - 1] = shuffled[rand];\n      shuffled[rand] = value;\n    });\n    return shuffled;\n  };\n\n  // Sample **n** random values from a collection.\n  // If **n** is not specified, returns a single random element.\n  // The internal `guard` argument allows it to work with `map`.\n  _.sample = function(obj, n, guard) {\n    if (n == null || guard) {\n      if (obj.length !== +obj.length) obj = _.values(obj);\n      return obj[_.random(obj.length - 1)];\n    }\n    return _.shuffle(obj).slice(0, Math.max(0, n));\n  };\n\n  // An internal function to generate lookup iterators.\n  var lookupIterator = function(value) {\n    if (value == null) return _.identity;\n    if (_.isFunction(value)) return value;\n    return _.property(value);\n  };\n\n  // Sort the object's values by a criterion produced by an iterator.\n  _.sortBy = function(obj, iterator, context) {\n    iterator = lookupIterator(iterator);\n    return _.pluck(_.map(obj, function(value, index, list) {\n      return {\n        value: value,\n        index: index,\n        criteria: iterator.call(context, value, index, list)\n      };\n    }).sort(function(left, right) {\n      var a = left.criteria;\n      var b = right.criteria;\n      if (a !== b) {\n        if (a > b || a === void 0) return 1;\n        if (a < b || b === void 0) return -1;\n      }\n      return left.index - right.index;\n    }), 'value');\n  };\n\n  // An internal function used for aggregate \"group by\" operations.\n  var group = function(behavior) {\n    return function(obj, iterator, context) {\n      var result = {};\n      iterator = lookupIterator(iterator);\n      each(obj, function(value, index) {\n        var key = iterator.call(context, value, index, obj);\n        behavior(result, key, value);\n      });\n      return result;\n    };\n  };\n\n  // Groups the object's values by a criterion. Pass either a string attribute\n  // to group by, or a function that returns the criterion.\n  _.groupBy = group(function(result, key, value) {\n    _.has(result, key) ? result[key].push(value) : result[key] = [value];\n  });\n\n  // Indexes the object's values by a criterion, similar to `groupBy`, but for\n  // when you know that your index values will be unique.\n  _.indexBy = group(function(result, key, value) {\n    result[key] = value;\n  });\n\n  // Counts instances of an object that group by a certain criterion. Pass\n  // either a string attribute to count by, or a function that returns the\n  // criterion.\n  _.countBy = group(function(result, key) {\n    _.has(result, key) ? result[key]++ : result[key] = 1;\n  });\n\n  // Use a comparator function to figure out the smallest index at which\n  // an object should be inserted so as to maintain order. Uses binary search.\n  _.sortedIndex = function(array, obj, iterator, context) {\n    iterator = lookupIterator(iterator);\n    var value = iterator.call(context, obj);\n    var low = 0, high = array.length;\n    while (low < high) {\n      var mid = (low + high) >>> 1;\n      iterator.call(context, array[mid]) < value ? low = mid + 1 : high = mid;\n    }\n    return low;\n  };\n\n  // Safely create a real, live array from anything iterable.\n  _.toArray = function(obj) {\n    if (!obj) return [];\n    if (_.isArray(obj)) return slice.call(obj);\n    if (obj.length === +obj.length) return _.map(obj, _.identity);\n    return _.values(obj);\n  };\n\n  // Return the number of elements in an object.\n  _.size = function(obj) {\n    if (obj == null) return 0;\n    return (obj.length === +obj.length) ? obj.length : _.keys(obj).length;\n  };\n\n  // Array Functions\n  // ---------------\n\n  // Get the first element of an array. Passing **n** will return the first N\n  // values in the array. Aliased as `head` and `take`. The **guard** check\n  // allows it to work with `_.map`.\n  _.first = _.head = _.take = function(array, n, guard) {\n    if (array == null) return void 0;\n    if ((n == null) || guard) return array[0];\n    if (n < 0) return [];\n    return slice.call(array, 0, n);\n  };\n\n  // Returns everything but the last entry of the array. Especially useful on\n  // the arguments object. Passing **n** will return all the values in\n  // the array, excluding the last N. The **guard** check allows it to work with\n  // `_.map`.\n  _.initial = function(array, n, guard) {\n    return slice.call(array, 0, array.length - ((n == null) || guard ? 1 : n));\n  };\n\n  // Get the last element of an array. Passing **n** will return the last N\n  // values in the array. The **guard** check allows it to work with `_.map`.\n  _.last = function(array, n, guard) {\n    if (array == null) return void 0;\n    if ((n == null) || guard) return array[array.length - 1];\n    return slice.call(array, Math.max(array.length - n, 0));\n  };\n\n  // Returns everything but the first entry of the array. Aliased as `tail` and `drop`.\n  // Especially useful on the arguments object. Passing an **n** will return\n  // the rest N values in the array. The **guard**\n  // check allows it to work with `_.map`.\n  _.rest = _.tail = _.drop = function(array, n, guard) {\n    return slice.call(array, (n == null) || guard ? 1 : n);\n  };\n\n  // Trim out all falsy values from an array.\n  _.compact = function(array) {\n    return _.filter(array, _.identity);\n  };\n\n  // Internal implementation of a recursive `flatten` function.\n  var flatten = function(input, shallow, output) {\n    if (shallow && _.every(input, _.isArray)) {\n      return concat.apply(output, input);\n    }\n    each(input, function(value) {\n      if (_.isArray(value) || _.isArguments(value)) {\n        shallow ? push.apply(output, value) : flatten(value, shallow, output);\n      } else {\n        output.push(value);\n      }\n    });\n    return output;\n  };\n\n  // Flatten out an array, either recursively (by default), or just one level.\n  _.flatten = function(array, shallow) {\n    return flatten(array, shallow, []);\n  };\n\n  // Return a version of the array that does not contain the specified value(s).\n  _.without = function(array) {\n    return _.difference(array, slice.call(arguments, 1));\n  };\n\n  // Split an array into two arrays: one whose elements all satisfy the given\n  // predicate, and one whose elements all do not satisfy the predicate.\n  _.partition = function(array, predicate) {\n    var pass = [], fail = [];\n    each(array, function(elem) {\n      (predicate(elem) ? pass : fail).push(elem);\n    });\n    return [pass, fail];\n  };\n\n  // Produce a duplicate-free version of the array. If the array has already\n  // been sorted, you have the option of using a faster algorithm.\n  // Aliased as `unique`.\n  _.uniq = _.unique = function(array, isSorted, iterator, context) {\n    if (_.isFunction(isSorted)) {\n      context = iterator;\n      iterator = isSorted;\n      isSorted = false;\n    }\n    var initial = iterator ? _.map(array, iterator, context) : array;\n    var results = [];\n    var seen = [];\n    each(initial, function(value, index) {\n      if (isSorted ? (!index || seen[seen.length - 1] !== value) : !_.contains(seen, value)) {\n        seen.push(value);\n        results.push(array[index]);\n      }\n    });\n    return results;\n  };\n\n  // Produce an array that contains the union: each distinct element from all of\n  // the passed-in arrays.\n  _.union = function() {\n    return _.uniq(_.flatten(arguments, true));\n  };\n\n  // Produce an array that contains every item shared between all the\n  // passed-in arrays.\n  _.intersection = function(array) {\n    var rest = slice.call(arguments, 1);\n    return _.filter(_.uniq(array), function(item) {\n      return _.every(rest, function(other) {\n        return _.contains(other, item);\n      });\n    });\n  };\n\n  // Take the difference between one array and a number of other arrays.\n  // Only the elements present in just the first array will remain.\n  _.difference = function(array) {\n    var rest = concat.apply(ArrayProto, slice.call(arguments, 1));\n    return _.filter(array, function(value){ return !_.contains(rest, value); });\n  };\n\n  // Zip together multiple lists into a single array -- elements that share\n  // an index go together.\n  _.zip = function() {\n    var length = _.max(_.pluck(arguments, 'length').concat(0));\n    var results = new Array(length);\n    for (var i = 0; i < length; i++) {\n      results[i] = _.pluck(arguments, '' + i);\n    }\n    return results;\n  };\n\n  // Converts lists into objects. Pass either a single array of `[key, value]`\n  // pairs, or two parallel arrays of the same length -- one of keys, and one of\n  // the corresponding values.\n  _.object = function(list, values) {\n    if (list == null) return {};\n    var result = {};\n    for (var i = 0, length = list.length; i < length; i++) {\n      if (values) {\n        result[list[i]] = values[i];\n      } else {\n        result[list[i][0]] = list[i][1];\n      }\n    }\n    return result;\n  };\n\n  // If the browser doesn't supply us with indexOf (I'm looking at you, **MSIE**),\n  // we need this function. Return the position of the first occurrence of an\n  // item in an array, or -1 if the item is not included in the array.\n  // Delegates to **ECMAScript 5**'s native `indexOf` if available.\n  // If the array is large and already in sort order, pass `true`\n  // for **isSorted** to use binary search.\n  _.indexOf = function(array, item, isSorted) {\n    if (array == null) return -1;\n    var i = 0, length = array.length;\n    if (isSorted) {\n      if (typeof isSorted == 'number') {\n        i = (isSorted < 0 ? Math.max(0, length + isSorted) : isSorted);\n      } else {\n        i = _.sortedIndex(array, item);\n        return array[i] === item ? i : -1;\n      }\n    }\n    if (nativeIndexOf && array.indexOf === nativeIndexOf) return array.indexOf(item, isSorted);\n    for (; i < length; i++) if (array[i] === item) return i;\n    return -1;\n  };\n\n  // Delegates to **ECMAScript 5**'s native `lastIndexOf` if available.\n  _.lastIndexOf = function(array, item, from) {\n    if (array == null) return -1;\n    var hasIndex = from != null;\n    if (nativeLastIndexOf && array.lastIndexOf === nativeLastIndexOf) {\n      return hasIndex ? array.lastIndexOf(item, from) : array.lastIndexOf(item);\n    }\n    var i = (hasIndex ? from : array.length);\n    while (i--) if (array[i] === item) return i;\n    return -1;\n  };\n\n  // Generate an integer Array containing an arithmetic progression. A port of\n  // the native Python `range()` function. See\n  // [the Python documentation](http://docs.python.org/library/functions.html#range).\n  _.range = function(start, stop, step) {\n    if (arguments.length <= 1) {\n      stop = start || 0;\n      start = 0;\n    }\n    step = arguments[2] || 1;\n\n    var length = Math.max(Math.ceil((stop - start) / step), 0);\n    var idx = 0;\n    var range = new Array(length);\n\n    while(idx < length) {\n      range[idx++] = start;\n      start += step;\n    }\n\n    return range;\n  };\n\n  // Function (ahem) Functions\n  // ------------------\n\n  // Reusable constructor function for prototype setting.\n  var ctor = function(){};\n\n  // Create a function bound to a given object (assigning `this`, and arguments,\n  // optionally). Delegates to **ECMAScript 5**'s native `Function.bind` if\n  // available.\n  _.bind = function(func, context) {\n    var args, bound;\n    if (nativeBind && func.bind === nativeBind) return nativeBind.apply(func, slice.call(arguments, 1));\n    if (!_.isFunction(func)) throw new TypeError;\n    args = slice.call(arguments, 2);\n    return bound = function() {\n      if (!(this instanceof bound)) return func.apply(context, args.concat(slice.call(arguments)));\n      ctor.prototype = func.prototype;\n      var self = new ctor;\n      ctor.prototype = null;\n      var result = func.apply(self, args.concat(slice.call(arguments)));\n      if (Object(result) === result) return result;\n      return self;\n    };\n  };\n\n  // Partially apply a function by creating a version that has had some of its\n  // arguments pre-filled, without changing its dynamic `this` context. _ acts\n  // as a placeholder, allowing any combination of arguments to be pre-filled.\n  _.partial = function(func) {\n    var boundArgs = slice.call(arguments, 1);\n    return function() {\n      var position = 0;\n      var args = boundArgs.slice();\n      for (var i = 0, length = args.length; i < length; i++) {\n        if (args[i] === _) args[i] = arguments[position++];\n      }\n      while (position < arguments.length) args.push(arguments[position++]);\n      return func.apply(this, args);\n    };\n  };\n\n  // Bind a number of an object's methods to that object. Remaining arguments\n  // are the method names to be bound. Useful for ensuring that all callbacks\n  // defined on an object belong to it.\n  _.bindAll = function(obj) {\n    var funcs = slice.call(arguments, 1);\n    if (funcs.length === 0) throw new Error('bindAll must be passed function names');\n    each(funcs, function(f) { obj[f] = _.bind(obj[f], obj); });\n    return obj;\n  };\n\n  // Memoize an expensive function by storing its results.\n  _.memoize = function(func, hasher) {\n    var memo = {};\n    hasher || (hasher = _.identity);\n    return function() {\n      var key = hasher.apply(this, arguments);\n      return _.has(memo, key) ? memo[key] : (memo[key] = func.apply(this, arguments));\n    };\n  };\n\n  // Delays a function for the given number of milliseconds, and then calls\n  // it with the arguments supplied.\n  _.delay = function(func, wait) {\n    var args = slice.call(arguments, 2);\n    return setTimeout(function(){ return func.apply(null, args); }, wait);\n  };\n\n  // Defers a function, scheduling it to run after the current call stack has\n  // cleared.\n  _.defer = function(func) {\n    return _.delay.apply(_, [func, 1].concat(slice.call(arguments, 1)));\n  };\n\n  // Returns a function, that, when invoked, will only be triggered at most once\n  // during a given window of time. Normally, the throttled function will run\n  // as much as it can, without ever going more than once per `wait` duration;\n  // but if you'd like to disable the execution on the leading edge, pass\n  // `{leading: false}`. To disable execution on the trailing edge, ditto.\n  _.throttle = function(func, wait, options) {\n    var context, args, result;\n    var timeout = null;\n    var previous = 0;\n    options || (options = {});\n    var later = function() {\n      previous = options.leading === false ? 0 : _.now();\n      timeout = null;\n      result = func.apply(context, args);\n      context = args = null;\n    };\n    return function() {\n      var now = _.now();\n      if (!previous && options.leading === false) previous = now;\n      var remaining = wait - (now - previous);\n      context = this;\n      args = arguments;\n      if (remaining <= 0) {\n        clearTimeout(timeout);\n        timeout = null;\n        previous = now;\n        result = func.apply(context, args);\n        context = args = null;\n      } else if (!timeout && options.trailing !== false) {\n        timeout = setTimeout(later, remaining);\n      }\n      return result;\n    };\n  };\n\n  // Returns a function, that, as long as it continues to be invoked, will not\n  // be triggered. The function will be called after it stops being called for\n  // N milliseconds. If `immediate` is passed, trigger the function on the\n  // leading edge, instead of the trailing.\n  _.debounce = function(func, wait, immediate) {\n    var timeout, args, context, timestamp, result;\n\n    var later = function() {\n      var last = _.now() - timestamp;\n      if (last < wait) {\n        timeout = setTimeout(later, wait - last);\n      } else {\n        timeout = null;\n        if (!immediate) {\n          result = func.apply(context, args);\n          context = args = null;\n        }\n      }\n    };\n\n    return function() {\n      context = this;\n      args = arguments;\n      timestamp = _.now();\n      var callNow = immediate && !timeout;\n      if (!timeout) {\n        timeout = setTimeout(later, wait);\n      }\n      if (callNow) {\n        result = func.apply(context, args);\n        context = args = null;\n      }\n\n      return result;\n    };\n  };\n\n  // Returns a function that will be executed at most one time, no matter how\n  // often you call it. Useful for lazy initialization.\n  _.once = function(func) {\n    var ran = false, memo;\n    return function() {\n      if (ran) return memo;\n      ran = true;\n      memo = func.apply(this, arguments);\n      func = null;\n      return memo;\n    };\n  };\n\n  // Returns the first function passed as an argument to the second,\n  // allowing you to adjust arguments, run code before and after, and\n  // conditionally execute the original function.\n  _.wrap = function(func, wrapper) {\n    return _.partial(wrapper, func);\n  };\n\n  // Returns a function that is the composition of a list of functions, each\n  // consuming the return value of the function that follows.\n  _.compose = function() {\n    var funcs = arguments;\n    return function() {\n      var args = arguments;\n      for (var i = funcs.length - 1; i >= 0; i--) {\n        args = [funcs[i].apply(this, args)];\n      }\n      return args[0];\n    };\n  };\n\n  // Returns a function that will only be executed after being called N times.\n  _.after = function(times, func) {\n    return function() {\n      if (--times < 1) {\n        return func.apply(this, arguments);\n      }\n    };\n  };\n\n  // Object Functions\n  // ----------------\n\n  // Retrieve the names of an object's properties.\n  // Delegates to **ECMAScript 5**'s native `Object.keys`\n  _.keys = function(obj) {\n    if (!_.isObject(obj)) return [];\n    if (nativeKeys) return nativeKeys(obj);\n    var keys = [];\n    for (var key in obj) if (_.has(obj, key)) keys.push(key);\n    return keys;\n  };\n\n  // Retrieve the values of an object's properties.\n  _.values = function(obj) {\n    var keys = _.keys(obj);\n    var length = keys.length;\n    var values = new Array(length);\n    for (var i = 0; i < length; i++) {\n      values[i] = obj[keys[i]];\n    }\n    return values;\n  };\n\n  // Convert an object into a list of `[key, value]` pairs.\n  _.pairs = function(obj) {\n    var keys = _.keys(obj);\n    var length = keys.length;\n    var pairs = new Array(length);\n    for (var i = 0; i < length; i++) {\n      pairs[i] = [keys[i], obj[keys[i]]];\n    }\n    return pairs;\n  };\n\n  // Invert the keys and values of an object. The values must be serializable.\n  _.invert = function(obj) {\n    var result = {};\n    var keys = _.keys(obj);\n    for (var i = 0, length = keys.length; i < length; i++) {\n      result[obj[keys[i]]] = keys[i];\n    }\n    return result;\n  };\n\n  // Return a sorted list of the function names available on the object.\n  // Aliased as `methods`\n  _.functions = _.methods = function(obj) {\n    var names = [];\n    for (var key in obj) {\n      if (_.isFunction(obj[key])) names.push(key);\n    }\n    return names.sort();\n  };\n\n  // Extend a given object with all the properties in passed-in object(s).\n  _.extend = function(obj) {\n    each(slice.call(arguments, 1), function(source) {\n      if (source) {\n        for (var prop in source) {\n          obj[prop] = source[prop];\n        }\n      }\n    });\n    return obj;\n  };\n\n  // Return a copy of the object only containing the whitelisted properties.\n  _.pick = function(obj) {\n    var copy = {};\n    var keys = concat.apply(ArrayProto, slice.call(arguments, 1));\n    each(keys, function(key) {\n      if (key in obj) copy[key] = obj[key];\n    });\n    return copy;\n  };\n\n   // Return a copy of the object without the blacklisted properties.\n  _.omit = function(obj) {\n    var copy = {};\n    var keys = concat.apply(ArrayProto, slice.call(arguments, 1));\n    for (var key in obj) {\n      if (!_.contains(keys, key)) copy[key] = obj[key];\n    }\n    return copy;\n  };\n\n  // Fill in a given object with default properties.\n  _.defaults = function(obj) {\n    each(slice.call(arguments, 1), function(source) {\n      if (source) {\n        for (var prop in source) {\n          if (obj[prop] === void 0) obj[prop] = source[prop];\n        }\n      }\n    });\n    return obj;\n  };\n\n  // Create a (shallow-cloned) duplicate of an object.\n  _.clone = function(obj) {\n    if (!_.isObject(obj)) return obj;\n    return _.isArray(obj) ? obj.slice() : _.extend({}, obj);\n  };\n\n  // Invokes interceptor with the obj, and then returns obj.\n  // The primary purpose of this method is to \"tap into\" a method chain, in\n  // order to perform operations on intermediate results within the chain.\n  _.tap = function(obj, interceptor) {\n    interceptor(obj);\n    return obj;\n  };\n\n  // Internal recursive comparison function for `isEqual`.\n  var eq = function(a, b, aStack, bStack) {\n    // Identical objects are equal. `0 === -0`, but they aren't identical.\n    // See the [Harmony `egal` proposal](http://wiki.ecmascript.org/doku.php?id=harmony:egal).\n    if (a === b) return a !== 0 || 1 / a == 1 / b;\n    // A strict comparison is necessary because `null == undefined`.\n    if (a == null || b == null) return a === b;\n    // Unwrap any wrapped objects.\n    if (a instanceof _) a = a._wrapped;\n    if (b instanceof _) b = b._wrapped;\n    // Compare `[[Class]]` names.\n    var className = toString.call(a);\n    if (className != toString.call(b)) return false;\n    switch (className) {\n      // Strings, numbers, dates, and booleans are compared by value.\n      case '[object String]':\n        // Primitives and their corresponding object wrappers are equivalent; thus, `\"5\"` is\n        // equivalent to `new String(\"5\")`.\n        return a == String(b);\n      case '[object Number]':\n        // `NaN`s are equivalent, but non-reflexive. An `egal` comparison is performed for\n        // other numeric values.\n        return a != +a ? b != +b : (a == 0 ? 1 / a == 1 / b : a == +b);\n      case '[object Date]':\n      case '[object Boolean]':\n        // Coerce dates and booleans to numeric primitive values. Dates are compared by their\n        // millisecond representations. Note that invalid dates with millisecond representations\n        // of `NaN` are not equivalent.\n        return +a == +b;\n      // RegExps are compared by their source patterns and flags.\n      case '[object RegExp]':\n        return a.source == b.source &&\n               a.global == b.global &&\n               a.multiline == b.multiline &&\n               a.ignoreCase == b.ignoreCase;\n    }\n    if (typeof a != 'object' || typeof b != 'object') return false;\n    // Assume equality for cyclic structures. The algorithm for detecting cyclic\n    // structures is adapted from ES 5.1 section 15.12.3, abstract operation `JO`.\n    var length = aStack.length;\n    while (length--) {\n      // Linear search. Performance is inversely proportional to the number of\n      // unique nested structures.\n      if (aStack[length] == a) return bStack[length] == b;\n    }\n    // Objects with different constructors are not equivalent, but `Object`s\n    // from different frames are.\n    var aCtor = a.constructor, bCtor = b.constructor;\n    if (aCtor !== bCtor && !(_.isFunction(aCtor) && (aCtor instanceof aCtor) &&\n                             _.isFunction(bCtor) && (bCtor instanceof bCtor))\n                        && ('constructor' in a && 'constructor' in b)) {\n      return false;\n    }\n    // Add the first object to the stack of traversed objects.\n    aStack.push(a);\n    bStack.push(b);\n    var size = 0, result = true;\n    // Recursively compare objects and arrays.\n    if (className == '[object Array]') {\n      // Compare array lengths to determine if a deep comparison is necessary.\n      size = a.length;\n      result = size == b.length;\n      if (result) {\n        // Deep compare the contents, ignoring non-numeric properties.\n        while (size--) {\n          if (!(result = eq(a[size], b[size], aStack, bStack))) break;\n        }\n      }\n    } else {\n      // Deep compare objects.\n      for (var key in a) {\n        if (_.has(a, key)) {\n          // Count the expected number of properties.\n          size++;\n          // Deep compare each member.\n          if (!(result = _.has(b, key) && eq(a[key], b[key], aStack, bStack))) break;\n        }\n      }\n      // Ensure that both objects contain the same number of properties.\n      if (result) {\n        for (key in b) {\n          if (_.has(b, key) && !(size--)) break;\n        }\n        result = !size;\n      }\n    }\n    // Remove the first object from the stack of traversed objects.\n    aStack.pop();\n    bStack.pop();\n    return result;\n  };\n\n  // Perform a deep comparison to check if two objects are equal.\n  _.isEqual = function(a, b) {\n    return eq(a, b, [], []);\n  };\n\n  // Is a given array, string, or object empty?\n  // An \"empty\" object has no enumerable own-properties.\n  _.isEmpty = function(obj) {\n    if (obj == null) return true;\n    if (_.isArray(obj) || _.isString(obj)) return obj.length === 0;\n    for (var key in obj) if (_.has(obj, key)) return false;\n    return true;\n  };\n\n  // Is a given value a DOM element?\n  _.isElement = function(obj) {\n    return !!(obj && obj.nodeType === 1);\n  };\n\n  // Is a given value an array?\n  // Delegates to ECMA5's native Array.isArray\n  _.isArray = nativeIsArray || function(obj) {\n    return toString.call(obj) == '[object Array]';\n  };\n\n  // Is a given variable an object?\n  _.isObject = function(obj) {\n    return obj === Object(obj);\n  };\n\n  // Add some isType methods: isArguments, isFunction, isString, isNumber, isDate, isRegExp.\n  each(['Arguments', 'Function', 'String', 'Number', 'Date', 'RegExp'], function(name) {\n    _['is' + name] = function(obj) {\n      return toString.call(obj) == '[object ' + name + ']';\n    };\n  });\n\n  // Define a fallback version of the method in browsers (ahem, IE), where\n  // there isn't any inspectable \"Arguments\" type.\n  if (!_.isArguments(arguments)) {\n    _.isArguments = function(obj) {\n      return !!(obj && _.has(obj, 'callee'));\n    };\n  }\n\n  // Optimize `isFunction` if appropriate.\n  if (typeof (/./) !== 'function') {\n    _.isFunction = function(obj) {\n      return typeof obj === 'function';\n    };\n  }\n\n  // Is a given object a finite number?\n  _.isFinite = function(obj) {\n    return isFinite(obj) && !isNaN(parseFloat(obj));\n  };\n\n  // Is the given value `NaN`? (NaN is the only number which does not equal itself).\n  _.isNaN = function(obj) {\n    return _.isNumber(obj) && obj != +obj;\n  };\n\n  // Is a given value a boolean?\n  _.isBoolean = function(obj) {\n    return obj === true || obj === false || toString.call(obj) == '[object Boolean]';\n  };\n\n  // Is a given value equal to null?\n  _.isNull = function(obj) {\n    return obj === null;\n  };\n\n  // Is a given variable undefined?\n  _.isUndefined = function(obj) {\n    return obj === void 0;\n  };\n\n  // Shortcut function for checking if an object has a given property directly\n  // on itself (in other words, not on a prototype).\n  _.has = function(obj, key) {\n    return hasOwnProperty.call(obj, key);\n  };\n\n  // Utility Functions\n  // -----------------\n\n  // Run Underscore.js in *noConflict* mode, returning the `_` variable to its\n  // previous owner. Returns a reference to the Underscore object.\n  _.noConflict = function() {\n    root._ = previousUnderscore;\n    return this;\n  };\n\n  // Keep the identity function around for default iterators.\n  _.identity = function(value) {\n    return value;\n  };\n\n  _.constant = function(value) {\n    return function () {\n      return value;\n    };\n  };\n\n  _.property = function(key) {\n    return function(obj) {\n      return obj[key];\n    };\n  };\n\n  // Returns a predicate for checking whether an object has a given set of `key:value` pairs.\n  _.matches = function(attrs) {\n    return function(obj) {\n      if (obj === attrs) return true; //avoid comparing an object to itself.\n      for (var key in attrs) {\n        if (attrs[key] !== obj[key])\n          return false;\n      }\n      return true;\n    }\n  };\n\n  // Run a function **n** times.\n  _.times = function(n, iterator, context) {\n    var accum = Array(Math.max(0, n));\n    for (var i = 0; i < n; i++) accum[i] = iterator.call(context, i);\n    return accum;\n  };\n\n  // Return a random integer between min and max (inclusive).\n  _.random = function(min, max) {\n    if (max == null) {\n      max = min;\n      min = 0;\n    }\n    return min + Math.floor(Math.random() * (max - min + 1));\n  };\n\n  // A (possibly faster) way to get the current timestamp as an integer.\n  _.now = Date.now || function() { return new Date().getTime(); };\n\n  // List of HTML entities for escaping.\n  var entityMap = {\n    escape: {\n      '&': '&amp;',\n      '<': '&lt;',\n      '>': '&gt;',\n      '\"': '&quot;',\n      \"'\": '&#x27;'\n    }\n  };\n  entityMap.unescape = _.invert(entityMap.escape);\n\n  // Regexes containing the keys and values listed immediately above.\n  var entityRegexes = {\n    escape:   new RegExp('[' + _.keys(entityMap.escape).join('') + ']', 'g'),\n    unescape: new RegExp('(' + _.keys(entityMap.unescape).join('|') + ')', 'g')\n  };\n\n  // Functions for escaping and unescaping strings to/from HTML interpolation.\n  _.each(['escape', 'unescape'], function(method) {\n    _[method] = function(string) {\n      if (string == null) return '';\n      return ('' + string).replace(entityRegexes[method], function(match) {\n        return entityMap[method][match];\n      });\n    };\n  });\n\n  // If the value of the named `property` is a function then invoke it with the\n  // `object` as context; otherwise, return it.\n  _.result = function(object, property) {\n    if (object == null) return void 0;\n    var value = object[property];\n    return _.isFunction(value) ? value.call(object) : value;\n  };\n\n  // Add your own custom functions to the Underscore object.\n  _.mixin = function(obj) {\n    each(_.functions(obj), function(name) {\n      var func = _[name] = obj[name];\n      _.prototype[name] = function() {\n        var args = [this._wrapped];\n        push.apply(args, arguments);\n        return result.call(this, func.apply(_, args));\n      };\n    });\n  };\n\n  // Generate a unique integer id (unique within the entire client session).\n  // Useful for temporary DOM ids.\n  var idCounter = 0;\n  _.uniqueId = function(prefix) {\n    var id = ++idCounter + '';\n    return prefix ? prefix + id : id;\n  };\n\n  // By default, Underscore uses ERB-style template delimiters, change the\n  // following template settings to use alternative delimiters.\n  _.templateSettings = {\n    evaluate    : /<%([\\s\\S]+?)%>/g,\n    interpolate : /<%=([\\s\\S]+?)%>/g,\n    escape      : /<%-([\\s\\S]+?)%>/g\n  };\n\n  // When customizing `templateSettings`, if you don't want to define an\n  // interpolation, evaluation or escaping regex, we need one that is\n  // guaranteed not to match.\n  var noMatch = /(.)^/;\n\n  // Certain characters need to be escaped so that they can be put into a\n  // string literal.\n  var escapes = {\n    \"'\":      \"'\",\n    '\\\\':     '\\\\',\n    '\\r':     'r',\n    '\\n':     'n',\n    '\\t':     't',\n    '\\u2028': 'u2028',\n    '\\u2029': 'u2029'\n  };\n\n  var escaper = /\\\\|'|\\r|\\n|\\t|\\u2028|\\u2029/g;\n\n  // JavaScript micro-templating, similar to John Resig's implementation.\n  // Underscore templating handles arbitrary delimiters, preserves whitespace,\n  // and correctly escapes quotes within interpolated code.\n  _.template = function(text, data, settings) {\n    var render;\n    settings = _.defaults({}, settings, _.templateSettings);\n\n    // Combine delimiters into one regular expression via alternation.\n    var matcher = new RegExp([\n      (settings.escape || noMatch).source,\n      (settings.interpolate || noMatch).source,\n      (settings.evaluate || noMatch).source\n    ].join('|') + '|$', 'g');\n\n    // Compile the template source, escaping string literals appropriately.\n    var index = 0;\n    var source = \"__p+='\";\n    text.replace(matcher, function(match, escape, interpolate, evaluate, offset) {\n      source += text.slice(index, offset)\n        .replace(escaper, function(match) { return '\\\\' + escapes[match]; });\n\n      if (escape) {\n        source += \"'+\\n((__t=(\" + escape + \"))==null?'':_.escape(__t))+\\n'\";\n      }\n      if (interpolate) {\n        source += \"'+\\n((__t=(\" + interpolate + \"))==null?'':__t)+\\n'\";\n      }\n      if (evaluate) {\n        source += \"';\\n\" + evaluate + \"\\n__p+='\";\n      }\n      index = offset + match.length;\n      return match;\n    });\n    source += \"';\\n\";\n\n    // If a variable is not specified, place data values in local scope.\n    if (!settings.variable) source = 'with(obj||{}){\\n' + source + '}\\n';\n\n    source = \"var __t,__p='',__j=Array.prototype.join,\" +\n      \"print=function(){__p+=__j.call(arguments,'');};\\n\" +\n      source + \"return __p;\\n\";\n\n    try {\n      render = new Function(settings.variable || 'obj', '_', source);\n    } catch (e) {\n      e.source = source;\n      throw e;\n    }\n\n    if (data) return render(data, _);\n    var template = function(data) {\n      return render.call(this, data, _);\n    };\n\n    // Provide the compiled function source as a convenience for precompilation.\n    template.source = 'function(' + (settings.variable || 'obj') + '){\\n' + source + '}';\n\n    return template;\n  };\n\n  // Add a \"chain\" function, which will delegate to the wrapper.\n  _.chain = function(obj) {\n    return _(obj).chain();\n  };\n\n  // OOP\n  // ---------------\n  // If Underscore is called as a function, it returns a wrapped object that\n  // can be used OO-style. This wrapper holds altered versions of all the\n  // underscore functions. Wrapped objects may be chained.\n\n  // Helper function to continue chaining intermediate results.\n  var result = function(obj) {\n    return this._chain ? _(obj).chain() : obj;\n  };\n\n  // Add all of the Underscore functions to the wrapper object.\n  _.mixin(_);\n\n  // Add all mutator Array functions to the wrapper.\n  each(['pop', 'push', 'reverse', 'shift', 'sort', 'splice', 'unshift'], function(name) {\n    var method = ArrayProto[name];\n    _.prototype[name] = function() {\n      var obj = this._wrapped;\n      method.apply(obj, arguments);\n      if ((name == 'shift' || name == 'splice') && obj.length === 0) delete obj[0];\n      return result.call(this, obj);\n    };\n  });\n\n  // Add all accessor Array functions to the wrapper.\n  each(['concat', 'join', 'slice'], function(name) {\n    var method = ArrayProto[name];\n    _.prototype[name] = function() {\n      return result.call(this, method.apply(this._wrapped, arguments));\n    };\n  });\n\n  _.extend(_.prototype, {\n\n    // Start chaining a wrapped Underscore object.\n    chain: function() {\n      this._chain = true;\n      return this;\n    },\n\n    // Extracts the result from a wrapped and chained object.\n    value: function() {\n      return this._wrapped;\n    }\n\n  });\n\n  // AMD registration happens at the end for compatibility with AMD loaders\n  // that may not enforce next-turn semantics on modules. Even though general\n  // practice for AMD registration is to be anonymous, underscore registers\n  // as a named module because, like jQuery, it is a base library that is\n  // popular enough to be bundled in a third party lib, but not be part of\n  // an AMD load request. Those cases could generate an error when an\n  // anonymous define() is called outside of a loader request.\n  if (typeof define === 'function' && define.amd) {\n    define('underscore', [], function() {\n      return _;\n    });\n  }\n}).call(this);","/home/travis/build/npmtest/node-npmtest-alloy/node_modules/alloy/platforms/android/index.js":"module.exports = new (require('../base.js'))({\n\tplatform: 'android'\n});","/home/travis/build/npmtest/node-npmtest-alloy/node_modules/alloy/platforms/base.js":"var _ = require('../Alloy/lib/alloy/underscore')._,\n\tU = require('../Alloy/utils');\n\nmodule.exports = function(def) {\n\tif (!def.platform) {\n\t\tU.die([\n\t\t\t'platform undefined',\n\t\t\tnew Error().stack\n\t\t]);\n\t}\n\n\t_.extend(this, _.defaults(def, {\n\t\talloyFolder: def.platform,\n\t\ttitaniumFolder: def.platform,\n\t\tname: def.platform,\n\t\tosname: def.platform,\n\t\tcondition: {}\n\t}));\n\n\tthis.condition = {\n\t\tcompile: def.condition.compile || 'OS_' + this.platform.toUpperCase(),\n\t\truntime: def.condition.runtime || runtimeCondition(this.osname, this.name)\n\t};\n};\n\nfunction runtimeCondition(osname, name) {\n\tvar output, map;\n\tosname = osname || [];\n\tname = name || [];\n\n\tif (!osname && !name) {\n\t\treturn 'true';\n\t} else if (_.isString(name)) {\n\t\treturn \"Ti.Platform.name === '\" + name + \"'\";\n\t} else if (_.isString(osname)) {\n\t\treturn \"Ti.Platform.osname === '\" + osname + \"'\";\n\t} else {\n\t\tif (_.isArray(name)) {\n\t\t\tmap = _.map(name, function(n) { return \"Ti.Platform.name === '\" + n + \"'\"; });\n\t\t}\n\t\tif (_.isArray(osname) && (!map || osname.length < name.length)) {\n\t\t\tmap = _.map(osname, function(n) { return \"Ti.Platform.osname === '\" + n + \"'\"; });\n\t\t}\n\t\tif (!map) { return 'true'; }\n\t}\n\n\treturn map.join('||');\n}\n","/home/travis/build/npmtest/node-npmtest-alloy/node_modules/alloy/platforms/ios/index.js":"module.exports = new (require('../base.js'))({\n\tplatform: 'ios',\n\ttitaniumFolder: 'iphone',\n\tname: 'iPhone OS',\n\tosname: ['ipad', 'iphone']\n});","/home/travis/build/npmtest/node-npmtest-alloy/node_modules/alloy/platforms/mobileweb/index.js":"module.exports = new (require('../base.js'))({\n\tplatform: 'mobileweb'\n});","/home/travis/build/npmtest/node-npmtest-alloy/node_modules/alloy/platforms/windows/index.js":"module.exports = new (require('../base.js'))({\n\tplatform: 'windows',\n\talloyFolder: 'windows',\n\ttitaniumFolder: 'windows',\n\tname: 'Windows Phone',\n\tosname: 'windows'\n});","/home/travis/build/npmtest/node-npmtest-alloy/node_modules/alloy/Alloy/commands/compile/sourceMapper.js":"/*\n\tSets options and wraps some functionality around the source mapping functions\n\tprovided by the UglifyJS library\n*/\nvar SM = require('source-map'),\n\tfs = require('fs'),\n\tpath = require('path'),\n\twrench = require('wrench'),\n\tU = require('../../utils'),\n\tCONST = require('../../common/constants'),\n\tuglifyjs = require('uglify-js'),\n\tlogger = require('../../logger'),\n\t_ = require('../../lib/alloy/underscore')._;\n\nvar lineSplitter = /(?:\\r\\n|\\r|\\n)/,\n\tmods = [\n\t\t'builtins',\n\t\t'optimizer',\n\t\t'compress'\n\t],\n\tmodLocation = './ast/';\n\nexports.OPTIONS_OUTPUT = {\n\tindent_start  : 0,     // start indentation on every line (only when `beautify`)\n\tindent_level  : 4,     // indentation level (only when `beautify`)\n\tquote_keys    : false, // quote all keys in object literals?\n\tspace_colon   : true,  // add a space after colon signs?\n\tascii_only    : false, // output ASCII-safe? (encodes Unicode characters as ASCII)\n\tinline_script : false, // escape \"</script\"?\n\twidth         : 80,    // informative maximum line width (for beautified output)\n\tmax_line_len  : 32000, // maximum line length (for non-beautified output)\n\tbeautify      : true, // beautify output?\n\tbracketize    : false, // use brackets every time?\n\tcomments      : false, // output comments?\n\tsemicolons    : true  // use semicolons to separate statements?\n};\n\nfunction mapLine(mapper, theMap, genMap, line) {\n\tmapper.addMapping({\n\t\toriginal: {\n\t\t\tline: theMap.count++,\n\t\t\tcolumn: 0\n\t\t},\n\t\tgenerated: {\n\t\t\tline: genMap.count++,\n\t\t\tcolumn: 0\n\t\t},\n\t\tsource: theMap.filename\n\t});\n\tgenMap.code += line + '\\n';\n}\n\nfunction getTextFromGenerator(content, template) {\n\tif (typeof content !== 'undefined' && content !== null) {\n\t\treturn content;\n\t} else {\n\t\tif (template && fs.existsSync(template)) {\n\t\t\treturn fs.readFileSync(template, 'utf8');\n\t\t} else {\n\t\t\treturn '';\n\t\t}\n\t}\n}\n\nexports.generateCodeAndSourceMap = function(generator, compileConfig) {\n\tvar target = generator.target;\n\tvar data = generator.data;\n\tvar markers = _.map(data, function(v, k) { return k; });\n\tvar mapper = new SM.SourceMapGenerator({ file: target.filename });\n\tvar genMap = {\n\t\tfile: target.filename,\n\t\tcount: 1,\n\t\tcode: ''\n\t};\n\n\t// initialize the rest of the generator properties\n\ttarget.count = 1;\n\ttarget.lines = getTextFromGenerator(target.templateContent, target.template).split(lineSplitter);\n\t_.each(markers, function(m) {\n\t\tvar marker = data[m];\n\t\tmarker.count = 1;\n\t\tmarker.lines = getTextFromGenerator(marker.fileContent, marker.filepath).split(lineSplitter);\n\t});\n\n\t// generate the source map and composite code\n\t_.each(target.lines, function(line) {\n\t\tvar trimmed = U.trim(line);\n\t\tif (_.contains(markers, trimmed)) {\n\t\t\t_.each(data[trimmed].lines, function(line) {\n\t\t\t\tmapLine(mapper, data[trimmed], genMap, line);\n\t\t\t});\n\t\t} else {\n\t\t\tmapLine(mapper, target, genMap, line);\n\t\t}\n\t});\n\n\t// parse composite code into an AST\n\tvar ast;\n\ttry {\n\t\tast = uglifyjs.parse(genMap.code, { filename: genMap.file });\n\t} catch (e) {\n\t\tlogger.trace(genMap.code);\n\t\tthrow e;\n\t}\n\n\t// process all AST operations\n\t_.each(mods, function(mod) {\n\t\tlogger.trace('- Processing \"' + mod + '\" module...');\n\t\tast.figure_out_scope();\n\t\tast = require(modLocation + mod).process(ast, compileConfig) || ast;\n\t});\n\n\t// create uglify-js source map and stream it out\n\tvar stream, sourceMap;\n\tif (compileConfig.sourcemap) {\n\t\tsourceMap = uglifyjs.SourceMap({\n\t\t\tfile: target.filename,\n\t\t\torig: mapper.toString()\n\t\t});\n\t\tstream = uglifyjs.OutputStream(_.extend(_.clone(exports.OPTIONS_OUTPUT), {\n\t\t\tsource_map: sourceMap\n\t\t}));\n\t} else {\n\t\tstream = uglifyjs.OutputStream(exports.OPTIONS_OUTPUT);\n\t}\n\tast.print(stream);\n\n\t// write the generated controller code\n\tvar outfile = target.filepath;\n\tvar relativeOutfile = path.relative(compileConfig.dir.project, outfile);\n\twrench.mkdirSyncRecursive(path.dirname(outfile), 0755);\n\tfs.writeFileSync(outfile, stream.toString());\n\tlogger.info('  created:    \"' + relativeOutfile + '\"');\n\n\t// write source map for the generated file\n\tif (compileConfig.sourcemap !== false) {\n\t\tvar mapDir = path.join(compileConfig.dir.project, CONST.DIR.MAP);\n\t\toutfile = path.join(mapDir, relativeOutfile) + '.' + CONST.FILE_EXT.MAP;\n\t\trelativeOutfile = path.relative(compileConfig.dir.project, outfile);\n\t\twrench.mkdirSyncRecursive(path.dirname(outfile), 0755);\n\t\tfs.writeFileSync(outfile, sourceMap.toString());\n\t\tlogger.debug('  map:        \"' + relativeOutfile + '\"');\n\t}\n};\n\nexports.generateSourceMap = function(generator, compileConfig) {\n\tif (!fs.existsSync(generator.target.filename) || fs.statSync(generator.target.filename).isDirectory()) {\n\t\treturn;\n\t}\n\tvar target = generator.target;\n\tvar data = generator.data;\n\tvar markers = _.map(data, function(v, k) { return k; });\n\tvar mapper = new SM.SourceMapGenerator({ file: target.filename });\n\tvar genMap = {\n\t\tfile: target.filename,\n\t\tcount: 1,\n\t\tcode: ''\n\t};\n\n\t// initialize the rest of the generator properties\n\ttarget.count = 1;\n\ttarget.lines = getTextFromGenerator(target.templateContent, target.template).split(lineSplitter);\n\t_.each(markers, function(m) {\n\t\tvar marker = data[m];\n\t\tmarker.count = 1;\n\t\tmarker.lines = getTextFromGenerator(marker.fileContent, marker.filename).split(lineSplitter);\n\t});\n\n\t// generate the source map and composite code\n\t_.each(target.lines, function(line) {\n\t\tvar trimmed = U.trim(line);\n\t\tif (_.contains(markers, trimmed)) {\n\t\t\t_.each(data[trimmed].lines, function(line) {\n\t\t\t\tmapLine(mapper, data[trimmed], genMap, line);\n\t\t\t});\n\t\t} else {\n\t\t\tmapLine(mapper, target, genMap, line);\n\t\t}\n\t});\n\n\t// parse composite code into an AST\n\tvar ast;\n\ttry {\n\t\tast = uglifyjs.parse(genMap.code, { filename: genMap.file });\n\t} catch (e) {\n\t\tlogger.trace(genMap.code);\n\t\tthrow e;\n\t}\n\n\t// process all AST operations\n\t_.each(mods, function(mod) {\n\t\tlogger.trace('- Processing \"' + mod + '\" module...');\n\t\tast.figure_out_scope();\n\t\tast = require(modLocation + mod).process(ast, compileConfig) || ast;\n\t});\n\n\t// create uglify-js source map and stream it out\n\tvar origFileName = path.relative(compileConfig.dir.project, generator.origFile.filename),\n\t\tcompiledFileName = path.join('Resources', path.basename(generator.origFile.filename));\n\tvar sourceMap = uglifyjs.SourceMap({\n\t\tfile: compiledFileName,\n\t\torig: mapper.toString()\n\t});\n\tvar stream = uglifyjs.OutputStream(_.extend(_.clone(exports.OPTIONS_OUTPUT), {\n\t\tsource_map: sourceMap\n\t}));\n\tast.print(stream);\n\n\t// write source map for the generated file\n\tvar relativeOutfile = path.relative(compileConfig.dir.project, target.filepath);\n\tvar mapDir = path.join(compileConfig.dir.project, CONST.DIR.MAP);\n\tvar outfile = path.join(mapDir, relativeOutfile, path.basename(target.filename)) + '.' + CONST.FILE_EXT.MAP;\n\twrench.mkdirSyncRecursive(path.dirname(outfile), 0755);\n\tvar tmp = JSON.parse(sourceMap.toString());\n\ttmp.sources[0] = compiledFileName;\n\ttmp.sources[1] = origFileName;\n\tfs.writeFileSync(outfile, JSON.stringify(tmp));\n\tlogger.debug('  map:        \"' + outfile + '\"');\n};\n","/home/travis/build/npmtest/node-npmtest-alloy/node_modules/alloy/bin/alloy":"#!/usr/bin/env node\n\nrequire('../Alloy/alloy');\n","/home/travis/build/npmtest/node-npmtest-alloy/node_modules/alloy/.eslintrc.js":"var OFF = 0;\nvar WARNING = 1;\nvar ERROR = 2;\n\nmodule.exports = {\n\tenv: {\n\t\t'node': true\n\t},\n\n\textends: 'eslint:recommended',\n\n\trules: {\n\t\t'brace-style': [ERROR, '1tbs', {'allowSingleLine': true}],\n\t\t'comma-spacing': [ERROR, {'before': false, 'after': true}],\n\t\t'indent': [ERROR, 'tab', {'SwitchCase': 1, 'FunctionExpression': {'body': 1}}],\n\t\t'keyword-spacing': ERROR,\n\t\t'linebreak-style': [ERROR, 'unix'],\n\t\t'no-cond-assign': OFF,\n\t\t'no-console': OFF,\n\t\t'no-control-regex': OFF,\n\t\t'no-fallthrough': OFF,\n\t\t'no-unused-vars': OFF,\n\t\t'no-undef': OFF,\n\t\t'no-octal': OFF,\n\t\t'quotes': [ERROR, 'single', {'avoidEscape': true, allowTemplateLiterals: true}],\n\t\t'space-before-blocks': [ERROR, 'always'],\n\t\t'space-infix-ops': [ERROR, {'int32Hint': false}],\n\t\t'semi': [ERROR, 'always'],\n\t\t'valid-typeof': OFF\n\t}\n};","/home/travis/build/npmtest/node-npmtest-alloy/node_modules/alloy/hooks/alloy.js":"/**\n * Alloy\n * Copyright (c) 2012 by Appcelerator, Inc. All Rights Reserved.\n * See LICENSE for more information on licensing.\n */\n\nexports.cliVersion = '>=3.X';\nexports.version = '1.0.0';\nvar SILENT = true;\n\nexports.init = function (logger, config, cli, appc) {\n\tvar path = require('path'),\n\t\tfs = require('fs'),\n\t\tafs = appc.fs,\n\t\ti18n = appc.i18n(__dirname),\n\t\t__ = i18n.__,\n\t\t__n = i18n.__n,\n\t\tpkginfo = appc.pkginfo.package(module),\n\t\texec = require('child_process').exec,\n\t\tspawn = require('child_process').spawn,\n\t\tparallel = appc.async.parallel;\n\n\tif (!process.env.sdk) {\n\t\tprocess.env.sdk = cli.sdk.name;\n\t}\n\n\tfunction run(deviceFamily, deployType, target, finished, silent) {\n\t\tvar appDir = path.join(cli.argv['project-dir'], 'app');\n\t\tif (!afs.exists(appDir)) {\n\t\t\tlogger.info(__('Project not an Alloy app, continuing'));\n\t\t\tfinished();\n\t\t\treturn;\n\t\t}\n\t\tlogger.info(__('Found Alloy app in %s', appDir.cyan));\n\n\t\t// TODO: Make this check specific to a TiSDK version\n\t\t// create a .alloynewcli file to tell old plugins not to run\n\t\tvar buildDir = path.join(cli.argv['project-dir'], 'build');\n\t\tif (!afs.exists(buildDir)) {\n\t\t\tfs.mkdirSync(buildDir);\n\t\t}\n\t\tfs.writeFileSync(path.join(buildDir, '.alloynewcli'), '');\n\n\t\tvar cRequire = afs.resolvePath(__dirname, '..', 'Alloy', 'commands', 'compile', 'index.js'),\n\t\t\tconfig = {\n\t\t\t\tplatform: /(?:iphone|ipad)/.test(cli.argv.platform) ? 'ios' : cli.argv.platform,\n\t\t\t\tversion: '0',\n\t\t\t\tsimtype: 'none',\n\t\t\t\tdevicefamily: /(?:iphone|ios)/.test(cli.argv.platform) ? deviceFamily : 'none',\n\t\t\t\tdeploytype: deployType || cli.argv['deploy-type'] || 'development',\n\t\t\t\ttarget: target\n\t\t\t};\n\t\tif (silent) {\n\t\t\t// turn off all logging output for code analyzer build hook\n\t\t\tconfig.noBanner = 'true';\n\t\t\tconfig.logLevel = '-1';\n\t\t}\n\n\t\tconfig = Object.keys(config).map(function (c) {\n\t\t\treturn c + '=' + config[c];\n\t\t}).join(',');\n\n\t\tif (afs.exists(cRequire)) {\n\t\t\t// we're being invoked from the actual alloy directory!\n\t\t\t// no need to subprocess, just require() and run\n\t\t\tvar origLimit = Error.stackTraceLimit;\n\t\t\tError.stackTraceLimit = Infinity;\n\t\t\ttry {\n\t\t\t\trequire(cRequire)({}, {\n\t\t\t\t\tconfig: config,\n\t\t\t\t\toutputPath: cli.argv['project-dir'],\n\t\t\t\t\t_version: pkginfo.version\n\t\t\t\t});\n\t\t\t} catch (e) {\n\t\t\t\tlogger.error(__('Alloy compiler failed'));\n\t\t\t\te.toString().split('\\n').forEach(function (line) {\n\t\t\t\t\tif (line) { logger.error(line); }\n\t\t\t\t});\n\t\t\t\tprocess.exit(1);\n\t\t\t}\n\t\t\tError.stackTraceLimit = origLimit;\n\t\t\tfinished();\n\t\t} else {\n\t\t\t// we have no clue where alloy is installed, so we're going to subprocess\n\t\t\t// alloy and hope it's in the system path or a well known place\n\t\t\tvar paths = {};\n\t\t\tvar locatorCmd = process.platform === 'win32' ? 'where' : 'which';\n\t\t\tparallel(this, ['alloy', 'node'].map(function (bin) {\n\t\t\t\treturn function (done) {\n\t\t\t\t\tvar envName = 'ALLOY_' + (bin === 'node' ? 'NODE_' : '') + 'PATH';\n\n\t\t\t\t\tpaths[bin] = process.env[envName];\n\t\t\t\t\tif (paths[bin]) {\n\t\t\t\t\t\tdone();\n\t\t\t\t\t} else if (process.platform === 'win32' && bin === 'alloy') {\n\t\t\t\t\t\tpaths.alloy = 'alloy.cmd';\n\t\t\t\t\t\tdone();\n\t\t\t\t\t} else {\n\t\t\t\t\t\texec(locatorCmd + ' ' + bin, function (err, stdout, strerr) {\n\t\t\t\t\t\t\tif (!err) {\n\t\t\t\t\t\t\t\tpaths[bin] = stdout.trim();\n\t\t\t\t\t\t\t\tdone();\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tparallel(this, [\n\t\t\t\t\t\t\t\t\t'/usr/local/bin/' + bin,\n\t\t\t\t\t\t\t\t\t'/opt/local/bin/' + bin,\n\t\t\t\t\t\t\t\t\tpath.join(process.env.HOME, 'local/bin', bin),\n\t\t\t\t\t\t\t\t\t'/opt/bin/' + bin,\n\t\t\t\t\t\t\t\t\t'/usr/bin/' + bin\n\t\t\t\t\t\t\t\t].map(function (p) {\n\t\t\t\t\t\t\t\t\treturn function (cb) {\n\t\t\t\t\t\t\t\t\t\tif (afs.exists(p)) { paths[bin] = p; }\n\t\t\t\t\t\t\t\t\t\tcb();\n\t\t\t\t\t\t\t\t\t};\n\t\t\t\t\t\t\t\t}), done);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\t\t\t\t};\n\t\t\t}), function () {\n\n\t\t\t\t// compose alloy command execution\n\t\t\t\tvar cmd = [paths.node, paths.alloy, 'compile', appDir, '--config', config];\n\t\t\t\tif (cli.argv['no-colors'] || cli.argv['color'] === false) { cmd.push('--no-colors'); }\n\n\t\t\t\t// process each line of output from alloy\n\t\t\t\tfunction checkLine(line) {\n\t\t\t\t\tvar re = new RegExp(\n\t\t\t\t\t\t'^(?:\\u001b\\\\[\\\\d+m)?\\\\[?(' +\n\t\t\t\t\t\tlogger.getLevels().join('|') +\n\t\t\t\t\t\t')\\\\]?\\s*(?:\\u001b\\\\[\\\\d+m)?(.*)', 'i'\n\t\t\t\t\t);\n\t\t\t\t\tif (line) {\n\t\t\t\t\t\tvar m = line.match(re);\n\t\t\t\t\t\tif (m) {\n\t\t\t\t\t\t\tlogger[m[1].toLowerCase()](m[2].trim());\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tlogger.debug(line);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t// execute alloy in os-specific manner\n\t\t\t\tvar child;\n\t\t\t\tif (process.platform === 'win32' && paths.alloy === 'alloy.cmd') {\n\t\t\t\t\tcmd.shift();\n\t\t\t\t\tlogger.info(__('Executing Alloy compile: %s',\n\t\t\t\t\t\t['cmd', '/s', '/c'].concat(cmd).join(' ').cyan));\n\n\t\t\t\t\t// arg processing from https://github.com/MarcDiethelm/superspawn\n\t\t\t\t\tchild = spawn('cmd', [['/s', '/c', '\"' +\n\t\t\t\t\t\tcmd.map(function(a) {\n\t\t\t\t\t\t\tif (/^[^\"].* .*[^\"]/.test(a)) return '\"' + a + '\"'; return a;\n\t\t\t\t\t\t}).join(' ') + '\"'].join(' ')], {\n\t\t\t\t\t\t\tstdio: 'inherit',\n\t\t\t\t\t\t\twindowsVerbatimArguments: true\n\t\t\t\t\t\t}\n\t\t\t\t\t);\n\t\t\t\t} else {\n\t\t\t\t\tlogger.info(__('Executing Alloy compile: %s', cmd.join(' ').cyan));\n\t\t\t\t\tchild = spawn(cmd.shift(), cmd);\n\t\t\t\t\tchild.stdout.on('data', function (data) {\n\t\t\t\t\t\tdata.toString().split('\\n').forEach(checkLine);\n\t\t\t\t\t});\n\t\t\t\t\tchild.stderr.on('data', function (data) {\n\t\t\t\t\t\tdata.toString().split('\\n').forEach(checkLine);\n\t\t\t\t\t});\n\t\t\t\t}\n\n\t\t\t\t// handle the completion of alloy, success or otherwise\n\t\t\t\tchild.on('exit', function (code) {\n\t\t\t\t\tif (code) {\n\t\t\t\t\t\tlogger.error(__('Alloy compiler failed'));\n\t\t\t\t\t\tprocess.exit(1);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tlogger.info(__('Alloy compiler completed successfully'));\n\n\t\t\t\t\t\tafs.exists(path.join(cli.argv['project-dir'], 'build', 'i18n')) && process.argv.push('--i18n-dir', 'build');\n\t\t\t\t\t\tafs.exists(path.join(cli.argv['project-dir'], 'build', 'platform')) && (cli.argv['platform-dir'] = 'build/platform');\n\t\t\t\t\t}\n\t\t\t\t\tfinished();\n\t\t\t\t});\n\n\t\t\t});\n\t\t}\n\t}\n\n\tcli.addHook('build.pre.compile', function (build, finished) {\n\t\tvar deployType = build.deployType,\n\t\t\ttarget = build.target;\n\n\t\trun(build.deviceFamily, deployType, target, finished);\n\t});\n\n\tcli.addHook('codeprocessor.pre.run', function (build, finished) {\n\t\trun('none', 'development', undefined, finished, SILENT);\n\t});\n};\n","/home/travis/build/npmtest/node-npmtest-alloy/node_modules/alloy/hooks/deepclean.js":"/**\n * Alloy\n * Copyright (c) 2014 by Appcelerator, Inc. All Rights Reserved.\n * See LICENSE for more information on licensing.\n */\n\nexports.cliVersion = '>=3.X';\nvar SILENT = true;\n\nexports.init = function (logger, config, cli, appc) {\n\tvar path = require('path'),\n\t\tfs = require('fs'),\n\t\tafs = appc.fs;\n\n\tfunction run(finished) {\n\t\tif (cli.argv['shallow'] === '') {\n\t\t\tlogger.info('Not cleaning the Resources directory');\n\t\t\tfinished();\n\t\t\treturn;\n\t\t}\n\t\tvar appDir = path.join(cli.argv['project-dir'], 'app');\n\t\tif (!afs.exists(appDir)) {\n\t\t\tlogger.debug('Project not an Alloy app, exiting.');\n\t\t\tfinished();\n\t\t\treturn;\n\t\t}\n\n\t\tvar resourcesDir = path.join(cli.argv['project-dir'], 'Resources');\n\t\tif (!afs.exists(resourcesDir)) {\n\t\t\tlogger.debug('Resources directory does not exist.');\n\t\t\tfinished();\n\t\t\treturn;\n\t\t}\n\t\trmdir(resourcesDir, fs, path, logger);\n\t\tlogger.debug('Resources directory of %s has been emptied', appDir.cyan);\n\t\tfinished();\n\t}\n\n\tcli.addHook('clean.post', function (build, finished) {\n\t\trun(finished);\n\t});\n\n};\n\nfunction rmdir(dirPath, fs, path, logger, removeSelf) {\n\tvar files;\n\ttry {\n\t\tfiles = fs.readdirSync(dirPath);\n\t} catch (e) {\n\t\treturn;\n\t}\n\tif (files.length > 0) {\n\t\tfor (var i = 0; i < files.length; i++) {\n\t\t\tvar filePath = path.join(dirPath, files[i]);\n\t\t\tif (fs.statSync(filePath).isFile()) {\n\t\t\t\tfs.unlinkSync(filePath);\n\t\t\t} else {\n\t\t\t\trmdir(filePath, fs, path, logger, true);\n\t\t\t}\n\t\t}\n\t}\n\tif (removeSelf) {\n\t\tfs.rmdirSync(dirPath);\n\t}\n}\n","/home/travis/build/npmtest/node-npmtest-alloy/node_modules/alloy/locales/en.js":"{\n\t\"Project not an Alloy app, continuing\": \"Project not an Alloy app, continuing\",\n\t\"Found Alloy app in %s\": \"Found Alloy app in %s\",\n\t\"Alloy compiler failed\": \"Alloy compiler failed\",\n\t\"Executing Alloy compile: %s\": \"Executing Alloy compile: %s\",\n\t\"Alloy compiler completed successfully\": \"Alloy compiler completed successfully\"\n}","/home/travis/build/npmtest/node-npmtest-alloy/node_modules/alloy/tools/checkmap.js":"#!/usr/bin/env node\n\n/*\n\tReads the source map files (foo.js.map) for the Harness app\n\tand outputs the the generated and original line information\n\tfor each map\n*/\n\nvar async = require('async'),\n\tpath = require('path'),\n\tplatforms = require('../platforms'),\n\tfs = require('fs'),\n\tos = require('os'),\n\tSM = require('source-map'),\n\t_ = require('../Alloy/lib/alloy/underscore');\n\nscan(path.join(__dirname, '..', 'test', 'projects', 'Harness', 'build', 'map', 'Resources'), '.map', function(err, files) {\n\t// Do something with files that ends in '.ext'.\n\t_.map(files, function(sourceMapFile) {\n\t\tconsole.log(path.basename(sourceMapFile));\n\t\tconsole.log('------------------------------');\n\t\tconsole.log('Generated line -> Original line');\n\t\tvar sourceMap = fs.readFileSync(sourceMapFile, {encoding: 'utf8'}),\n\t\t\tlineArray = [];\n\t\tvar smc = new SM.SourceMapConsumer(sourceMap);\n\t\tsmc.eachMapping(function (m) {\n\t\t\tlineArray.push({gen: m.generatedLine, orig: m.originalLine});\n\t\t});\n\t\tvar uniqueList = _.uniq(lineArray, function(item, key, gen) {\n\t\t\treturn item.gen;\n\t\t});\n\t\t_.each(uniqueList, function(l) {\n\t\t\tvar spacer = '                  '.slice(JSON.stringify(l.gen).length);\n\t\t\tconsole.log('   ' + l.gen + spacer + l.orig);\n\t\t});\n\t\tconsole.log('');\n\t});\n});\n\n\nfunction scan(dir, suffix, callback) {\n\tfs.readdir(dir, function(err, files) {\n\t\tvar returnFiles = [];\n\t\tasync.each(files, function(file, next) {\n\t\t\tvar filePath = dir + '/' + file;\n\t\t\tfs.stat(filePath, function(err, stat) {\n\t\t\t\tif (err) {\n\t\t\t\t\treturn next(err);\n\t\t\t\t}\n\t\t\t\tif (stat.isDirectory()) {\n\t\t\t\t\tscan(filePath, suffix, function(err, results) {\n\t\t\t\t\t\tif (err) {\n\t\t\t\t\t\t\treturn next(err);\n\t\t\t\t\t\t}\n\t\t\t\t\t\treturnFiles = returnFiles.concat(results);\n\t\t\t\t\t\tnext();\n\t\t\t\t\t});\n\t\t\t\t} else if (stat.isFile()) {\n\t\t\t\t\tif (file.indexOf(suffix, file.length - suffix.length) !== -1) {\n\t\t\t\t\t\treturnFiles.push(filePath);\n\t\t\t\t\t}\n\t\t\t\t\tnext();\n\t\t\t\t}\n\t\t\t});\n\t\t}, function(err) {\n\t\t\tcallback(err, returnFiles);\n\t\t});\n\t});\n}\n","/home/travis/build/npmtest/node-npmtest-alloy/node_modules/alloy/tools/compiles.js":"var async = require('async'),\n\tpath = require('path'),\n\texec = require('child_process').exec,\n\tplatforms = require('../platforms'),\n\t_ = require('../Alloy/lib/alloy/underscore');\n\nvar harnessPath = path.join(__dirname, '..', 'test', 'projects', 'Harness');\n\nasync.series(_.map(platforms, function(p) {\n\n\t// return a function that compiles and copies generated code for the given app\n\treturn function(callback) {\n\n\t\t// compile the app for all platforms\n\t\tvar cmd = 'alloy compile --outputPath \"' + harnessPath + '\" --config platform=' + p.platform;\n\t\tconsole.log(cmd);\n\t\texec(cmd, function(err, stdout, stderr) {\n\t\t\tif (err) { return callback(err); }\n\n\t\t\t// copy the generated controllers\n\t\t\tvar src = path.join(harnessPath, 'Resources', p.titaniumFolder, 'alloy', 'controllers', '*');\n\t\t\tvar dst = path.join(__dirname, '..', 'test', 'apps', process.argv[2], '_generated', p.platform, 'alloy', 'controllers');\n\t\t\tvar cmd2 = 'cp -r ' + src + ' ' + dst + '/ && rm ' + dst + '/BaseController.js';\n\t\t\tconsole.log(cmd2);\n\t\t\texec(cmd2, function(err, stdout, stderr) {\n\t\t\t\treturn callback(err);\n\t\t\t});\n\t\t});\n\t};\n}), function(err, results) {\n\tif (err) { throw new Error(err); }\n});\n\n","/home/travis/build/npmtest/node-npmtest-alloy/node_modules/alloy/tools/create_generated_code.js":"var fs = require('fs'),\n\tpath = require('path'),\n\twrench = require('wrench'),\n\tplatforms = require('../platforms/index'),\n\t_ = require('../Alloy/lib/alloy/underscore')._,\n\tcolors = require('colors'),\n\texec = require('child_process').exec,\n\tTESTS_WITH_DATES = ['ALOY-263', 'ALOY-1003', 'ALOY-1058'],\n\tTESTS_TO_SKIP = ['ALOY-840', 'ALOY-887', 'ALOY-932', 'ALOY-1080'];\n\nvar alloyRoot = path.join(__dirname, '..'),\n\tpaths = {\n\t\tapps: path.join(alloyRoot, 'test', 'apps'),\n\t\tharness: path.join(alloyRoot, 'test', 'projects', 'Harness')\n\t},\n\tplatformsArray = _.keys(platforms),\n\tplatformCtr = 0;\n\n// make sure we get a test app\nvar testApp = process.argv[2];\nif (!testApp) {\n\tconsole.error('You must specify a test app');\n\tconsole.error('  ex. node testgen.js advanced/device_query');\n\tprocess.exit(1);\n} else if (TESTS_TO_SKIP.indexOf(testApp) !== -1) {\n\tconsole.log((testApp + ' has code known to fail matching generated code. Canceling creation of _generated code.').yellow);\n\tprocess.exit();\n} else if (TESTS_WITH_DATES.indexOf(testApp) !== -1) {\n\tconsole.log((testApp + ' contains date functions, which create localized code unlikely to match on other systems.').yellow);\n\tconsole.log(('Canceling creation of _generated code.').yellow);\n\tprocess.exit();\n} else {\n\tconsole.log('generating code for ' + testApp.yellow);\n}\n\n// Stage the app\nvar cmd = 'jake app:setup dir=' + testApp + ' quiet=1';\nexec(cmd, function(error, stdout, stderr) {\n\tif (error !== null) {\n\t\tconsole.error(error);\n\t\tconsole.error(stderr);\n\t\tprocess.exit(2);\n\t}\n\n\tdoCompile(platformsArray[platformCtr++]);\n});\n\nfunction doCompile(platform) {\n\tif (!platform) { return; }\n\n\texec('alloy compile ' + paths.harness + ' --config platform=' + platform, function(error, stdout, stderr) {\n\t\tif (error !== null) {\n\t\t\tconsole.error(error);\n\t\t\tconsole.error(stderr);\n\t\t\tprocess.exit(3);\n\t\t}\n\n\t\tvar genDir = path.join(paths.apps, testApp, '_generated', platform);\n\t\twrench.rmdirSyncRecursive(genDir, true);\n\t\twrench.mkdirSyncRecursive(genDir, 0777);\n\n\t\tvar locations = [\n\t\t\tpath.join('alloy', 'controllers'),\n\t\t\tpath.join('alloy', 'models'),\n\t\t\tpath.join('alloy', 'widgets')\n\t\t];\n\t\t_.each(locations, function(l) {\n\t\t\tvar src = path.join(paths.harness, 'Resources', (platform === 'ios' ? 'iphone' : platform), l);\n\t\t\tvar dst = path.join(genDir, l);\n\t\t\tif (fs.existsSync(src) && fs.readdirSync(src).length !== 0) {\n\t\t\t\twrench.mkdirSyncRecursive(dst, 0777);\n\t\t\t\twrench.copyDirSyncRecursive(src, dst);\n\n\t\t\t\t// we don't need to evaluate BaseController.js every time\n\t\t\t\tvar bc = path.join(dst, 'BaseController.js');\n\t\t\t\tif (l === path.join('alloy', 'controllers') && fs.existsSync(bc)) {\n\t\t\t\t\tfs.unlinkSync(bc);\n\t\t\t\t}\n\n\t\t\t\tconsole.log('Generated runtime files in ' +\n\t\t\t\t\tpath.join('_generated', platform, l).cyan\n\t\t\t\t);\n\t\t\t}\n\t\t});\n\n\t\tdoCompile(platformsArray[platformCtr++]);\n\t});\n}\n\n","/home/travis/build/npmtest/node-npmtest-alloy/node_modules/alloy/Alloy/builtins/animation.js":"/**\n * @class Alloy.builtins.animation\n * A collection of useful animation utilities. To use the animation builtin library,\n * all you need to do is require it with the `alloy` root directory in your\n * `require` call. For example:\n *\n *     var animation = require('/alloy/animation');\n *     animation.crossFade(view1, view2, 500, finishCallback);\n */\n\n/**\n * @property {String} HORIZONTAL\n * To be used as direction for the flip-method\n */\nexports.HORIZONTAL = 'horizontal';\n\n/**\n * @property {String} VERTICAL\n * To be used as direction for the flip-method\n */\nexports.VERTICAL = 'vertical';\n\n/**\n * @method flip\n * Transitions from one view to another using a 3D flip animation.\n * The two views need to be positioned on top of each other.\n * @platform iphone 1.2.2\n * @platform ipad 1.2.2\n * @param {Titanium.UI.View} from View to fade out.\n * @param {Titanium.UI.View} to View to fade in.\n * @param {String} [direction] direction ('horizontal' or 'vertical') to flip.\n * @param {Number} duration Fade duration in milliseconds.\n * @param {function()} [finishCallback] Callback function, invoked after the fade completes.\n */\nexports.flip = OS_IOS ? function(from, to, direction, duration, finishCallback) {\n\tvar vertical = (direction === exports.VERTICAL);\n\tvar flipped_matrix = Ti.UI.create3DMatrix().rotate(\n\t\t-90,\n\t\tvertical ? 1 : 0,\n\t\tvertical ? 0 : 1,\n\t\t0\n\t);\n\tvar from_animation = Ti.UI.createAnimation({\n\t\ttransform: flipped_matrix,\n\t\tduration: duration\n\t});\n\tto.transform = flipped_matrix;\n\tfrom.animate(from_animation, function() {\n\t\tvar unflipped_matrix = Ti.UI.create3DMatrix().rotate(\n\t\t\t0,\n\t\t\tvertical ? 1 : 0,\n\t\t\tvertical ? 0 : 1,\n\t\t\t0\n\t\t);\n\t\tvar to_animation = Ti.UI.createAnimation({\n\t\t\ttransform: unflipped_matrix,\n\t\t\tduration: duration\n\t\t});\n\t\tfinishCallback ? to.animate(to_animation, finishCallback) : to.animate(to_animation);\n\t});\n\n} : function() {\n\tTi.API.error('The builtin flip-animation is iOS-only.');\n};\n\n/**\n * @method flipHorizontal\n * Transitions from one view to another using a horizontal flip animation.\n * @platform iphone 1.2.2\n * @platform ipad 1.2.2\n * @param {Titanium.UI.View} from View to fade out.\n * @param {Titanium.UI.View} to View to fade in.\n * @param {Number} duration Fade duration in milliseconds.\n * @param {function()} [finishCallback] Callback function, invoked after the fade completes.\n */\nexports.flipHorizontal = function(from, to, duration, finishCallback) {\n\texports.flip(from, to, exports.HORIZONTAL, duration, finishCallback);\n};\n\n/**\n * @method flipVertical\n * @platform iphone 1.2.2\n * @platform ipad 1.2.2\n * Transitions from one view to another using a vertical flip animation.\n * @param {Titanium.UI.View} from View to fade out.\n * @param {Titanium.UI.View} to View to fade in.\n * @param {Number} duration Fade duration in milliseconds.\n * @param {function()} [finishCallback] Callback function, invoked after the fade completes.\n */\nexports.flipVertical = function(from, to, duration, finishCallback) {\n\texports.flip(from, to, exports.VERTICAL, duration, finishCallback);\n};\n\n/**\n * @method crossFade\n * Transitions from one view to another using a cross-fade animation.\n * @param {Titanium.UI.View} from View to fade out.\n * @param {Titanium.UI.View} to View to fade in.\n * @param {Number} duration Fade duration in milliseconds.\n * @param {function()} [finishCallback] Callback function, invoked after the fade completes.\n */\nexports.crossFade = function (from, to, duration, finishCallback) {\n\tif (from)\n\t\tfrom.animate({\n\t\t\topacity: 0,\n\t\t\tduration: duration\n\t\t});\n\tif (to)\n\t\tto.animate({\n\t\t\topacity: 1,\n\t\t\tduration: duration\n\t\t});\n\tif (finishCallback)\n\t\tsetTimeout(finishCallback, duration + 300);\n};\n\n/**\n * @method fadeAndRemove\n * Fades out a view then removes it from its parent view.\n * @param {Titanium.UI.View} from View to remove.\n * @param {Number} duration Fade duration in milliseconds.\n * @param {Titanium.UI.View} container Parent container view.\n * @param {function()} [finishCallback] Callback function, invoked after the fadeAndRemove completes.\n */\nexports.fadeAndRemove = function (from, duration, container, finishCallback) {\n\tif (from && container) {\n\t\tfrom.animate({\n\t\t\topacity: 0,\n\t\t\tduration: duration\n\t\t}, function () {\n\t\t\tcontainer.remove(from);\n\t\t\tcontainer = from = duration = null;\n\t\t\tif (finishCallback)\n\t\t\t\tfinishCallback();\n\t\t});\n\t}\n};\n\n/**\n * @method fadeIn\n * Fades in the specified view.\n * @param {Titanium.UI.View} to View to fade in.\n * @param {Number} duration Fade duration in milliseconds.\n * @param {function()} [finishCallback] Callback function, invoked after the fadeIn completes.\n */\nexports.fadeIn = function(to, duration, finishCallback) {\n\tif (finishCallback) {\n\t\tif (to) {\n\t\t\tto.animate({\n\t\t\t\topacity: 1,\n\t\t\t\tduration: duration\n\t\t\t}, finishCallback);\n\t\t}\n\t} else {\n\t\tif (to) {\n\t\t\tto.animate({\n\t\t\t\topacity: 1,\n\t\t\t\tduration: duration\n\t\t\t});\n\t\t}\n\t}\n};\n\n\n/**\n * @method fadeOut\n * Fades out the specified view.\n * @param {Titanium.UI.View} to View to fade out.\n * @param {Number} duration Fade duration in milliseconds.\n * @param {function()} [finishCallback] Callback function, invoked after the fadeOut completes.\n */\nexports.fadeOut = function (to, duration, finishCallback) {\n\tif (finishCallback) {\n\t\tif (to) {\n\t\t\tto.animate({\n\t\t\t\topacity: 0,\n\t\t\t\tduration: duration\n\t\t\t}, finishCallback);\n\t\t}\n\t} else {\n\t\tif (to) {\n\t\t\tto.animate({\n\t\t\t\topacity: 0,\n\t\t\t\tduration: duration\n\t\t\t});\n\t\t}\n\t}\n};\n\n/**\n * @method popIn\n * Makes the specified view appear using a \"pop-in\" animation, which combines a fade-in\n * with a slight expanding and contracting animation, to call attention to the new view.\n * @param {Titanium.UI.View} view View to animate.\n * @param {function()} [finishCallback] Callback function, invoked after the popIn completes.\n */\nexports.popIn = function (view, finishCallback) {\n\tif (!OS_IOS) {\n\t\tview.transform = Ti.UI.create2DMatrix();\n\t\tview.opacity = 1;\n\t\treturn;\n\t}\n\n\tvar animate1 = Ti.UI.createAnimation({\n\t\topacity: 1,\n\t\ttransform: Ti.UI.create2DMatrix().scale(1.05, 1.05),\n\t\tduration: 200\n\t});\n\tvar animate2 = Ti.UI.createAnimation({\n\t\ttransform: Ti.UI.create2DMatrix(),\n\t\tduration: 300\n\t});\n\n\texports.chainAnimate(view, [ animate1, animate2 ], finishCallback);\n\tview = null;\n};\n\n/**\n * @method shake\n * Creates a shake animation, moving the target view back and forth rapidly several times.\n *\n * @param {Titanium.UI.View} view View to animate.\n * @param {Number} [delay] If specified, animation starts after `delay` milliseconds.\n * @param {function()} [finishCallback] Callback function, invoked after the shake completes.\n */\nexports.shake = function (view, delay, finishCallback) {\n\tvar shake1 = Ti.UI.createAnimation({\n\t\ttransform: Ti.UI.create2DMatrix().translate(5, 0),\n\t\tduration: 100\n\t});\n\tvar shake2 = Ti.UI.createAnimation({\n\t\ttransform: Ti.UI.create2DMatrix().translate(-5, 0),\n\t\tduration: 100\n\t});\n\tvar shake3 = Ti.UI.createAnimation({\n\t\ttransform: Ti.UI.create2DMatrix().translate(5, 0),\n\t\tduration: 100\n\t});\n\tvar shake4 = Ti.UI.createAnimation({\n\t\ttransform: Ti.UI.create2DMatrix().translate(-5, 0),\n\t\tduration: 100\n\t});\n\tvar shake5 = Ti.UI.createAnimation({\n\t\ttransform: Ti.UI.create2DMatrix(),\n\t\tduration: 100\n\t});\n\tif (delay) {\n\t\tsetTimeout(function () {\n\t\t\texports.chainAnimate(view, [ shake1, shake2, shake3, shake4, shake5 ], finishCallback);\n\t\t\tview = shake1 = shake2 = shake3 = shake4 = shake5 = null;\n\t\t}, delay);\n\t} else {\n\t\texports.chainAnimate(view, [ shake1, shake2, shake3, shake4, shake5 ], finishCallback);\n\t}\n};\n\n/**\n * @method flash\n * Flashes the target view twice, fading to partially transparent then back to\n * fully-opaque.\n *\n * @param {Titanium.UI.View} view View to animate.\n * @param {Number} [delay] If specified, animation starts after `delay` milliseconds.\n * @param {function()} [finishCallback] Callback function, invoked after the flash completes.\n */\nexports.flash = function (view, delay, finishCallback) {\n\tvar flash1 = Ti.UI.createAnimation({\n\t\topacity: 0.7,\n\t\tduration: 100\n\t});\n\tvar flash2 = Ti.UI.createAnimation({\n\t\topacity: 1,\n\t\tduration: 100\n\t});\n\tvar flash3 = Ti.UI.createAnimation({\n\t\topacity: 0.7,\n\t\tduration: 100\n\t});\n\tvar flash4 = Ti.UI.createAnimation({\n\t\topacity: 1,\n\t\tduration: 100\n\t});\n\tif (delay) {\n\t\tsetTimeout(function () {\n\t\t\texports.chainAnimate(view, [ flash1, flash2, flash3, flash4 ], finishCallback);\n\t\t\tview = flash1 = flash2 = flash3 = flash4 = null;\n\t\t}, delay);\n\t} else {\n\t\texports.chainAnimate(view, [ flash1, flash2, flash3, flash4 ], finishCallback);\n\t}\n};\n\n/**\n * @method chainAnimate\n * Executes a series of animations on the target view.\n *\n * @param {Titanium.UI.View} view View to animate.\n * @param {Titanium.UI.Animation[]} animations A set of animations to execute on `view` in sequence.\n * @param {function()} [finishCallback] Callback to invoke once the chain animation is complete.\n */\nexports.chainAnimate = function (view, animations, finishCallback) {\n\tfunction step() {\n\t\tif (animations.length === 0) {\n\t\t\tview = animations = null;\n\t\t\tif (finishCallback)\n\t\t\t\tfinishCallback();\n\t\t\treturn;\n\t\t}\n\t\tvar animation = animations.shift();\n\t\tanimation.addEventListener('complete', step);\n\t\tview.animate(animation);\n\t}\n\n\tstep();\n};\n","/home/travis/build/npmtest/node-npmtest-alloy/node_modules/alloy/Alloy/builtins/dialogs.js":"/**\n * @class Alloy.builtins.dialogs\n * A collection of utilities for generating dialog boxes.\n * To use the dialogs builtin library,\n * require it with the `alloy` root directory in your `require` call. For example:\n *\n *     var dialogs = require('/alloy/dialogs');\n *     dialogs.confirm({});\n */\n\n/**\n * @property {String} title\n * To be used as default title for confirm-method AlertDialog\n */\nexports.title = 'Confirm';\n\n/**\n * @property {String} message\n * To be used as default message for confirm-method AlertDialog\n */\nexports.message = 'Are you sure?';\n\n/**\n * @property {Array} buttonNames\n * To be used as default buttonNames for confirm-method AlertDialog\n */\nexports.buttonNames = ['No', 'Yes'];\n\n/**\n * @method confirm\n * Creates a confirmation dialog box. Default values may be overridden and a callback function\n * may be called after an affirmative response.\n * @param {...*} args Dialog box parameters.\n * @param {String} [args.title=\"Confirm\"] Title of the dialog box.\n * @param {String} [args.message=\"Are you sure?\"] Message of the dialog box.\n * @param {String} [args.yes=\"Yes\"] Label of the affirmative button of the dialog box.\n * @param {String} [args.no=\"No\"] Label of the negative button of the dialog box.\n * @param {Function} [args.callback] Callback function invoked after an affirmative response.\n * @param {...*} [args.evt] Callback context.\n */\nexports.confirm = function (args) {\n\targs = args || {};\n\tif (args.buttonNames) {\n\t\targs.no = args.no || args.buttonNames[0];\n\t\targs.yes = args.yes || args.buttonNames[1];\n\t}\n\n\tvar alertDialog = Ti.UI.createAlertDialog({\n\t\ttitle: args.title || exports.title,\n\t\tmessage: args.message || exports.message,\n\t\tbuttonNames: [args.no || exports.buttonNames[0], args.yes || exports.buttonNames[1]],\n\t\tcancel: 0\n\t});\n\talertDialog.addEventListener('click', function (evt) {\n\t\tif (evt.index) {\n\t\t\tif (args.callback) { args.callback(args.evt || {}); }\n\t\t}\n\t\targs = null;\n\t});\n\talertDialog.show();\n};\n","/home/travis/build/npmtest/node-npmtest-alloy/node_modules/alloy/Alloy/builtins/measurement.js":"/**\n * @class Alloy.builtins.measurement\n * A collection of utilities for converting between different display units.\n * These functions are only useful on the Android platform to support devices with different\n * screen densities and resolutions.\n *\n * To use the measurement builtin library,\n * require it with the `alloy` root directory in your `require` call. For example:\n *\n *     var measurement = require('/alloy/measurement');\n *     var pointPX = {x:42, y:7};\n *     var pointDP = measurement.pointPXToDP(pointPX);\n */\n\nvar dpi = Ti.Platform.displayCaps.dpi,\n\tdensity = Ti.Platform.displayCaps.density;\n\n/**\n * @method dpToPX\n * Converts a density-independent pixel value to screen pixels.\n * @param {Number} val Value in density-independent pixels.\n * @return {Number} Converted value in screen pixels.\n */\nexports.dpToPX = function (val) {\n\tif (OS_ANDROID) {\n\t\treturn val * dpi / 160;\n\t} else if (OS_IOS) {\n\t\tswitch (density) {\n\t\t\tcase 'xhigh': return val * 3;\n\t\t\tcase 'high': return val * 2;\n\t\t\tdefault: return val;\n\t\t}\n\t} else {\n\t\treturn val;\n\t}\n};\n\n/**\n * @method pxToDP\n * Converts a screen pixel value to density-independent pixels.\n * @param {Number} val Value in screen pixels.\n * @return {Number} Converted value in density-independent pixels.\n */\nexports.pxToDP = function (val) {\n\tif (OS_ANDROID) {\n\t\treturn val / dpi * 160;\n\t} else if (OS_IOS) {\n\t\tswitch (density) {\n\t\t\tcase 'xhigh': return val / 3;\n\t\t\tcase 'high': return val / 2;\n\t\t\tdefault: return val;\n\t\t}\n\t} else {\n\t\treturn val;\n\t}\n};\n\n/**\n * @method pointPXToDP\n * Converts a coordinate (x, y) from screen pixels to density-independent pixels.\n * @param {Number} val Coordinate in screen pixels.\n * @return {Number} Converted coordinate in density-independent pixels.\n */\nexports.pointPXToDP = function (pt) {\n\tif (OS_ANDROID || OS_IOS) {\n\t\treturn { x: exports.pxToDP(pt.x), y: exports.pxToDP(pt.y) };\n\t} else {\n\t\treturn pt;\n\t}\n};\n","/home/travis/build/npmtest/node-npmtest-alloy/node_modules/alloy/Alloy/builtins/moment.js":"//! moment.js\n//! version : 2.16.0\n//! authors : Tim Wood, Iskren Chernev, Moment.js contributors\n//! license : MIT\n//! momentjs.com\n\n(function (global, factory) {\n    typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory() :\n    typeof define === 'function' && define.amd ? define(factory) :\n    global.moment = factory()\n}(this, function () { 'use strict';\n\n    var hookCallback;\n\n    function hooks () {\n        return hookCallback.apply(null, arguments);\n    }\n\n    // This is done to register the method called with moment()\n    // without creating circular dependencies.\n    function setHookCallback (callback) {\n        hookCallback = callback;\n    }\n\n    function isArray(input) {\n        return input instanceof Array || Object.prototype.toString.call(input) === '[object Array]';\n    }\n\n    function isObject(input) {\n        // IE8 will treat undefined and null as object if it wasn't for\n        // input != null\n        return input != null && Object.prototype.toString.call(input) === '[object Object]';\n    }\n\n    function isObjectEmpty(obj) {\n        var k;\n        for (k in obj) {\n            // even if its not own property I'd still call it non-empty\n            return false;\n        }\n        return true;\n    }\n\n    function isNumber(input) {\n        return typeof value === 'number' || Object.prototype.toString.call(input) === '[object Number]';\n    }\n\n    function isDate(input) {\n        return input instanceof Date || Object.prototype.toString.call(input) === '[object Date]';\n    }\n\n    function map(arr, fn) {\n        var res = [], i;\n        for (i = 0; i < arr.length; ++i) {\n            res.push(fn(arr[i], i));\n        }\n        return res;\n    }\n\n    function hasOwnProp(a, b) {\n        return Object.prototype.hasOwnProperty.call(a, b);\n    }\n\n    function extend(a, b) {\n        for (var i in b) {\n            if (hasOwnProp(b, i)) {\n                a[i] = b[i];\n            }\n        }\n\n        if (hasOwnProp(b, 'toString')) {\n            a.toString = b.toString;\n        }\n\n        if (hasOwnProp(b, 'valueOf')) {\n            a.valueOf = b.valueOf;\n        }\n\n        return a;\n    }\n\n    function createUTC (input, format, locale, strict) {\n        return createLocalOrUTC(input, format, locale, strict, true).utc();\n    }\n\n    function defaultParsingFlags() {\n        // We need to deep clone this object.\n        return {\n            empty           : false,\n            unusedTokens    : [],\n            unusedInput     : [],\n            overflow        : -2,\n            charsLeftOver   : 0,\n            nullInput       : false,\n            invalidMonth    : null,\n            invalidFormat   : false,\n            userInvalidated : false,\n            iso             : false,\n            parsedDateParts : [],\n            meridiem        : null\n        };\n    }\n\n    function getParsingFlags(m) {\n        if (m._pf == null) {\n            m._pf = defaultParsingFlags();\n        }\n        return m._pf;\n    }\n\n    var some;\n    if (Array.prototype.some) {\n        some = Array.prototype.some;\n    } else {\n        some = function (fun) {\n            var t = Object(this);\n            var len = t.length >>> 0;\n\n            for (var i = 0; i < len; i++) {\n                if (i in t && fun.call(this, t[i], i, t)) {\n                    return true;\n                }\n            }\n\n            return false;\n        };\n    }\n\n    var some$1 = some;\n\n    function isValid(m) {\n        if (m._isValid == null) {\n            var flags = getParsingFlags(m);\n            var parsedParts = some$1.call(flags.parsedDateParts, function (i) {\n                return i != null;\n            });\n            var isNowValid = !isNaN(m._d.getTime()) &&\n                flags.overflow < 0 &&\n                !flags.empty &&\n                !flags.invalidMonth &&\n                !flags.invalidWeekday &&\n                !flags.nullInput &&\n                !flags.invalidFormat &&\n                !flags.userInvalidated &&\n                (!flags.meridiem || (flags.meridiem && parsedParts));\n\n            if (m._strict) {\n                isNowValid = isNowValid &&\n                    flags.charsLeftOver === 0 &&\n                    flags.unusedTokens.length === 0 &&\n                    flags.bigHour === undefined;\n            }\n\n            if (Object.isFrozen == null || !Object.isFrozen(m)) {\n                m._isValid = isNowValid;\n            }\n            else {\n                return isNowValid;\n            }\n        }\n        return m._isValid;\n    }\n\n    function createInvalid (flags) {\n        var m = createUTC(NaN);\n        if (flags != null) {\n            extend(getParsingFlags(m), flags);\n        }\n        else {\n            getParsingFlags(m).userInvalidated = true;\n        }\n\n        return m;\n    }\n\n    function isUndefined(input) {\n        return input === void 0;\n    }\n\n    // Plugins that add properties should also add the key here (null value),\n    // so we can properly clone ourselves.\n    var momentProperties = hooks.momentProperties = [];\n\n    function copyConfig(to, from) {\n        var i, prop, val;\n\n        if (!isUndefined(from._isAMomentObject)) {\n            to._isAMomentObject = from._isAMomentObject;\n        }\n        if (!isUndefined(from._i)) {\n            to._i = from._i;\n        }\n        if (!isUndefined(from._f)) {\n            to._f = from._f;\n        }\n        if (!isUndefined(from._l)) {\n            to._l = from._l;\n        }\n        if (!isUndefined(from._strict)) {\n            to._strict = from._strict;\n        }\n        if (!isUndefined(from._tzm)) {\n            to._tzm = from._tzm;\n        }\n        if (!isUndefined(from._isUTC)) {\n            to._isUTC = from._isUTC;\n        }\n        if (!isUndefined(from._offset)) {\n            to._offset = from._offset;\n        }\n        if (!isUndefined(from._pf)) {\n            to._pf = getParsingFlags(from);\n        }\n        if (!isUndefined(from._locale)) {\n            to._locale = from._locale;\n        }\n\n        if (momentProperties.length > 0) {\n            for (i in momentProperties) {\n                prop = momentProperties[i];\n                val = from[prop];\n                if (!isUndefined(val)) {\n                    to[prop] = val;\n                }\n            }\n        }\n\n        return to;\n    }\n\n    var updateInProgress = false;\n\n    // Moment prototype object\n    function Moment(config) {\n        copyConfig(this, config);\n        this._d = new Date(config._d != null ? config._d.getTime() : NaN);\n        // Prevent infinite loop in case updateOffset creates new moment\n        // objects.\n        if (updateInProgress === false) {\n            updateInProgress = true;\n            hooks.updateOffset(this);\n            updateInProgress = false;\n        }\n    }\n\n    function isMoment (obj) {\n        return obj instanceof Moment || (obj != null && obj._isAMomentObject != null);\n    }\n\n    function absFloor (number) {\n        if (number < 0) {\n            // -0 -> 0\n            return Math.ceil(number) || 0;\n        } else {\n            return Math.floor(number);\n        }\n    }\n\n    function toInt(argumentForCoercion) {\n        var coercedNumber = +argumentForCoercion,\n            value = 0;\n\n        if (coercedNumber !== 0 && isFinite(coercedNumber)) {\n            value = absFloor(coercedNumber);\n        }\n\n        return value;\n    }\n\n    // compare two arrays, return the number of differences\n    function compareArrays(array1, array2, dontConvert) {\n        var len = Math.min(array1.length, array2.length),\n            lengthDiff = Math.abs(array1.length - array2.length),\n            diffs = 0,\n            i;\n        for (i = 0; i < len; i++) {\n            if ((dontConvert && array1[i] !== array2[i]) ||\n                (!dontConvert && toInt(array1[i]) !== toInt(array2[i]))) {\n                diffs++;\n            }\n        }\n        return diffs + lengthDiff;\n    }\n\n    function warn(msg) {\n        if (hooks.suppressDeprecationWarnings === false &&\n                (typeof console !==  'undefined') && console.warn) {\n            console.warn('Deprecation warning: ' + msg);\n        }\n    }\n\n    function deprecate(msg, fn) {\n        var firstTime = true;\n\n        return extend(function () {\n            if (hooks.deprecationHandler != null) {\n                hooks.deprecationHandler(null, msg);\n            }\n            if (firstTime) {\n                var args = [];\n                var arg;\n                for (var i = 0; i < arguments.length; i++) {\n                    arg = '';\n                    if (typeof arguments[i] === 'object') {\n                        arg += '\\n[' + i + '] ';\n                        for (var key in arguments[0]) {\n                            arg += key + ': ' + arguments[0][key] + ', ';\n                        }\n                        arg = arg.slice(0, -2); // Remove trailing comma and space\n                    } else {\n                        arg = arguments[i];\n                    }\n                    args.push(arg);\n                }\n                warn(msg + '\\nArguments: ' + Array.prototype.slice.call(args).join('') + '\\n' + (new Error()).stack);\n                firstTime = false;\n            }\n            return fn.apply(this, arguments);\n        }, fn);\n    }\n\n    var deprecations = {};\n\n    function deprecateSimple(name, msg) {\n        if (hooks.deprecationHandler != null) {\n            hooks.deprecationHandler(name, msg);\n        }\n        if (!deprecations[name]) {\n            warn(msg);\n            deprecations[name] = true;\n        }\n    }\n\n    hooks.suppressDeprecationWarnings = false;\n    hooks.deprecationHandler = null;\n\n    function isFunction(input) {\n        return input instanceof Function || Object.prototype.toString.call(input) === '[object Function]';\n    }\n\n    function set (config) {\n        var prop, i;\n        for (i in config) {\n            prop = config[i];\n            if (isFunction(prop)) {\n                this[i] = prop;\n            } else {\n                this['_' + i] = prop;\n            }\n        }\n        this._config = config;\n        // Lenient ordinal parsing accepts just a number in addition to\n        // number + (possibly) stuff coming from _ordinalParseLenient.\n        this._ordinalParseLenient = new RegExp(this._ordinalParse.source + '|' + (/\\d{1,2}/).source);\n    }\n\n    function mergeConfigs(parentConfig, childConfig) {\n        var res = extend({}, parentConfig), prop;\n        for (prop in childConfig) {\n            if (hasOwnProp(childConfig, prop)) {\n                if (isObject(parentConfig[prop]) && isObject(childConfig[prop])) {\n                    res[prop] = {};\n                    extend(res[prop], parentConfig[prop]);\n                    extend(res[prop], childConfig[prop]);\n                } else if (childConfig[prop] != null) {\n                    res[prop] = childConfig[prop];\n                } else {\n                    delete res[prop];\n                }\n            }\n        }\n        for (prop in parentConfig) {\n            if (hasOwnProp(parentConfig, prop) &&\n                    !hasOwnProp(childConfig, prop) &&\n                    isObject(parentConfig[prop])) {\n                // make sure changes to properties don't modify parent config\n                res[prop] = extend({}, res[prop]);\n            }\n        }\n        return res;\n    }\n\n    function Locale(config) {\n        if (config != null) {\n            this.set(config);\n        }\n    }\n\n    var keys;\n\n    if (Object.keys) {\n        keys = Object.keys;\n    } else {\n        keys = function (obj) {\n            var i, res = [];\n            for (i in obj) {\n                if (hasOwnProp(obj, i)) {\n                    res.push(i);\n                }\n            }\n            return res;\n        };\n    }\n\n    var keys$1 = keys;\n\n    var defaultCalendar = {\n        sameDay : '[Today at] LT',\n        nextDay : '[Tomorrow at] LT',\n        nextWeek : 'dddd [at] LT',\n        lastDay : '[Yesterday at] LT',\n        lastWeek : '[Last] dddd [at] LT',\n        sameElse : 'L'\n    };\n\n    function calendar (key, mom, now) {\n        var output = this._calendar[key] || this._calendar['sameElse'];\n        return isFunction(output) ? output.call(mom, now) : output;\n    }\n\n    var defaultLongDateFormat = {\n        LTS  : 'h:mm:ss A',\n        LT   : 'h:mm A',\n        L    : 'MM/DD/YYYY',\n        LL   : 'MMMM D, YYYY',\n        LLL  : 'MMMM D, YYYY h:mm A',\n        LLLL : 'dddd, MMMM D, YYYY h:mm A'\n    };\n\n    function longDateFormat (key) {\n        var format = this._longDateFormat[key],\n            formatUpper = this._longDateFormat[key.toUpperCase()];\n\n        if (format || !formatUpper) {\n            return format;\n        }\n\n        this._longDateFormat[key] = formatUpper.replace(/MMMM|MM|DD|dddd/g, function (val) {\n            return val.slice(1);\n        });\n\n        return this._longDateFormat[key];\n    }\n\n    var defaultInvalidDate = 'Invalid date';\n\n    function invalidDate () {\n        return this._invalidDate;\n    }\n\n    var defaultOrdinal = '%d';\n    var defaultOrdinalParse = /\\d{1,2}/;\n\n    function ordinal (number) {\n        return this._ordinal.replace('%d', number);\n    }\n\n    var defaultRelativeTime = {\n        future : 'in %s',\n        past   : '%s ago',\n        s  : 'a few seconds',\n        m  : 'a minute',\n        mm : '%d minutes',\n        h  : 'an hour',\n        hh : '%d hours',\n        d  : 'a day',\n        dd : '%d days',\n        M  : 'a month',\n        MM : '%d months',\n        y  : 'a year',\n        yy : '%d years'\n    };\n\n    function relativeTime (number, withoutSuffix, string, isFuture) {\n        var output = this._relativeTime[string];\n        return (isFunction(output)) ?\n            output(number, withoutSuffix, string, isFuture) :\n            output.replace(/%d/i, number);\n    }\n\n    function pastFuture (diff, output) {\n        var format = this._relativeTime[diff > 0 ? 'future' : 'past'];\n        return isFunction(format) ? format(output) : format.replace(/%s/i, output);\n    }\n\n    var aliases = {};\n\n    function addUnitAlias (unit, shorthand) {\n        var lowerCase = unit.toLowerCase();\n        aliases[lowerCase] = aliases[lowerCase + 's'] = aliases[shorthand] = unit;\n    }\n\n    function normalizeUnits(units) {\n        return typeof units === 'string' ? aliases[units] || aliases[units.toLowerCase()] : undefined;\n    }\n\n    function normalizeObjectUnits(inputObject) {\n        var normalizedInput = {},\n            normalizedProp,\n            prop;\n\n        for (prop in inputObject) {\n            if (hasOwnProp(inputObject, prop)) {\n                normalizedProp = normalizeUnits(prop);\n                if (normalizedProp) {\n                    normalizedInput[normalizedProp] = inputObject[prop];\n                }\n            }\n        }\n\n        return normalizedInput;\n    }\n\n    var priorities = {};\n\n    function addUnitPriority(unit, priority) {\n        priorities[unit] = priority;\n    }\n\n    function getPrioritizedUnits(unitsObj) {\n        var units = [];\n        for (var u in unitsObj) {\n            units.push({unit: u, priority: priorities[u]});\n        }\n        units.sort(function (a, b) {\n            return a.priority - b.priority;\n        });\n        return units;\n    }\n\n    function makeGetSet (unit, keepTime) {\n        return function (value) {\n            if (value != null) {\n                set$1(this, unit, value);\n                hooks.updateOffset(this, keepTime);\n                return this;\n            } else {\n                return get(this, unit);\n            }\n        };\n    }\n\n    function get (mom, unit) {\n        return mom.isValid() ?\n            mom._d['get' + (mom._isUTC ? 'UTC' : '') + unit]() : NaN;\n    }\n\n    function set$1 (mom, unit, value) {\n        if (mom.isValid()) {\n            mom._d['set' + (mom._isUTC ? 'UTC' : '') + unit](value);\n        }\n    }\n\n    // MOMENTS\n\n    function stringGet (units) {\n        units = normalizeUnits(units);\n        if (isFunction(this[units])) {\n            return this[units]();\n        }\n        return this;\n    }\n\n\n    function stringSet (units, value) {\n        if (typeof units === 'object') {\n            units = normalizeObjectUnits(units);\n            var prioritized = getPrioritizedUnits(units);\n            for (var i = 0; i < prioritized.length; i++) {\n                this[prioritized[i].unit](units[prioritized[i].unit]);\n            }\n        } else {\n            units = normalizeUnits(units);\n            if (isFunction(this[units])) {\n                return this[units](value);\n            }\n        }\n        return this;\n    }\n\n    function zeroFill(number, targetLength, forceSign) {\n        var absNumber = '' + Math.abs(number),\n            zerosToFill = targetLength - absNumber.length,\n            sign = number >= 0;\n        return (sign ? (forceSign ? '+' : '') : '-') +\n            Math.pow(10, Math.max(0, zerosToFill)).toString().substr(1) + absNumber;\n    }\n\n    var formattingTokens = /(\\[[^\\[]*\\])|(\\\\)?([Hh]mm(ss)?|Mo|MM?M?M?|Do|DDDo|DD?D?D?|ddd?d?|do?|w[o|w]?|W[o|W]?|Qo?|YYYYYY|YYYYY|YYYY|YY|gg(ggg?)?|GG(GGG?)?|e|E|a|A|hh?|HH?|kk?|mm?|ss?|S{1,9}|x|X|zz?|ZZ?|.)/g;\n\n    var localFormattingTokens = /(\\[[^\\[]*\\])|(\\\\)?(LTS|LT|LL?L?L?|l{1,4})/g;\n\n    var formatFunctions = {};\n\n    var formatTokenFunctions = {};\n\n    // token:    'M'\n    // padded:   ['MM', 2]\n    // ordinal:  'Mo'\n    // callback: function () { this.month() + 1 }\n    function addFormatToken (token, padded, ordinal, callback) {\n        var func = callback;\n        if (typeof callback === 'string') {\n            func = function () {\n                return this[callback]();\n            };\n        }\n        if (token) {\n            formatTokenFunctions[token] = func;\n        }\n        if (padded) {\n            formatTokenFunctions[padded[0]] = function () {\n                return zeroFill(func.apply(this, arguments), padded[1], padded[2]);\n            };\n        }\n        if (ordinal) {\n            formatTokenFunctions[ordinal] = function () {\n                return this.localeData().ordinal(func.apply(this, arguments), token);\n            };\n        }\n    }\n\n    function removeFormattingTokens(input) {\n        if (input.match(/\\[[\\s\\S]/)) {\n            return input.replace(/^\\[|\\]$/g, '');\n        }\n        return input.replace(/\\\\/g, '');\n    }\n\n    function makeFormatFunction(format) {\n        var array = format.match(formattingTokens), i, length;\n\n        for (i = 0, length = array.length; i < length; i++) {\n            if (formatTokenFunctions[array[i]]) {\n                array[i] = formatTokenFunctions[array[i]];\n            } else {\n                array[i] = removeFormattingTokens(array[i]);\n            }\n        }\n\n        return function (mom) {\n            var output = '', i;\n            for (i = 0; i < length; i++) {\n                output += array[i] instanceof Function ? array[i].call(mom, format) : array[i];\n            }\n            return output;\n        };\n    }\n\n    // format date using native date object\n    function formatMoment(m, format) {\n        if (!m.isValid()) {\n            return m.localeData().invalidDate();\n        }\n\n        format = expandFormat(format, m.localeData());\n        formatFunctions[format] = formatFunctions[format] || makeFormatFunction(format);\n\n        return formatFunctions[format](m);\n    }\n\n    function expandFormat(format, locale) {\n        var i = 5;\n\n        function replaceLongDateFormatTokens(input) {\n            return locale.longDateFormat(input) || input;\n        }\n\n        localFormattingTokens.lastIndex = 0;\n        while (i >= 0 && localFormattingTokens.test(format)) {\n            format = format.replace(localFormattingTokens, replaceLongDateFormatTokens);\n            localFormattingTokens.lastIndex = 0;\n            i -= 1;\n        }\n\n        return format;\n    }\n\n    var match1         = /\\d/;            //       0 - 9\n    var match2         = /\\d\\d/;          //      00 - 99\n    var match3         = /\\d{3}/;         //     000 - 999\n    var match4         = /\\d{4}/;         //    0000 - 9999\n    var match6         = /[+-]?\\d{6}/;    // -999999 - 999999\n    var match1to2      = /\\d\\d?/;         //       0 - 99\n    var match3to4      = /\\d\\d\\d\\d?/;     //     999 - 9999\n    var match5to6      = /\\d\\d\\d\\d\\d\\d?/; //   99999 - 999999\n    var match1to3      = /\\d{1,3}/;       //       0 - 999\n    var match1to4      = /\\d{1,4}/;       //       0 - 9999\n    var match1to6      = /[+-]?\\d{1,6}/;  // -999999 - 999999\n\n    var matchUnsigned  = /\\d+/;           //       0 - inf\n    var matchSigned    = /[+-]?\\d+/;      //    -inf - inf\n\n    var matchOffset    = /Z|[+-]\\d\\d:?\\d\\d/gi; // +00:00 -00:00 +0000 -0000 or Z\n    var matchShortOffset = /Z|[+-]\\d\\d(?::?\\d\\d)?/gi; // +00 -00 +00:00 -00:00 +0000 -0000 or Z\n\n    var matchTimestamp = /[+-]?\\d+(\\.\\d{1,3})?/; // 123456789 123456789.123\n\n    // any word (or two) characters or numbers including two/three word month in arabic.\n    // includes scottish gaelic two word and hyphenated months\n    var matchWord = /[0-9]*['a-z\\u00A0-\\u05FF\\u0700-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF]+|[\\u0600-\\u06FF\\/]+(\\s*?[\\u0600-\\u06FF]+){1,2}/i;\n\n\n    var regexes = {};\n\n    function addRegexToken (token, regex, strictRegex) {\n        regexes[token] = isFunction(regex) ? regex : function (isStrict, localeData) {\n            return (isStrict && strictRegex) ? strictRegex : regex;\n        };\n    }\n\n    function getParseRegexForToken (token, config) {\n        if (!hasOwnProp(regexes, token)) {\n            return new RegExp(unescapeFormat(token));\n        }\n\n        return regexes[token](config._strict, config._locale);\n    }\n\n    // Code from http://stackoverflow.com/questions/3561493/is-there-a-regexp-escape-function-in-javascript\n    function unescapeFormat(s) {\n        return regexEscape(s.replace('\\\\', '').replace(/\\\\(\\[)|\\\\(\\])|\\[([^\\]\\[]*)\\]|\\\\(.)/g, function (matched, p1, p2, p3, p4) {\n            return p1 || p2 || p3 || p4;\n        }));\n    }\n\n    function regexEscape(s) {\n        return s.replace(/[-\\/\\\\^$*+?.()|[\\]{}]/g, '\\\\$&');\n    }\n\n    var tokens = {};\n\n    function addParseToken (token, callback) {\n        var i, func = callback;\n        if (typeof token === 'string') {\n            token = [token];\n        }\n        if (isNumber(callback)) {\n            func = function (input, array) {\n                array[callback] = toInt(input);\n            };\n        }\n        for (i = 0; i < token.length; i++) {\n            tokens[token[i]] = func;\n        }\n    }\n\n    function addWeekParseToken (token, callback) {\n        addParseToken(token, function (input, array, config, token) {\n            config._w = config._w || {};\n            callback(input, config._w, config, token);\n        });\n    }\n\n    function addTimeToArrayFromToken(token, input, config) {\n        if (input != null && hasOwnProp(tokens, token)) {\n            tokens[token](input, config._a, config, token);\n        }\n    }\n\n    var YEAR = 0;\n    var MONTH = 1;\n    var DATE = 2;\n    var HOUR = 3;\n    var MINUTE = 4;\n    var SECOND = 5;\n    var MILLISECOND = 6;\n    var WEEK = 7;\n    var WEEKDAY = 8;\n\n    var indexOf;\n\n    if (Array.prototype.indexOf) {\n        indexOf = Array.prototype.indexOf;\n    } else {\n        indexOf = function (o) {\n            // I know\n            var i;\n            for (i = 0; i < this.length; ++i) {\n                if (this[i] === o) {\n                    return i;\n                }\n            }\n            return -1;\n        };\n    }\n\n    var indexOf$1 = indexOf;\n\n    function daysInMonth(year, month) {\n        return new Date(Date.UTC(year, month + 1, 0)).getUTCDate();\n    }\n\n    // FORMATTING\n\n    addFormatToken('M', ['MM', 2], 'Mo', function () {\n        return this.month() + 1;\n    });\n\n    addFormatToken('MMM', 0, 0, function (format) {\n        return this.localeData().monthsShort(this, format);\n    });\n\n    addFormatToken('MMMM', 0, 0, function (format) {\n        return this.localeData().months(this, format);\n    });\n\n    // ALIASES\n\n    addUnitAlias('month', 'M');\n\n    // PRIORITY\n\n    addUnitPriority('month', 8);\n\n    // PARSING\n\n    addRegexToken('M',    match1to2);\n    addRegexToken('MM',   match1to2, match2);\n    addRegexToken('MMM',  function (isStrict, locale) {\n        return locale.monthsShortRegex(isStrict);\n    });\n    addRegexToken('MMMM', function (isStrict, locale) {\n        return locale.monthsRegex(isStrict);\n    });\n\n    addParseToken(['M', 'MM'], function (input, array) {\n        array[MONTH] = toInt(input) - 1;\n    });\n\n    addParseToken(['MMM', 'MMMM'], function (input, array, config, token) {\n        var month = config._locale.monthsParse(input, token, config._strict);\n        // if we didn't find a month name, mark the date as invalid.\n        if (month != null) {\n            array[MONTH] = month;\n        } else {\n            getParsingFlags(config).invalidMonth = input;\n        }\n    });\n\n    // LOCALES\n\n    var MONTHS_IN_FORMAT = /D[oD]?(\\[[^\\[\\]]*\\]|\\s)+MMMM?/;\n    var defaultLocaleMonths = 'January_February_March_April_May_June_July_August_September_October_November_December'.split('_');\n    function localeMonths (m, format) {\n        if (!m) {\n            return this._months;\n        }\n        return isArray(this._months) ? this._months[m.month()] :\n            this._months[(this._months.isFormat || MONTHS_IN_FORMAT).test(format) ? 'format' : 'standalone'][m.month()];\n    }\n\n    var defaultLocaleMonthsShort = 'Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec'.split('_');\n    function localeMonthsShort (m, format) {\n        if (!m) {\n            return this._monthsShort;\n        }\n        return isArray(this._monthsShort) ? this._monthsShort[m.month()] :\n            this._monthsShort[MONTHS_IN_FORMAT.test(format) ? 'format' : 'standalone'][m.month()];\n    }\n\n    function handleStrictParse(monthName, format, strict) {\n        var i, ii, mom, llc = monthName.toLocaleLowerCase();\n        if (!this._monthsParse) {\n            // this is not used\n            this._monthsParse = [];\n            this._longMonthsParse = [];\n            this._shortMonthsParse = [];\n            for (i = 0; i < 12; ++i) {\n                mom = createUTC([2000, i]);\n                this._shortMonthsParse[i] = this.monthsShort(mom, '').toLocaleLowerCase();\n                this._longMonthsParse[i] = this.months(mom, '').toLocaleLowerCase();\n            }\n        }\n\n        if (strict) {\n            if (format === 'MMM') {\n                ii = indexOf$1.call(this._shortMonthsParse, llc);\n                return ii !== -1 ? ii : null;\n            } else {\n                ii = indexOf$1.call(this._longMonthsParse, llc);\n                return ii !== -1 ? ii : null;\n            }\n        } else {\n            if (format === 'MMM') {\n                ii = indexOf$1.call(this._shortMonthsParse, llc);\n                if (ii !== -1) {\n                    return ii;\n                }\n                ii = indexOf$1.call(this._longMonthsParse, llc);\n                return ii !== -1 ? ii : null;\n            } else {\n                ii = indexOf$1.call(this._longMonthsParse, llc);\n                if (ii !== -1) {\n                    return ii;\n                }\n                ii = indexOf$1.call(this._shortMonthsParse, llc);\n                return ii !== -1 ? ii : null;\n            }\n        }\n    }\n\n    function localeMonthsParse (monthName, format, strict) {\n        var i, mom, regex;\n\n        if (this._monthsParseExact) {\n            return handleStrictParse.call(this, monthName, format, strict);\n        }\n\n        if (!this._monthsParse) {\n            this._monthsParse = [];\n            this._longMonthsParse = [];\n            this._shortMonthsParse = [];\n        }\n\n        // TODO: add sorting\n        // Sorting makes sure if one month (or abbr) is a prefix of another\n        // see sorting in computeMonthsParse\n        for (i = 0; i < 12; i++) {\n            // make the regex if we don't have it already\n            mom = createUTC([2000, i]);\n            if (strict && !this._longMonthsParse[i]) {\n                this._longMonthsParse[i] = new RegExp('^' + this.months(mom, '').replace('.', '') + '$', 'i');\n                this._shortMonthsParse[i] = new RegExp('^' + this.monthsShort(mom, '').replace('.', '') + '$', 'i');\n            }\n            if (!strict && !this._monthsParse[i]) {\n                regex = '^' + this.months(mom, '') + '|^' + this.monthsShort(mom, '');\n                this._monthsParse[i] = new RegExp(regex.replace('.', ''), 'i');\n            }\n            // test the regex\n            if (strict && format === 'MMMM' && this._longMonthsParse[i].test(monthName)) {\n                return i;\n            } else if (strict && format === 'MMM' && this._shortMonthsParse[i].test(monthName)) {\n                return i;\n            } else if (!strict && this._monthsParse[i].test(monthName)) {\n                return i;\n            }\n        }\n    }\n\n    // MOMENTS\n\n    function setMonth (mom, value) {\n        var dayOfMonth;\n\n        if (!mom.isValid()) {\n            // No op\n            return mom;\n        }\n\n        if (typeof value === 'string') {\n            if (/^\\d+$/.test(value)) {\n                value = toInt(value);\n            } else {\n                value = mom.localeData().monthsParse(value);\n                // TODO: Another silent failure?\n                if (!isNumber(value)) {\n                    return mom;\n                }\n            }\n        }\n\n        dayOfMonth = Math.min(mom.date(), daysInMonth(mom.year(), value));\n        mom._d['set' + (mom._isUTC ? 'UTC' : '') + 'Month'](value, dayOfMonth);\n        return mom;\n    }\n\n    function getSetMonth (value) {\n        if (value != null) {\n            setMonth(this, value);\n            hooks.updateOffset(this, true);\n            return this;\n        } else {\n            return get(this, 'Month');\n        }\n    }\n\n    function getDaysInMonth () {\n        return daysInMonth(this.year(), this.month());\n    }\n\n    var defaultMonthsShortRegex = matchWord;\n    function monthsShortRegex (isStrict) {\n        if (this._monthsParseExact) {\n            if (!hasOwnProp(this, '_monthsRegex')) {\n                computeMonthsParse.call(this);\n            }\n            if (isStrict) {\n                return this._monthsShortStrictRegex;\n            } else {\n                return this._monthsShortRegex;\n            }\n        } else {\n            if (!hasOwnProp(this, '_monthsShortRegex')) {\n                this._monthsShortRegex = defaultMonthsShortRegex;\n            }\n            return this._monthsShortStrictRegex && isStrict ?\n                this._monthsShortStrictRegex : this._monthsShortRegex;\n        }\n    }\n\n    var defaultMonthsRegex = matchWord;\n    function monthsRegex (isStrict) {\n        if (this._monthsParseExact) {\n            if (!hasOwnProp(this, '_monthsRegex')) {\n                computeMonthsParse.call(this);\n            }\n            if (isStrict) {\n                return this._monthsStrictRegex;\n            } else {\n                return this._monthsRegex;\n            }\n        } else {\n            if (!hasOwnProp(this, '_monthsRegex')) {\n                this._monthsRegex = defaultMonthsRegex;\n            }\n            return this._monthsStrictRegex && isStrict ?\n                this._monthsStrictRegex : this._monthsRegex;\n        }\n    }\n\n    function computeMonthsParse () {\n        function cmpLenRev(a, b) {\n            return b.length - a.length;\n        }\n\n        var shortPieces = [], longPieces = [], mixedPieces = [],\n            i, mom;\n        for (i = 0; i < 12; i++) {\n            // make the regex if we don't have it already\n            mom = createUTC([2000, i]);\n            shortPieces.push(this.monthsShort(mom, ''));\n            longPieces.push(this.months(mom, ''));\n            mixedPieces.push(this.months(mom, ''));\n            mixedPieces.push(this.monthsShort(mom, ''));\n        }\n        // Sorting makes sure if one month (or abbr) is a prefix of another it\n        // will match the longer piece.\n        shortPieces.sort(cmpLenRev);\n        longPieces.sort(cmpLenRev);\n        mixedPieces.sort(cmpLenRev);\n        for (i = 0; i < 12; i++) {\n            shortPieces[i] = regexEscape(shortPieces[i]);\n            longPieces[i] = regexEscape(longPieces[i]);\n        }\n        for (i = 0; i < 24; i++) {\n            mixedPieces[i] = regexEscape(mixedPieces[i]);\n        }\n\n        this._monthsRegex = new RegExp('^(' + mixedPieces.join('|') + ')', 'i');\n        this._monthsShortRegex = this._monthsRegex;\n        this._monthsStrictRegex = new RegExp('^(' + longPieces.join('|') + ')', 'i');\n        this._monthsShortStrictRegex = new RegExp('^(' + shortPieces.join('|') + ')', 'i');\n    }\n\n    // FORMATTING\n\n    addFormatToken('Y', 0, 0, function () {\n        var y = this.year();\n        return y <= 9999 ? '' + y : '+' + y;\n    });\n\n    addFormatToken(0, ['YY', 2], 0, function () {\n        return this.year() % 100;\n    });\n\n    addFormatToken(0, ['YYYY',   4],       0, 'year');\n    addFormatToken(0, ['YYYYY',  5],       0, 'year');\n    addFormatToken(0, ['YYYYYY', 6, true], 0, 'year');\n\n    // ALIASES\n\n    addUnitAlias('year', 'y');\n\n    // PRIORITIES\n\n    addUnitPriority('year', 1);\n\n    // PARSING\n\n    addRegexToken('Y',      matchSigned);\n    addRegexToken('YY',     match1to2, match2);\n    addRegexToken('YYYY',   match1to4, match4);\n    addRegexToken('YYYYY',  match1to6, match6);\n    addRegexToken('YYYYYY', match1to6, match6);\n\n    addParseToken(['YYYYY', 'YYYYYY'], YEAR);\n    addParseToken('YYYY', function (input, array) {\n        array[YEAR] = input.length === 2 ? hooks.parseTwoDigitYear(input) : toInt(input);\n    });\n    addParseToken('YY', function (input, array) {\n        array[YEAR] = hooks.parseTwoDigitYear(input);\n    });\n    addParseToken('Y', function (input, array) {\n        array[YEAR] = parseInt(input, 10);\n    });\n\n    // HELPERS\n\n    function daysInYear(year) {\n        return isLeapYear(year) ? 366 : 365;\n    }\n\n    function isLeapYear(year) {\n        return (year % 4 === 0 && year % 100 !== 0) || year % 400 === 0;\n    }\n\n    // HOOKS\n\n    hooks.parseTwoDigitYear = function (input) {\n        return toInt(input) + (toInt(input) > 68 ? 1900 : 2000);\n    };\n\n    // MOMENTS\n\n    var getSetYear = makeGetSet('FullYear', true);\n\n    function getIsLeapYear () {\n        return isLeapYear(this.year());\n    }\n\n    function createDate (y, m, d, h, M, s, ms) {\n        //can't just apply() to create a date:\n        //http://stackoverflow.com/questions/181348/instantiating-a-javascript-object-by-calling-prototype-constructor-apply\n        var date = new Date(y, m, d, h, M, s, ms);\n\n        //the date constructor remaps years 0-99 to 1900-1999\n        if (y < 100 && y >= 0 && isFinite(date.getFullYear())) {\n            date.setFullYear(y);\n        }\n        return date;\n    }\n\n    function createUTCDate (y) {\n        var date = new Date(Date.UTC.apply(null, arguments));\n\n        //the Date.UTC function remaps years 0-99 to 1900-1999\n        if (y < 100 && y >= 0 && isFinite(date.getUTCFullYear())) {\n            date.setUTCFullYear(y);\n        }\n        return date;\n    }\n\n    // start-of-first-week - start-of-year\n    function firstWeekOffset(year, dow, doy) {\n        var // first-week day -- which january is always in the first week (4 for iso, 1 for other)\n            fwd = 7 + dow - doy,\n            // first-week day local weekday -- which local weekday is fwd\n            fwdlw = (7 + createUTCDate(year, 0, fwd).getUTCDay() - dow) % 7;\n\n        return -fwdlw + fwd - 1;\n    }\n\n    //http://en.wikipedia.org/wiki/ISO_week_date#Calculating_a_date_given_the_year.2C_week_number_and_weekday\n    function dayOfYearFromWeeks(year, week, weekday, dow, doy) {\n        var localWeekday = (7 + weekday - dow) % 7,\n            weekOffset = firstWeekOffset(year, dow, doy),\n            dayOfYear = 1 + 7 * (week - 1) + localWeekday + weekOffset,\n            resYear, resDayOfYear;\n\n        if (dayOfYear <= 0) {\n            resYear = year - 1;\n            resDayOfYear = daysInYear(resYear) + dayOfYear;\n        } else if (dayOfYear > daysInYear(year)) {\n            resYear = year + 1;\n            resDayOfYear = dayOfYear - daysInYear(year);\n        } else {\n            resYear = year;\n            resDayOfYear = dayOfYear;\n        }\n\n        return {\n            year: resYear,\n            dayOfYear: resDayOfYear\n        };\n    }\n\n    function weekOfYear(mom, dow, doy) {\n        var weekOffset = firstWeekOffset(mom.year(), dow, doy),\n            week = Math.floor((mom.dayOfYear() - weekOffset - 1) / 7) + 1,\n            resWeek, resYear;\n\n        if (week < 1) {\n            resYear = mom.year() - 1;\n            resWeek = week + weeksInYear(resYear, dow, doy);\n        } else if (week > weeksInYear(mom.year(), dow, doy)) {\n            resWeek = week - weeksInYear(mom.year(), dow, doy);\n            resYear = mom.year() + 1;\n        } else {\n            resYear = mom.year();\n            resWeek = week;\n        }\n\n        return {\n            week: resWeek,\n            year: resYear\n        };\n    }\n\n    function weeksInYear(year, dow, doy) {\n        var weekOffset = firstWeekOffset(year, dow, doy),\n            weekOffsetNext = firstWeekOffset(year + 1, dow, doy);\n        return (daysInYear(year) - weekOffset + weekOffsetNext) / 7;\n    }\n\n    // FORMATTING\n\n    addFormatToken('w', ['ww', 2], 'wo', 'week');\n    addFormatToken('W', ['WW', 2], 'Wo', 'isoWeek');\n\n    // ALIASES\n\n    addUnitAlias('week', 'w');\n    addUnitAlias('isoWeek', 'W');\n\n    // PRIORITIES\n\n    addUnitPriority('week', 5);\n    addUnitPriority('isoWeek', 5);\n\n    // PARSING\n\n    addRegexToken('w',  match1to2);\n    addRegexToken('ww', match1to2, match2);\n    addRegexToken('W',  match1to2);\n    addRegexToken('WW', match1to2, match2);\n\n    addWeekParseToken(['w', 'ww', 'W', 'WW'], function (input, week, config, token) {\n        week[token.substr(0, 1)] = toInt(input);\n    });\n\n    // HELPERS\n\n    // LOCALES\n\n    function localeWeek (mom) {\n        return weekOfYear(mom, this._week.dow, this._week.doy).week;\n    }\n\n    var defaultLocaleWeek = {\n        dow : 0, // Sunday is the first day of the week.\n        doy : 6  // The week that contains Jan 1st is the first week of the year.\n    };\n\n    function localeFirstDayOfWeek () {\n        return this._week.dow;\n    }\n\n    function localeFirstDayOfYear () {\n        return this._week.doy;\n    }\n\n    // MOMENTS\n\n    function getSetWeek (input) {\n        var week = this.localeData().week(this);\n        return input == null ? week : this.add((input - week) * 7, 'd');\n    }\n\n    function getSetISOWeek (input) {\n        var week = weekOfYear(this, 1, 4).week;\n        return input == null ? week : this.add((input - week) * 7, 'd');\n    }\n\n    // FORMATTING\n\n    addFormatToken('d', 0, 'do', 'day');\n\n    addFormatToken('dd', 0, 0, function (format) {\n        return this.localeData().weekdaysMin(this, format);\n    });\n\n    addFormatToken('ddd', 0, 0, function (format) {\n        return this.localeData().weekdaysShort(this, format);\n    });\n\n    addFormatToken('dddd', 0, 0, function (format) {\n        return this.localeData().weekdays(this, format);\n    });\n\n    addFormatToken('e', 0, 0, 'weekday');\n    addFormatToken('E', 0, 0, 'isoWeekday');\n\n    // ALIASES\n\n    addUnitAlias('day', 'd');\n    addUnitAlias('weekday', 'e');\n    addUnitAlias('isoWeekday', 'E');\n\n    // PRIORITY\n    addUnitPriority('day', 11);\n    addUnitPriority('weekday', 11);\n    addUnitPriority('isoWeekday', 11);\n\n    // PARSING\n\n    addRegexToken('d',    match1to2);\n    addRegexToken('e',    match1to2);\n    addRegexToken('E',    match1to2);\n    addRegexToken('dd',   function (isStrict, locale) {\n        return locale.weekdaysMinRegex(isStrict);\n    });\n    addRegexToken('ddd',   function (isStrict, locale) {\n        return locale.weekdaysShortRegex(isStrict);\n    });\n    addRegexToken('dddd',   function (isStrict, locale) {\n        return locale.weekdaysRegex(isStrict);\n    });\n\n    addWeekParseToken(['dd', 'ddd', 'dddd'], function (input, week, config, token) {\n        var weekday = config._locale.weekdaysParse(input, token, config._strict);\n        // if we didn't get a weekday name, mark the date as invalid\n        if (weekday != null) {\n            week.d = weekday;\n        } else {\n            getParsingFlags(config).invalidWeekday = input;\n        }\n    });\n\n    addWeekParseToken(['d', 'e', 'E'], function (input, week, config, token) {\n        week[token] = toInt(input);\n    });\n\n    // HELPERS\n\n    function parseWeekday(input, locale) {\n        if (typeof input !== 'string') {\n            return input;\n        }\n\n        if (!isNaN(input)) {\n            return parseInt(input, 10);\n        }\n\n        input = locale.weekdaysParse(input);\n        if (typeof input === 'number') {\n            return input;\n        }\n\n        return null;\n    }\n\n    function parseIsoWeekday(input, locale) {\n        if (typeof input === 'string') {\n            return locale.weekdaysParse(input) % 7 || 7;\n        }\n        return isNaN(input) ? null : input;\n    }\n\n    // LOCALES\n\n    var defaultLocaleWeekdays = 'Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday'.split('_');\n    function localeWeekdays (m, format) {\n        if (!m) {\n            return this._weekdays;\n        }\n        return isArray(this._weekdays) ? this._weekdays[m.day()] :\n            this._weekdays[this._weekdays.isFormat.test(format) ? 'format' : 'standalone'][m.day()];\n    }\n\n    var defaultLocaleWeekdaysShort = 'Sun_Mon_Tue_Wed_Thu_Fri_Sat'.split('_');\n    function localeWeekdaysShort (m) {\n        return (m) ? this._weekdaysShort[m.day()] : this._weekdaysShort;\n    }\n\n    var defaultLocaleWeekdaysMin = 'Su_Mo_Tu_We_Th_Fr_Sa'.split('_');\n    function localeWeekdaysMin (m) {\n        return (m) ? this._weekdaysMin[m.day()] : this._weekdaysMin;\n    }\n\n    function handleStrictParse$1(weekdayName, format, strict) {\n        var i, ii, mom, llc = weekdayName.toLocaleLowerCase();\n        if (!this._weekdaysParse) {\n            this._weekdaysParse = [];\n            this._shortWeekdaysParse = [];\n            this._minWeekdaysParse = [];\n\n            for (i = 0; i < 7; ++i) {\n                mom = createUTC([2000, 1]).day(i);\n                this._minWeekdaysParse[i] = this.weekdaysMin(mom, '').toLocaleLowerCase();\n                this._shortWeekdaysParse[i] = this.weekdaysShort(mom, '').toLocaleLowerCase();\n                this._weekdaysParse[i] = this.weekdays(mom, '').toLocaleLowerCase();\n            }\n        }\n\n        if (strict) {\n            if (format === 'dddd') {\n                ii = indexOf$1.call(this._weekdaysParse, llc);\n                return ii !== -1 ? ii : null;\n            } else if (format === 'ddd') {\n                ii = indexOf$1.call(this._shortWeekdaysParse, llc);\n                return ii !== -1 ? ii : null;\n            } else {\n                ii = indexOf$1.call(this._minWeekdaysParse, llc);\n                return ii !== -1 ? ii : null;\n            }\n        } else {\n            if (format === 'dddd') {\n                ii = indexOf$1.call(this._weekdaysParse, llc);\n                if (ii !== -1) {\n                    return ii;\n                }\n                ii = indexOf$1.call(this._shortWeekdaysParse, llc);\n                if (ii !== -1) {\n                    return ii;\n                }\n                ii = indexOf$1.call(this._minWeekdaysParse, llc);\n                return ii !== -1 ? ii : null;\n            } else if (format === 'ddd') {\n                ii = indexOf$1.call(this._shortWeekdaysParse, llc);\n                if (ii !== -1) {\n                    return ii;\n                }\n                ii = indexOf$1.call(this._weekdaysParse, llc);\n                if (ii !== -1) {\n                    return ii;\n                }\n                ii = indexOf$1.call(this._minWeekdaysParse, llc);\n                return ii !== -1 ? ii : null;\n            } else {\n                ii = indexOf$1.call(this._minWeekdaysParse, llc);\n                if (ii !== -1) {\n                    return ii;\n                }\n                ii = indexOf$1.call(this._weekdaysParse, llc);\n                if (ii !== -1) {\n                    return ii;\n                }\n                ii = indexOf$1.call(this._shortWeekdaysParse, llc);\n                return ii !== -1 ? ii : null;\n            }\n        }\n    }\n\n    function localeWeekdaysParse (weekdayName, format, strict) {\n        var i, mom, regex;\n\n        if (this._weekdaysParseExact) {\n            return handleStrictParse$1.call(this, weekdayName, format, strict);\n        }\n\n        if (!this._weekdaysParse) {\n            this._weekdaysParse = [];\n            this._minWeekdaysParse = [];\n            this._shortWeekdaysParse = [];\n            this._fullWeekdaysParse = [];\n        }\n\n        for (i = 0; i < 7; i++) {\n            // make the regex if we don't have it already\n\n            mom = createUTC([2000, 1]).day(i);\n            if (strict && !this._fullWeekdaysParse[i]) {\n                this._fullWeekdaysParse[i] = new RegExp('^' + this.weekdays(mom, '').replace('.', '\\.?') + '$', 'i');\n                this._shortWeekdaysParse[i] = new RegExp('^' + this.weekdaysShort(mom, '').replace('.', '\\.?') + '$', 'i');\n                this._minWeekdaysParse[i] = new RegExp('^' + this.weekdaysMin(mom, '').replace('.', '\\.?') + '$', 'i');\n            }\n            if (!this._weekdaysParse[i]) {\n                regex = '^' + this.weekdays(mom, '') + '|^' + this.weekdaysShort(mom, '') + '|^' + this.weekdaysMin(mom, '');\n                this._weekdaysParse[i] = new RegExp(regex.replace('.', ''), 'i');\n            }\n            // test the regex\n            if (strict && format === 'dddd' && this._fullWeekdaysParse[i].test(weekdayName)) {\n                return i;\n            } else if (strict && format === 'ddd' && this._shortWeekdaysParse[i].test(weekdayName)) {\n                return i;\n            } else if (strict && format === 'dd' && this._minWeekdaysParse[i].test(weekdayName)) {\n                return i;\n            } else if (!strict && this._weekdaysParse[i].test(weekdayName)) {\n                return i;\n            }\n        }\n    }\n\n    // MOMENTS\n\n    function getSetDayOfWeek (input) {\n        if (!this.isValid()) {\n            return input != null ? this : NaN;\n        }\n        var day = this._isUTC ? this._d.getUTCDay() : this._d.getDay();\n        if (input != null) {\n            input = parseWeekday(input, this.localeData());\n            return this.add(input - day, 'd');\n        } else {\n            return day;\n        }\n    }\n\n    function getSetLocaleDayOfWeek (input) {\n        if (!this.isValid()) {\n            return input != null ? this : NaN;\n        }\n        var weekday = (this.day() + 7 - this.localeData()._week.dow) % 7;\n        return input == null ? weekday : this.add(input - weekday, 'd');\n    }\n\n    function getSetISODayOfWeek (input) {\n        if (!this.isValid()) {\n            return input != null ? this : NaN;\n        }\n\n        // behaves the same as moment#day except\n        // as a getter, returns 7 instead of 0 (1-7 range instead of 0-6)\n        // as a setter, sunday should belong to the previous week.\n\n        if (input != null) {\n            var weekday = parseIsoWeekday(input, this.localeData());\n            return this.day(this.day() % 7 ? weekday : weekday - 7);\n        } else {\n            return this.day() || 7;\n        }\n    }\n\n    var defaultWeekdaysRegex = matchWord;\n    function weekdaysRegex (isStrict) {\n        if (this._weekdaysParseExact) {\n            if (!hasOwnProp(this, '_weekdaysRegex')) {\n                computeWeekdaysParse.call(this);\n            }\n            if (isStrict) {\n                return this._weekdaysStrictRegex;\n            } else {\n                return this._weekdaysRegex;\n            }\n        } else {\n            if (!hasOwnProp(this, '_weekdaysRegex')) {\n                this._weekdaysRegex = defaultWeekdaysRegex;\n            }\n            return this._weekdaysStrictRegex && isStrict ?\n                this._weekdaysStrictRegex : this._weekdaysRegex;\n        }\n    }\n\n    var defaultWeekdaysShortRegex = matchWord;\n    function weekdaysShortRegex (isStrict) {\n        if (this._weekdaysParseExact) {\n            if (!hasOwnProp(this, '_weekdaysRegex')) {\n                computeWeekdaysParse.call(this);\n            }\n            if (isStrict) {\n                return this._weekdaysShortStrictRegex;\n            } else {\n                return this._weekdaysShortRegex;\n            }\n        } else {\n            if (!hasOwnProp(this, '_weekdaysShortRegex')) {\n                this._weekdaysShortRegex = defaultWeekdaysShortRegex;\n            }\n            return this._weekdaysShortStrictRegex && isStrict ?\n                this._weekdaysShortStrictRegex : this._weekdaysShortRegex;\n        }\n    }\n\n    var defaultWeekdaysMinRegex = matchWord;\n    function weekdaysMinRegex (isStrict) {\n        if (this._weekdaysParseExact) {\n            if (!hasOwnProp(this, '_weekdaysRegex')) {\n                computeWeekdaysParse.call(this);\n            }\n            if (isStrict) {\n                return this._weekdaysMinStrictRegex;\n            } else {\n                return this._weekdaysMinRegex;\n            }\n        } else {\n            if (!hasOwnProp(this, '_weekdaysMinRegex')) {\n                this._weekdaysMinRegex = defaultWeekdaysMinRegex;\n            }\n            return this._weekdaysMinStrictRegex && isStrict ?\n                this._weekdaysMinStrictRegex : this._weekdaysMinRegex;\n        }\n    }\n\n\n    function computeWeekdaysParse () {\n        function cmpLenRev(a, b) {\n            return b.length - a.length;\n        }\n\n        var minPieces = [], shortPieces = [], longPieces = [], mixedPieces = [],\n            i, mom, minp, shortp, longp;\n        for (i = 0; i < 7; i++) {\n            // make the regex if we don't have it already\n            mom = createUTC([2000, 1]).day(i);\n            minp = this.weekdaysMin(mom, '');\n            shortp = this.weekdaysShort(mom, '');\n            longp = this.weekdays(mom, '');\n            minPieces.push(minp);\n            shortPieces.push(shortp);\n            longPieces.push(longp);\n            mixedPieces.push(minp);\n            mixedPieces.push(shortp);\n            mixedPieces.push(longp);\n        }\n        // Sorting makes sure if one weekday (or abbr) is a prefix of another it\n        // will match the longer piece.\n        minPieces.sort(cmpLenRev);\n        shortPieces.sort(cmpLenRev);\n        longPieces.sort(cmpLenRev);\n        mixedPieces.sort(cmpLenRev);\n        for (i = 0; i < 7; i++) {\n            shortPieces[i] = regexEscape(shortPieces[i]);\n            longPieces[i] = regexEscape(longPieces[i]);\n            mixedPieces[i] = regexEscape(mixedPieces[i]);\n        }\n\n        this._weekdaysRegex = new RegExp('^(' + mixedPieces.join('|') + ')', 'i');\n        this._weekdaysShortRegex = this._weekdaysRegex;\n        this._weekdaysMinRegex = this._weekdaysRegex;\n\n        this._weekdaysStrictRegex = new RegExp('^(' + longPieces.join('|') + ')', 'i');\n        this._weekdaysShortStrictRegex = new RegExp('^(' + shortPieces.join('|') + ')', 'i');\n        this._weekdaysMinStrictRegex = new RegExp('^(' + minPieces.join('|') + ')', 'i');\n    }\n\n    // FORMATTING\n\n    function hFormat() {\n        return this.hours() % 12 || 12;\n    }\n\n    function kFormat() {\n        return this.hours() || 24;\n    }\n\n    addFormatToken('H', ['HH', 2], 0, 'hour');\n    addFormatToken('h', ['hh', 2], 0, hFormat);\n    addFormatToken('k', ['kk', 2], 0, kFormat);\n\n    addFormatToken('hmm', 0, 0, function () {\n        return '' + hFormat.apply(this) + zeroFill(this.minutes(), 2);\n    });\n\n    addFormatToken('hmmss', 0, 0, function () {\n        return '' + hFormat.apply(this) + zeroFill(this.minutes(), 2) +\n            zeroFill(this.seconds(), 2);\n    });\n\n    addFormatToken('Hmm', 0, 0, function () {\n        return '' + this.hours() + zeroFill(this.minutes(), 2);\n    });\n\n    addFormatToken('Hmmss', 0, 0, function () {\n        return '' + this.hours() + zeroFill(this.minutes(), 2) +\n            zeroFill(this.seconds(), 2);\n    });\n\n    function meridiem (token, lowercase) {\n        addFormatToken(token, 0, 0, function () {\n            return this.localeData().meridiem(this.hours(), this.minutes(), lowercase);\n        });\n    }\n\n    meridiem('a', true);\n    meridiem('A', false);\n\n    // ALIASES\n\n    addUnitAlias('hour', 'h');\n\n    // PRIORITY\n    addUnitPriority('hour', 13);\n\n    // PARSING\n\n    function matchMeridiem (isStrict, locale) {\n        return locale._meridiemParse;\n    }\n\n    addRegexToken('a',  matchMeridiem);\n    addRegexToken('A',  matchMeridiem);\n    addRegexToken('H',  match1to2);\n    addRegexToken('h',  match1to2);\n    addRegexToken('HH', match1to2, match2);\n    addRegexToken('hh', match1to2, match2);\n\n    addRegexToken('hmm', match3to4);\n    addRegexToken('hmmss', match5to6);\n    addRegexToken('Hmm', match3to4);\n    addRegexToken('Hmmss', match5to6);\n\n    addParseToken(['H', 'HH'], HOUR);\n    addParseToken(['a', 'A'], function (input, array, config) {\n        config._isPm = config._locale.isPM(input);\n        config._meridiem = input;\n    });\n    addParseToken(['h', 'hh'], function (input, array, config) {\n        array[HOUR] = toInt(input);\n        getParsingFlags(config).bigHour = true;\n    });\n    addParseToken('hmm', function (input, array, config) {\n        var pos = input.length - 2;\n        array[HOUR] = toInt(input.substr(0, pos));\n        array[MINUTE] = toInt(input.substr(pos));\n        getParsingFlags(config).bigHour = true;\n    });\n    addParseToken('hmmss', function (input, array, config) {\n        var pos1 = input.length - 4;\n        var pos2 = input.length - 2;\n        array[HOUR] = toInt(input.substr(0, pos1));\n        array[MINUTE] = toInt(input.substr(pos1, 2));\n        array[SECOND] = toInt(input.substr(pos2));\n        getParsingFlags(config).bigHour = true;\n    });\n    addParseToken('Hmm', function (input, array, config) {\n        var pos = input.length - 2;\n        array[HOUR] = toInt(input.substr(0, pos));\n        array[MINUTE] = toInt(input.substr(pos));\n    });\n    addParseToken('Hmmss', function (input, array, config) {\n        var pos1 = input.length - 4;\n        var pos2 = input.length - 2;\n        array[HOUR] = toInt(input.substr(0, pos1));\n        array[MINUTE] = toInt(input.substr(pos1, 2));\n        array[SECOND] = toInt(input.substr(pos2));\n    });\n\n    // LOCALES\n\n    function localeIsPM (input) {\n        // IE8 Quirks Mode & IE7 Standards Mode do not allow accessing strings like arrays\n        // Using charAt should be more compatible.\n        return ((input + '').toLowerCase().charAt(0) === 'p');\n    }\n\n    var defaultLocaleMeridiemParse = /[ap]\\.?m?\\.?/i;\n    function localeMeridiem (hours, minutes, isLower) {\n        if (hours > 11) {\n            return isLower ? 'pm' : 'PM';\n        } else {\n            return isLower ? 'am' : 'AM';\n        }\n    }\n\n\n    // MOMENTS\n\n    // Setting the hour should keep the time, because the user explicitly\n    // specified which hour he wants. So trying to maintain the same hour (in\n    // a new timezone) makes sense. Adding/subtracting hours does not follow\n    // this rule.\n    var getSetHour = makeGetSet('Hours', true);\n\n    // months\n    // week\n    // weekdays\n    // meridiem\n    var baseConfig = {\n        calendar: defaultCalendar,\n        longDateFormat: defaultLongDateFormat,\n        invalidDate: defaultInvalidDate,\n        ordinal: defaultOrdinal,\n        ordinalParse: defaultOrdinalParse,\n        relativeTime: defaultRelativeTime,\n\n        months: defaultLocaleMonths,\n        monthsShort: defaultLocaleMonthsShort,\n\n        week: defaultLocaleWeek,\n\n        weekdays: defaultLocaleWeekdays,\n        weekdaysMin: defaultLocaleWeekdaysMin,\n        weekdaysShort: defaultLocaleWeekdaysShort,\n\n        meridiemParse: defaultLocaleMeridiemParse\n    };\n\n    // internal storage for locale config files\n    var locales = {};\n    var localeFamilies = {};\n    var globalLocale;\n\n    function normalizeLocale(key) {\n        return key ? key.toLowerCase().replace('_', '-') : key;\n    }\n\n    // pick the locale from the array\n    // try ['en-au', 'en-gb'] as 'en-au', 'en-gb', 'en', as in move through the list trying each\n    // substring from most specific to least, but move to the next array item if it's a more specific variant than the current root\n    function chooseLocale(names) {\n        var i = 0, j, next, locale, split;\n\n        while (i < names.length) {\n            split = normalizeLocale(names[i]).split('-');\n            j = split.length;\n            next = normalizeLocale(names[i + 1]);\n            next = next ? next.split('-') : null;\n            while (j > 0) {\n                locale = loadLocale(split.slice(0, j).join('-'));\n                if (locale) {\n                    return locale;\n                }\n                if (next && next.length >= j && compareArrays(split, next, true) >= j - 1) {\n                    //the next array item is better than a shallower substring of this one\n                    break;\n                }\n                j--;\n            }\n            i++;\n        }\n        return null;\n    }\n\n    function loadLocale(name) {\n        var oldLocale = null;\n        // TODO: Find a better way to register and load all the locales in Node\n        if (!locales[name] && (typeof module !== 'undefined') &&\n                module && module.exports) {\n            try {\n                oldLocale = globalLocale._abbr;\n                require('/alloy/moment/lang/' + name);\n                // because defineLocale currently also sets the global locale, we\n                // want to undo that for lazy loaded locales\n                getSetGlobalLocale(oldLocale);\n            } catch (e) { }\n        }\n        return locales[name];\n    }\n\n    // This function will load locale and then set the global locale.  If\n    // no arguments are passed in, it will simply return the current global\n    // locale key.\n    function getSetGlobalLocale (key, values) {\n        var data;\n        if (key) {\n            if (isUndefined(values)) {\n                data = getLocale(key);\n            }\n            else {\n                data = defineLocale(key, values);\n            }\n\n            if (data) {\n                // moment.duration._locale = moment._locale = data;\n                globalLocale = data;\n            }\n        }\n\n        return globalLocale._abbr;\n    }\n\n    function defineLocale (name, config) {\n        if (config !== null) {\n            var parentConfig = baseConfig;\n            config.abbr = name;\n            if (locales[name] != null) {\n                deprecateSimple('defineLocaleOverride',\n                        'use moment.updateLocale(localeName, config) to change ' +\n                        'an existing locale. moment.defineLocale(localeName, ' +\n                        'config) should only be used for creating a new locale ' +\n                        'See http://momentjs.com/guides/#/warnings/define-locale/ for more info.');\n                parentConfig = locales[name]._config;\n            } else if (config.parentLocale != null) {\n                if (locales[config.parentLocale] != null) {\n                    parentConfig = locales[config.parentLocale]._config;\n                } else {\n                    if (!localeFamilies[config.parentLocale]) {\n                        localeFamilies[config.parentLocale] = [];\n                    }\n                    localeFamilies[config.parentLocale].push({\n                        name: name,\n                        config: config\n                    });\n                    return null;\n                }\n            }\n            locales[name] = new Locale(mergeConfigs(parentConfig, config));\n\n            if (localeFamilies[name]) {\n                localeFamilies[name].forEach(function (x) {\n                    defineLocale(x.name, x.config);\n                });\n            }\n\n            // backwards compat for now: also set the locale\n            // make sure we set the locale AFTER all child locales have been\n            // created, so we won't end up with the child locale set.\n            getSetGlobalLocale(name);\n\n\n            return locales[name];\n        } else {\n            // useful for testing\n            delete locales[name];\n            return null;\n        }\n    }\n\n    function updateLocale(name, config) {\n        if (config != null) {\n            var locale, parentConfig = baseConfig;\n            // MERGE\n            if (locales[name] != null) {\n                parentConfig = locales[name]._config;\n            }\n            config = mergeConfigs(parentConfig, config);\n            locale = new Locale(config);\n            locale.parentLocale = locales[name];\n            locales[name] = locale;\n\n            // backwards compat for now: also set the locale\n            getSetGlobalLocale(name);\n        } else {\n            // pass null for config to unupdate, useful for tests\n            if (locales[name] != null) {\n                if (locales[name].parentLocale != null) {\n                    locales[name] = locales[name].parentLocale;\n                } else if (locales[name] != null) {\n                    delete locales[name];\n                }\n            }\n        }\n        return locales[name];\n    }\n\n    // returns locale data\n    function getLocale (key) {\n        var locale;\n\n        if (key && key._locale && key._locale._abbr) {\n            key = key._locale._abbr;\n        }\n\n        if (!key) {\n            return globalLocale;\n        }\n\n        if (!isArray(key)) {\n            //short-circuit everything else\n            locale = loadLocale(key);\n            if (locale) {\n                return locale;\n            }\n            key = [key];\n        }\n\n        return chooseLocale(key);\n    }\n\n    function listLocales() {\n        return keys$1(locales);\n    }\n\n    function checkOverflow (m) {\n        var overflow;\n        var a = m._a;\n\n        if (a && getParsingFlags(m).overflow === -2) {\n            overflow =\n                a[MONTH]       < 0 || a[MONTH]       > 11  ? MONTH :\n                a[DATE]        < 1 || a[DATE]        > daysInMonth(a[YEAR], a[MONTH]) ? DATE :\n                a[HOUR]        < 0 || a[HOUR]        > 24 || (a[HOUR] === 24 && (a[MINUTE] !== 0 || a[SECOND] !== 0 || a[MILLISECOND] !== 0)) ? HOUR :\n                a[MINUTE]      < 0 || a[MINUTE]      > 59  ? MINUTE :\n                a[SECOND]      < 0 || a[SECOND]      > 59  ? SECOND :\n                a[MILLISECOND] < 0 || a[MILLISECOND] > 999 ? MILLISECOND :\n                -1;\n\n            if (getParsingFlags(m)._overflowDayOfYear && (overflow < YEAR || overflow > DATE)) {\n                overflow = DATE;\n            }\n            if (getParsingFlags(m)._overflowWeeks && overflow === -1) {\n                overflow = WEEK;\n            }\n            if (getParsingFlags(m)._overflowWeekday && overflow === -1) {\n                overflow = WEEKDAY;\n            }\n\n            getParsingFlags(m).overflow = overflow;\n        }\n\n        return m;\n    }\n\n    // iso 8601 regex\n    // 0000-00-00 0000-W00 or 0000-W00-0 + T + 00 or 00:00 or 00:00:00 or 00:00:00.000 + +00:00 or +0000 or +00)\n    var extendedIsoRegex = /^\\s*((?:[+-]\\d{6}|\\d{4})-(?:\\d\\d-\\d\\d|W\\d\\d-\\d|W\\d\\d|\\d\\d\\d|\\d\\d))(?:(T| )(\\d\\d(?::\\d\\d(?::\\d\\d(?:[.,]\\d+)?)?)?)([\\+\\-]\\d\\d(?::?\\d\\d)?|\\s*Z)?)?$/;\n    var basicIsoRegex = /^\\s*((?:[+-]\\d{6}|\\d{4})(?:\\d\\d\\d\\d|W\\d\\d\\d|W\\d\\d|\\d\\d\\d|\\d\\d))(?:(T| )(\\d\\d(?:\\d\\d(?:\\d\\d(?:[.,]\\d+)?)?)?)([\\+\\-]\\d\\d(?::?\\d\\d)?|\\s*Z)?)?$/;\n\n    var tzRegex = /Z|[+-]\\d\\d(?::?\\d\\d)?/;\n\n    var isoDates = [\n        ['YYYYYY-MM-DD', /[+-]\\d{6}-\\d\\d-\\d\\d/],\n        ['YYYY-MM-DD', /\\d{4}-\\d\\d-\\d\\d/],\n        ['GGGG-[W]WW-E', /\\d{4}-W\\d\\d-\\d/],\n        ['GGGG-[W]WW', /\\d{4}-W\\d\\d/, false],\n        ['YYYY-DDD', /\\d{4}-\\d{3}/],\n        ['YYYY-MM', /\\d{4}-\\d\\d/, false],\n        ['YYYYYYMMDD', /[+-]\\d{10}/],\n        ['YYYYMMDD', /\\d{8}/],\n        // YYYYMM is NOT allowed by the standard\n        ['GGGG[W]WWE', /\\d{4}W\\d{3}/],\n        ['GGGG[W]WW', /\\d{4}W\\d{2}/, false],\n        ['YYYYDDD', /\\d{7}/]\n    ];\n\n    // iso time formats and regexes\n    var isoTimes = [\n        ['HH:mm:ss.SSSS', /\\d\\d:\\d\\d:\\d\\d\\.\\d+/],\n        ['HH:mm:ss,SSSS', /\\d\\d:\\d\\d:\\d\\d,\\d+/],\n        ['HH:mm:ss', /\\d\\d:\\d\\d:\\d\\d/],\n        ['HH:mm', /\\d\\d:\\d\\d/],\n        ['HHmmss.SSSS', /\\d\\d\\d\\d\\d\\d\\.\\d+/],\n        ['HHmmss,SSSS', /\\d\\d\\d\\d\\d\\d,\\d+/],\n        ['HHmmss', /\\d\\d\\d\\d\\d\\d/],\n        ['HHmm', /\\d\\d\\d\\d/],\n        ['HH', /\\d\\d/]\n    ];\n\n    var aspNetJsonRegex = /^\\/?Date\\((\\-?\\d+)/i;\n\n    // date from iso format\n    function configFromISO(config) {\n        var i, l,\n            string = config._i,\n            match = extendedIsoRegex.exec(string) || basicIsoRegex.exec(string),\n            allowTime, dateFormat, timeFormat, tzFormat;\n\n        if (match) {\n            getParsingFlags(config).iso = true;\n\n            for (i = 0, l = isoDates.length; i < l; i++) {\n                if (isoDates[i][1].exec(match[1])) {\n                    dateFormat = isoDates[i][0];\n                    allowTime = isoDates[i][2] !== false;\n                    break;\n                }\n            }\n            if (dateFormat == null) {\n                config._isValid = false;\n                return;\n            }\n            if (match[3]) {\n                for (i = 0, l = isoTimes.length; i < l; i++) {\n                    if (isoTimes[i][1].exec(match[3])) {\n                        // match[2] should be 'T' or space\n                        timeFormat = (match[2] || ' ') + isoTimes[i][0];\n                        break;\n                    }\n                }\n                if (timeFormat == null) {\n                    config._isValid = false;\n                    return;\n                }\n            }\n            if (!allowTime && timeFormat != null) {\n                config._isValid = false;\n                return;\n            }\n            if (match[4]) {\n                if (tzRegex.exec(match[4])) {\n                    tzFormat = 'Z';\n                } else {\n                    config._isValid = false;\n                    return;\n                }\n            }\n            config._f = dateFormat + (timeFormat || '') + (tzFormat || '');\n            configFromStringAndFormat(config);\n        } else {\n            config._isValid = false;\n        }\n    }\n\n    // date from iso format or fallback\n    function configFromString(config) {\n        var matched = aspNetJsonRegex.exec(config._i);\n\n        if (matched !== null) {\n            config._d = new Date(+matched[1]);\n            return;\n        }\n\n        configFromISO(config);\n        if (config._isValid === false) {\n            delete config._isValid;\n            hooks.createFromInputFallback(config);\n        }\n    }\n\n    hooks.createFromInputFallback = deprecate(\n        'value provided is not in a recognized ISO format. moment construction falls back to js Date(), ' +\n        'which is not reliable across all browsers and versions. Non ISO date formats are ' +\n        'discouraged and will be removed in an upcoming major release. Please refer to ' +\n        'http://momentjs.com/guides/#/warnings/js-date/ for more info.',\n        function (config) {\n            config._d = new Date(config._i + (config._useUTC ? ' UTC' : ''));\n        }\n    );\n\n    // Pick the first defined of two or three arguments.\n    function defaults(a, b, c) {\n        if (a != null) {\n            return a;\n        }\n        if (b != null) {\n            return b;\n        }\n        return c;\n    }\n\n    function currentDateArray(config) {\n        // hooks is actually the exported moment object\n        var nowValue = new Date(hooks.now());\n        if (config._useUTC) {\n            return [nowValue.getUTCFullYear(), nowValue.getUTCMonth(), nowValue.getUTCDate()];\n        }\n        return [nowValue.getFullYear(), nowValue.getMonth(), nowValue.getDate()];\n    }\n\n    // convert an array to a date.\n    // the array should mirror the parameters below\n    // note: all values past the year are optional and will default to the lowest possible value.\n    // [year, month, day , hour, minute, second, millisecond]\n    function configFromArray (config) {\n        var i, date, input = [], currentDate, yearToUse;\n\n        if (config._d) {\n            return;\n        }\n\n        currentDate = currentDateArray(config);\n\n        //compute day of the year from weeks and weekdays\n        if (config._w && config._a[DATE] == null && config._a[MONTH] == null) {\n            dayOfYearFromWeekInfo(config);\n        }\n\n        //if the day of the year is set, figure out what it is\n        if (config._dayOfYear) {\n            yearToUse = defaults(config._a[YEAR], currentDate[YEAR]);\n\n            if (config._dayOfYear > daysInYear(yearToUse)) {\n                getParsingFlags(config)._overflowDayOfYear = true;\n            }\n\n            date = createUTCDate(yearToUse, 0, config._dayOfYear);\n            config._a[MONTH] = date.getUTCMonth();\n            config._a[DATE] = date.getUTCDate();\n        }\n\n        // Default to current date.\n        // * if no year, month, day of month are given, default to today\n        // * if day of month is given, default month and year\n        // * if month is given, default only year\n        // * if year is given, don't default anything\n        for (i = 0; i < 3 && config._a[i] == null; ++i) {\n            config._a[i] = input[i] = currentDate[i];\n        }\n\n        // Zero out whatever was not defaulted, including time\n        for (; i < 7; i++) {\n            config._a[i] = input[i] = (config._a[i] == null) ? (i === 2 ? 1 : 0) : config._a[i];\n        }\n\n        // Check for 24:00:00.000\n        if (config._a[HOUR] === 24 &&\n                config._a[MINUTE] === 0 &&\n                config._a[SECOND] === 0 &&\n                config._a[MILLISECOND] === 0) {\n            config._nextDay = true;\n            config._a[HOUR] = 0;\n        }\n\n        config._d = (config._useUTC ? createUTCDate : createDate).apply(null, input);\n        // Apply timezone offset from input. The actual utcOffset can be changed\n        // with parseZone.\n        if (config._tzm != null) {\n            config._d.setUTCMinutes(config._d.getUTCMinutes() - config._tzm);\n        }\n\n        if (config._nextDay) {\n            config._a[HOUR] = 24;\n        }\n    }\n\n    function dayOfYearFromWeekInfo(config) {\n        var w, weekYear, week, weekday, dow, doy, temp, weekdayOverflow;\n\n        w = config._w;\n        if (w.GG != null || w.W != null || w.E != null) {\n            dow = 1;\n            doy = 4;\n\n            // TODO: We need to take the current isoWeekYear, but that depends on\n            // how we interpret now (local, utc, fixed offset). So create\n            // a now version of current config (take local/utc/offset flags, and\n            // create now).\n            weekYear = defaults(w.GG, config._a[YEAR], weekOfYear(createLocal(), 1, 4).year);\n            week = defaults(w.W, 1);\n            weekday = defaults(w.E, 1);\n            if (weekday < 1 || weekday > 7) {\n                weekdayOverflow = true;\n            }\n        } else {\n            dow = config._locale._week.dow;\n            doy = config._locale._week.doy;\n\n            var curWeek = weekOfYear(createLocal(), dow, doy);\n\n            weekYear = defaults(w.gg, config._a[YEAR], curWeek.year);\n\n            // Default to current week.\n            week = defaults(w.w, curWeek.week);\n\n            if (w.d != null) {\n                // weekday -- low day numbers are considered next week\n                weekday = w.d;\n                if (weekday < 0 || weekday > 6) {\n                    weekdayOverflow = true;\n                }\n            } else if (w.e != null) {\n                // local weekday -- counting starts from begining of week\n                weekday = w.e + dow;\n                if (w.e < 0 || w.e > 6) {\n                    weekdayOverflow = true;\n                }\n            } else {\n                // default to begining of week\n                weekday = dow;\n            }\n        }\n        if (week < 1 || week > weeksInYear(weekYear, dow, doy)) {\n            getParsingFlags(config)._overflowWeeks = true;\n        } else if (weekdayOverflow != null) {\n            getParsingFlags(config)._overflowWeekday = true;\n        } else {\n            temp = dayOfYearFromWeeks(weekYear, week, weekday, dow, doy);\n            config._a[YEAR] = temp.year;\n            config._dayOfYear = temp.dayOfYear;\n        }\n    }\n\n    // constant that refers to the ISO standard\n    hooks.ISO_8601 = function () {};\n\n    // date from string and format string\n    function configFromStringAndFormat(config) {\n        // TODO: Move this to another part of the creation flow to prevent circular deps\n        if (config._f === hooks.ISO_8601) {\n            configFromISO(config);\n            return;\n        }\n\n        config._a = [];\n        getParsingFlags(config).empty = true;\n\n        // This array is used to make a Date, either with `new Date` or `Date.UTC`\n        var string = '' + config._i,\n            i, parsedInput, tokens, token, skipped,\n            stringLength = string.length,\n            totalParsedInputLength = 0;\n\n        tokens = expandFormat(config._f, config._locale).match(formattingTokens) || [];\n\n        for (i = 0; i < tokens.length; i++) {\n            token = tokens[i];\n            parsedInput = (string.match(getParseRegexForToken(token, config)) || [])[0];\n            // console.log('token', token, 'parsedInput', parsedInput,\n            //         'regex', getParseRegexForToken(token, config));\n            if (parsedInput) {\n                skipped = string.substr(0, string.indexOf(parsedInput));\n                if (skipped.length > 0) {\n                    getParsingFlags(config).unusedInput.push(skipped);\n                }\n                string = string.slice(string.indexOf(parsedInput) + parsedInput.length);\n                totalParsedInputLength += parsedInput.length;\n            }\n            // don't parse if it's not a known token\n            if (formatTokenFunctions[token]) {\n                if (parsedInput) {\n                    getParsingFlags(config).empty = false;\n                }\n                else {\n                    getParsingFlags(config).unusedTokens.push(token);\n                }\n                addTimeToArrayFromToken(token, parsedInput, config);\n            }\n            else if (config._strict && !parsedInput) {\n                getParsingFlags(config).unusedTokens.push(token);\n            }\n        }\n\n        // add remaining unparsed input length to the string\n        getParsingFlags(config).charsLeftOver = stringLength - totalParsedInputLength;\n        if (string.length > 0) {\n            getParsingFlags(config).unusedInput.push(string);\n        }\n\n        // clear _12h flag if hour is <= 12\n        if (config._a[HOUR] <= 12 &&\n            getParsingFlags(config).bigHour === true &&\n            config._a[HOUR] > 0) {\n            getParsingFlags(config).bigHour = undefined;\n        }\n\n        getParsingFlags(config).parsedDateParts = config._a.slice(0);\n        getParsingFlags(config).meridiem = config._meridiem;\n        // handle meridiem\n        config._a[HOUR] = meridiemFixWrap(config._locale, config._a[HOUR], config._meridiem);\n\n        configFromArray(config);\n        checkOverflow(config);\n    }\n\n\n    function meridiemFixWrap (locale, hour, meridiem) {\n        var isPm;\n\n        if (meridiem == null) {\n            // nothing to do\n            return hour;\n        }\n        if (locale.meridiemHour != null) {\n            return locale.meridiemHour(hour, meridiem);\n        } else if (locale.isPM != null) {\n            // Fallback\n            isPm = locale.isPM(meridiem);\n            if (isPm && hour < 12) {\n                hour += 12;\n            }\n            if (!isPm && hour === 12) {\n                hour = 0;\n            }\n            return hour;\n        } else {\n            // this is not supposed to happen\n            return hour;\n        }\n    }\n\n    // date from string and array of format strings\n    function configFromStringAndArray(config) {\n        var tempConfig,\n            bestMoment,\n\n            scoreToBeat,\n            i,\n            currentScore;\n\n        if (config._f.length === 0) {\n            getParsingFlags(config).invalidFormat = true;\n            config._d = new Date(NaN);\n            return;\n        }\n\n        for (i = 0; i < config._f.length; i++) {\n            currentScore = 0;\n            tempConfig = copyConfig({}, config);\n            if (config._useUTC != null) {\n                tempConfig._useUTC = config._useUTC;\n            }\n            tempConfig._f = config._f[i];\n            configFromStringAndFormat(tempConfig);\n\n            if (!isValid(tempConfig)) {\n                continue;\n            }\n\n            // if there is any input that was not parsed add a penalty for that format\n            currentScore += getParsingFlags(tempConfig).charsLeftOver;\n\n            //or tokens\n            currentScore += getParsingFlags(tempConfig).unusedTokens.length * 10;\n\n            getParsingFlags(tempConfig).score = currentScore;\n\n            if (scoreToBeat == null || currentScore < scoreToBeat) {\n                scoreToBeat = currentScore;\n                bestMoment = tempConfig;\n            }\n        }\n\n        extend(config, bestMoment || tempConfig);\n    }\n\n    function configFromObject(config) {\n        if (config._d) {\n            return;\n        }\n\n        var i = normalizeObjectUnits(config._i);\n        config._a = map([i.year, i.month, i.day || i.date, i.hour, i.minute, i.second, i.millisecond], function (obj) {\n            return obj && parseInt(obj, 10);\n        });\n\n        configFromArray(config);\n    }\n\n    function createFromConfig (config) {\n        var res = new Moment(checkOverflow(prepareConfig(config)));\n        if (res._nextDay) {\n            // Adding is smart enough around DST\n            res.add(1, 'd');\n            res._nextDay = undefined;\n        }\n\n        return res;\n    }\n\n    function prepareConfig (config) {\n        var input = config._i,\n            format = config._f;\n\n        config._locale = config._locale || getLocale(config._l);\n\n        if (input === null || (format === undefined && input === '')) {\n            return createInvalid({nullInput: true});\n        }\n\n        if (typeof input === 'string') {\n            config._i = input = config._locale.preparse(input);\n        }\n\n        if (isMoment(input)) {\n            return new Moment(checkOverflow(input));\n        } else if (isDate(input)) {\n            config._d = input;\n        } else if (isArray(format)) {\n            configFromStringAndArray(config);\n        } else if (format) {\n            configFromStringAndFormat(config);\n        }  else {\n            configFromInput(config);\n        }\n\n        if (!isValid(config)) {\n            config._d = null;\n        }\n\n        return config;\n    }\n\n    function configFromInput(config) {\n        var input = config._i;\n        if (input === undefined) {\n            config._d = new Date(hooks.now());\n        } else if (isDate(input)) {\n            config._d = new Date(input.valueOf());\n        } else if (typeof input === 'string') {\n            configFromString(config);\n        } else if (isArray(input)) {\n            config._a = map(input.slice(0), function (obj) {\n                return parseInt(obj, 10);\n            });\n            configFromArray(config);\n        } else if (typeof(input) === 'object') {\n            configFromObject(config);\n        } else if (isNumber(input)) {\n            // from milliseconds\n            config._d = new Date(input);\n        } else {\n            hooks.createFromInputFallback(config);\n        }\n    }\n\n    function createLocalOrUTC (input, format, locale, strict, isUTC) {\n        var c = {};\n\n        if (locale === true || locale === false) {\n            strict = locale;\n            locale = undefined;\n        }\n\n        if ((isObject(input) && isObjectEmpty(input)) ||\n                (isArray(input) && input.length === 0)) {\n            input = undefined;\n        }\n        // object construction must be done this way.\n        // https://github.com/moment/moment/issues/1423\n        c._isAMomentObject = true;\n        c._useUTC = c._isUTC = isUTC;\n        c._l = locale;\n        c._i = input;\n        c._f = format;\n        c._strict = strict;\n\n        return createFromConfig(c);\n    }\n\n    function createLocal (input, format, locale, strict) {\n        return createLocalOrUTC(input, format, locale, strict, false);\n    }\n\n    var prototypeMin = deprecate(\n        'moment().min is deprecated, use moment.max instead. http://momentjs.com/guides/#/warnings/min-max/',\n        function () {\n            var other = createLocal.apply(null, arguments);\n            if (this.isValid() && other.isValid()) {\n                return other < this ? this : other;\n            } else {\n                return createInvalid();\n            }\n        }\n    );\n\n    var prototypeMax = deprecate(\n        'moment().max is deprecated, use moment.min instead. http://momentjs.com/guides/#/warnings/min-max/',\n        function () {\n            var other = createLocal.apply(null, arguments);\n            if (this.isValid() && other.isValid()) {\n                return other > this ? this : other;\n            } else {\n                return createInvalid();\n            }\n        }\n    );\n\n    // Pick a moment m from moments so that m[fn](other) is true for all\n    // other. This relies on the function fn to be transitive.\n    //\n    // moments should either be an array of moment objects or an array, whose\n    // first element is an array of moment objects.\n    function pickBy(fn, moments) {\n        var res, i;\n        if (moments.length === 1 && isArray(moments[0])) {\n            moments = moments[0];\n        }\n        if (!moments.length) {\n            return createLocal();\n        }\n        res = moments[0];\n        for (i = 1; i < moments.length; ++i) {\n            if (!moments[i].isValid() || moments[i][fn](res)) {\n                res = moments[i];\n            }\n        }\n        return res;\n    }\n\n    // TODO: Use [].sort instead?\n    function min () {\n        var args = [].slice.call(arguments, 0);\n\n        return pickBy('isBefore', args);\n    }\n\n    function max () {\n        var args = [].slice.call(arguments, 0);\n\n        return pickBy('isAfter', args);\n    }\n\n    var now = function () {\n        return Date.now ? Date.now() : +(new Date());\n    };\n\n    function Duration (duration) {\n        var normalizedInput = normalizeObjectUnits(duration),\n            years = normalizedInput.year || 0,\n            quarters = normalizedInput.quarter || 0,\n            months = normalizedInput.month || 0,\n            weeks = normalizedInput.week || 0,\n            days = normalizedInput.day || 0,\n            hours = normalizedInput.hour || 0,\n            minutes = normalizedInput.minute || 0,\n            seconds = normalizedInput.second || 0,\n            milliseconds = normalizedInput.millisecond || 0;\n\n        // representation for dateAddRemove\n        this._milliseconds = +milliseconds +\n            seconds * 1e3 + // 1000\n            minutes * 6e4 + // 1000 * 60\n            hours * 1000 * 60 * 60; //using 1000 * 60 * 60 instead of 36e5 to avoid floating point rounding errors https://github.com/moment/moment/issues/2978\n        // Because of dateAddRemove treats 24 hours as different from a\n        // day when working around DST, we need to store them separately\n        this._days = +days +\n            weeks * 7;\n        // It is impossible translate months into days without knowing\n        // which months you are are talking about, so we have to store\n        // it separately.\n        this._months = +months +\n            quarters * 3 +\n            years * 12;\n\n        this._data = {};\n\n        this._locale = getLocale();\n\n        this._bubble();\n    }\n\n    function isDuration (obj) {\n        return obj instanceof Duration;\n    }\n\n    function absRound (number) {\n        if (number < 0) {\n            return Math.round(-1 * number) * -1;\n        } else {\n            return Math.round(number);\n        }\n    }\n\n    // FORMATTING\n\n    function offset (token, separator) {\n        addFormatToken(token, 0, 0, function () {\n            var offset = this.utcOffset();\n            var sign = '+';\n            if (offset < 0) {\n                offset = -offset;\n                sign = '-';\n            }\n            return sign + zeroFill(~~(offset / 60), 2) + separator + zeroFill(~~(offset) % 60, 2);\n        });\n    }\n\n    offset('Z', ':');\n    offset('ZZ', '');\n\n    // PARSING\n\n    addRegexToken('Z',  matchShortOffset);\n    addRegexToken('ZZ', matchShortOffset);\n    addParseToken(['Z', 'ZZ'], function (input, array, config) {\n        config._useUTC = true;\n        config._tzm = offsetFromString(matchShortOffset, input);\n    });\n\n    // HELPERS\n\n    // timezone chunker\n    // '+10:00' > ['10',  '00']\n    // '-1530'  > ['-15', '30']\n    var chunkOffset = /([\\+\\-]|\\d\\d)/gi;\n\n    function offsetFromString(matcher, string) {\n        var matches = (string || '').match(matcher);\n\n        if (matches === null) {\n            return null;\n        }\n\n        var chunk   = matches[matches.length - 1] || [];\n        var parts   = (chunk + '').match(chunkOffset) || ['-', 0, 0];\n        var minutes = +(parts[1] * 60) + toInt(parts[2]);\n\n        return minutes === 0 ?\n          0 :\n          parts[0] === '+' ? minutes : -minutes;\n    }\n\n    // Return a moment from input, that is local/utc/zone equivalent to model.\n    function cloneWithOffset(input, model) {\n        var res, diff;\n        if (model._isUTC) {\n            res = model.clone();\n            diff = (isMoment(input) || isDate(input) ? input.valueOf() : createLocal(input).valueOf()) - res.valueOf();\n            // Use low-level api, because this fn is low-level api.\n            res._d.setTime(res._d.valueOf() + diff);\n            hooks.updateOffset(res, false);\n            return res;\n        } else {\n            return createLocal(input).local();\n        }\n    }\n\n    function getDateOffset (m) {\n        // On Firefox.24 Date#getTimezoneOffset returns a floating point.\n        // https://github.com/moment/moment/pull/1871\n        return -Math.round(m._d.getTimezoneOffset() / 15) * 15;\n    }\n\n    // HOOKS\n\n    // This function will be called whenever a moment is mutated.\n    // It is intended to keep the offset in sync with the timezone.\n    hooks.updateOffset = function () {};\n\n    // MOMENTS\n\n    // keepLocalTime = true means only change the timezone, without\n    // affecting the local hour. So 5:31:26 +0300 --[utcOffset(2, true)]-->\n    // 5:31:26 +0200 It is possible that 5:31:26 doesn't exist with offset\n    // +0200, so we adjust the time as needed, to be valid.\n    //\n    // Keeping the time actually adds/subtracts (one hour)\n    // from the actual represented time. That is why we call updateOffset\n    // a second time. In case it wants us to change the offset again\n    // _changeInProgress == true case, then we have to adjust, because\n    // there is no such time in the given timezone.\n    function getSetOffset (input, keepLocalTime) {\n        var offset = this._offset || 0,\n            localAdjust;\n        if (!this.isValid()) {\n            return input != null ? this : NaN;\n        }\n        if (input != null) {\n            if (typeof input === 'string') {\n                input = offsetFromString(matchShortOffset, input);\n                if (input === null) {\n                    return this;\n                }\n            } else if (Math.abs(input) < 16) {\n                input = input * 60;\n            }\n            if (!this._isUTC && keepLocalTime) {\n                localAdjust = getDateOffset(this);\n            }\n            this._offset = input;\n            this._isUTC = true;\n            if (localAdjust != null) {\n                this.add(localAdjust, 'm');\n            }\n            if (offset !== input) {\n                if (!keepLocalTime || this._changeInProgress) {\n                    addSubtract(this, createDuration(input - offset, 'm'), 1, false);\n                } else if (!this._changeInProgress) {\n                    this._changeInProgress = true;\n                    hooks.updateOffset(this, true);\n                    this._changeInProgress = null;\n                }\n            }\n            return this;\n        } else {\n            return this._isUTC ? offset : getDateOffset(this);\n        }\n    }\n\n    function getSetZone (input, keepLocalTime) {\n        if (input != null) {\n            if (typeof input !== 'string') {\n                input = -input;\n            }\n\n            this.utcOffset(input, keepLocalTime);\n\n            return this;\n        } else {\n            return -this.utcOffset();\n        }\n    }\n\n    function setOffsetToUTC (keepLocalTime) {\n        return this.utcOffset(0, keepLocalTime);\n    }\n\n    function setOffsetToLocal (keepLocalTime) {\n        if (this._isUTC) {\n            this.utcOffset(0, keepLocalTime);\n            this._isUTC = false;\n\n            if (keepLocalTime) {\n                this.subtract(getDateOffset(this), 'm');\n            }\n        }\n        return this;\n    }\n\n    function setOffsetToParsedOffset () {\n        if (this._tzm != null) {\n            this.utcOffset(this._tzm);\n        } else if (typeof this._i === 'string') {\n            var tZone = offsetFromString(matchOffset, this._i);\n            if (tZone != null) {\n                this.utcOffset(tZone);\n            }\n            else {\n                this.utcOffset(0, true);\n            }\n        }\n        return this;\n    }\n\n    function hasAlignedHourOffset (input) {\n        if (!this.isValid()) {\n            return false;\n        }\n        input = input ? createLocal(input).utcOffset() : 0;\n\n        return (this.utcOffset() - input) % 60 === 0;\n    }\n\n    function isDaylightSavingTime () {\n        return (\n            this.utcOffset() > this.clone().month(0).utcOffset() ||\n            this.utcOffset() > this.clone().month(5).utcOffset()\n        );\n    }\n\n    function isDaylightSavingTimeShifted () {\n        if (!isUndefined(this._isDSTShifted)) {\n            return this._isDSTShifted;\n        }\n\n        var c = {};\n\n        copyConfig(c, this);\n        c = prepareConfig(c);\n\n        if (c._a) {\n            var other = c._isUTC ? createUTC(c._a) : createLocal(c._a);\n            this._isDSTShifted = this.isValid() &&\n                compareArrays(c._a, other.toArray()) > 0;\n        } else {\n            this._isDSTShifted = false;\n        }\n\n        return this._isDSTShifted;\n    }\n\n    function isLocal () {\n        return this.isValid() ? !this._isUTC : false;\n    }\n\n    function isUtcOffset () {\n        return this.isValid() ? this._isUTC : false;\n    }\n\n    function isUtc () {\n        return this.isValid() ? this._isUTC && this._offset === 0 : false;\n    }\n\n    // ASP.NET json date format regex\n    var aspNetRegex = /^(\\-)?(?:(\\d*)[. ])?(\\d+)\\:(\\d+)(?:\\:(\\d+)(\\.\\d*)?)?$/;\n\n    // from http://docs.closure-library.googlecode.com/git/closure_goog_date_date.js.source.html\n    // somewhat more in line with 4.4.3.2 2004 spec, but allows decimal anywhere\n    // and further modified to allow for strings containing both week and day\n    var isoRegex = /^(-)?P(?:(-?[0-9,.]*)Y)?(?:(-?[0-9,.]*)M)?(?:(-?[0-9,.]*)W)?(?:(-?[0-9,.]*)D)?(?:T(?:(-?[0-9,.]*)H)?(?:(-?[0-9,.]*)M)?(?:(-?[0-9,.]*)S)?)?$/;\n\n    function createDuration (input, key) {\n        var duration = input,\n            // matching against regexp is expensive, do it on demand\n            match = null,\n            sign,\n            ret,\n            diffRes;\n\n        if (isDuration(input)) {\n            duration = {\n                ms : input._milliseconds,\n                d  : input._days,\n                M  : input._months\n            };\n        } else if (isNumber(input)) {\n            duration = {};\n            if (key) {\n                duration[key] = input;\n            } else {\n                duration.milliseconds = input;\n            }\n        } else if (!!(match = aspNetRegex.exec(input))) {\n            sign = (match[1] === '-') ? -1 : 1;\n            duration = {\n                y  : 0,\n                d  : toInt(match[DATE])                         * sign,\n                h  : toInt(match[HOUR])                         * sign,\n                m  : toInt(match[MINUTE])                       * sign,\n                s  : toInt(match[SECOND])                       * sign,\n                ms : toInt(absRound(match[MILLISECOND] * 1000)) * sign // the millisecond decimal point is included in the match\n            };\n        } else if (!!(match = isoRegex.exec(input))) {\n            sign = (match[1] === '-') ? -1 : 1;\n            duration = {\n                y : parseIso(match[2], sign),\n                M : parseIso(match[3], sign),\n                w : parseIso(match[4], sign),\n                d : parseIso(match[5], sign),\n                h : parseIso(match[6], sign),\n                m : parseIso(match[7], sign),\n                s : parseIso(match[8], sign)\n            };\n        } else if (duration == null) {// checks for null or undefined\n            duration = {};\n        } else if (typeof duration === 'object' && ('from' in duration || 'to' in duration)) {\n            diffRes = momentsDifference(createLocal(duration.from), createLocal(duration.to));\n\n            duration = {};\n            duration.ms = diffRes.milliseconds;\n            duration.M = diffRes.months;\n        }\n\n        ret = new Duration(duration);\n\n        if (isDuration(input) && hasOwnProp(input, '_locale')) {\n            ret._locale = input._locale;\n        }\n\n        return ret;\n    }\n\n    createDuration.fn = Duration.prototype;\n\n    function parseIso (inp, sign) {\n        // We'd normally use ~~inp for this, but unfortunately it also\n        // converts floats to ints.\n        // inp may be undefined, so careful calling replace on it.\n        var res = inp && parseFloat(inp.replace(',', '.'));\n        // apply sign while we're at it\n        return (isNaN(res) ? 0 : res) * sign;\n    }\n\n    function positiveMomentsDifference(base, other) {\n        var res = {milliseconds: 0, months: 0};\n\n        res.months = other.month() - base.month() +\n            (other.year() - base.year()) * 12;\n        if (base.clone().add(res.months, 'M').isAfter(other)) {\n            --res.months;\n        }\n\n        res.milliseconds = +other - +(base.clone().add(res.months, 'M'));\n\n        return res;\n    }\n\n    function momentsDifference(base, other) {\n        var res;\n        if (!(base.isValid() && other.isValid())) {\n            return {milliseconds: 0, months: 0};\n        }\n\n        other = cloneWithOffset(other, base);\n        if (base.isBefore(other)) {\n            res = positiveMomentsDifference(base, other);\n        } else {\n            res = positiveMomentsDifference(other, base);\n            res.milliseconds = -res.milliseconds;\n            res.months = -res.months;\n        }\n\n        return res;\n    }\n\n    // TODO: remove 'name' arg after deprecation is removed\n    function createAdder(direction, name) {\n        return function (val, period) {\n            var dur, tmp;\n            //invert the arguments, but complain about it\n            if (period !== null && !isNaN(+period)) {\n                deprecateSimple(name, 'moment().' + name  + '(period, number) is deprecated. Please use moment().' + name + '(number, period). ' +\n                'See http://momentjs.com/guides/#/warnings/add-inverted-param/ for more info.');\n                tmp = val; val = period; period = tmp;\n            }\n\n            val = typeof val === 'string' ? +val : val;\n            dur = createDuration(val, period);\n            addSubtract(this, dur, direction);\n            return this;\n        };\n    }\n\n    function addSubtract (mom, duration, isAdding, updateOffset) {\n        var milliseconds = duration._milliseconds,\n            days = absRound(duration._days),\n            months = absRound(duration._months);\n\n        if (!mom.isValid()) {\n            // No op\n            return;\n        }\n\n        updateOffset = updateOffset == null ? true : updateOffset;\n\n        if (milliseconds) {\n            mom._d.setTime(mom._d.valueOf() + milliseconds * isAdding);\n        }\n        if (days) {\n            set$1(mom, 'Date', get(mom, 'Date') + days * isAdding);\n        }\n        if (months) {\n            setMonth(mom, get(mom, 'Month') + months * isAdding);\n        }\n        if (updateOffset) {\n            hooks.updateOffset(mom, days || months);\n        }\n    }\n\n    var add      = createAdder(1, 'add');\n    var subtract = createAdder(-1, 'subtract');\n\n    function getCalendarFormat(myMoment, now) {\n        var diff = myMoment.diff(now, 'days', true);\n        return diff < -6 ? 'sameElse' :\n                diff < -1 ? 'lastWeek' :\n                diff < 0 ? 'lastDay' :\n                diff < 1 ? 'sameDay' :\n                diff < 2 ? 'nextDay' :\n                diff < 7 ? 'nextWeek' : 'sameElse';\n    }\n\n    function calendar$1 (time, formats) {\n        // We want to compare the start of today, vs this.\n        // Getting start-of-today depends on whether we're local/utc/offset or not.\n        var now = time || createLocal(),\n            sod = cloneWithOffset(now, this).startOf('day'),\n            format = hooks.calendarFormat(this, sod) || 'sameElse';\n\n        var output = formats && (isFunction(formats[format]) ? formats[format].call(this, now) : formats[format]);\n\n        return this.format(output || this.localeData().calendar(format, this, createLocal(now)));\n    }\n\n    function clone () {\n        return new Moment(this);\n    }\n\n    function isAfter (input, units) {\n        var localInput = isMoment(input) ? input : createLocal(input);\n        if (!(this.isValid() && localInput.isValid())) {\n            return false;\n        }\n        units = normalizeUnits(!isUndefined(units) ? units : 'millisecond');\n        if (units === 'millisecond') {\n            return this.valueOf() > localInput.valueOf();\n        } else {\n            return localInput.valueOf() < this.clone().startOf(units).valueOf();\n        }\n    }\n\n    function isBefore (input, units) {\n        var localInput = isMoment(input) ? input : createLocal(input);\n        if (!(this.isValid() && localInput.isValid())) {\n            return false;\n        }\n        units = normalizeUnits(!isUndefined(units) ? units : 'millisecond');\n        if (units === 'millisecond') {\n            return this.valueOf() < localInput.valueOf();\n        } else {\n            return this.clone().endOf(units).valueOf() < localInput.valueOf();\n        }\n    }\n\n    function isBetween (from, to, units, inclusivity) {\n        inclusivity = inclusivity || '()';\n        return (inclusivity[0] === '(' ? this.isAfter(from, units) : !this.isBefore(from, units)) &&\n            (inclusivity[1] === ')' ? this.isBefore(to, units) : !this.isAfter(to, units));\n    }\n\n    function isSame (input, units) {\n        var localInput = isMoment(input) ? input : createLocal(input),\n            inputMs;\n        if (!(this.isValid() && localInput.isValid())) {\n            return false;\n        }\n        units = normalizeUnits(units || 'millisecond');\n        if (units === 'millisecond') {\n            return this.valueOf() === localInput.valueOf();\n        } else {\n            inputMs = localInput.valueOf();\n            return this.clone().startOf(units).valueOf() <= inputMs && inputMs <= this.clone().endOf(units).valueOf();\n        }\n    }\n\n    function isSameOrAfter (input, units) {\n        return this.isSame(input, units) || this.isAfter(input,units);\n    }\n\n    function isSameOrBefore (input, units) {\n        return this.isSame(input, units) || this.isBefore(input,units);\n    }\n\n    function diff (input, units, asFloat) {\n        var that,\n            zoneDelta,\n            delta, output;\n\n        if (!this.isValid()) {\n            return NaN;\n        }\n\n        that = cloneWithOffset(input, this);\n\n        if (!that.isValid()) {\n            return NaN;\n        }\n\n        zoneDelta = (that.utcOffset() - this.utcOffset()) * 6e4;\n\n        units = normalizeUnits(units);\n\n        if (units === 'year' || units === 'month' || units === 'quarter') {\n            output = monthDiff(this, that);\n            if (units === 'quarter') {\n                output = output / 3;\n            } else if (units === 'year') {\n                output = output / 12;\n            }\n        } else {\n            delta = this - that;\n            output = units === 'second' ? delta / 1e3 : // 1000\n                units === 'minute' ? delta / 6e4 : // 1000 * 60\n                units === 'hour' ? delta / 36e5 : // 1000 * 60 * 60\n                units === 'day' ? (delta - zoneDelta) / 864e5 : // 1000 * 60 * 60 * 24, negate dst\n                units === 'week' ? (delta - zoneDelta) / 6048e5 : // 1000 * 60 * 60 * 24 * 7, negate dst\n                delta;\n        }\n        return asFloat ? output : absFloor(output);\n    }\n\n    function monthDiff (a, b) {\n        // difference in months\n        var wholeMonthDiff = ((b.year() - a.year()) * 12) + (b.month() - a.month()),\n            // b is in (anchor - 1 month, anchor + 1 month)\n            anchor = a.clone().add(wholeMonthDiff, 'months'),\n            anchor2, adjust;\n\n        if (b - anchor < 0) {\n            anchor2 = a.clone().add(wholeMonthDiff - 1, 'months');\n            // linear across the month\n            adjust = (b - anchor) / (anchor - anchor2);\n        } else {\n            anchor2 = a.clone().add(wholeMonthDiff + 1, 'months');\n            // linear across the month\n            adjust = (b - anchor) / (anchor2 - anchor);\n        }\n\n        //check for negative zero, return zero if negative zero\n        return -(wholeMonthDiff + adjust) || 0;\n    }\n\n    hooks.defaultFormat = 'YYYY-MM-DDTHH:mm:ssZ';\n    hooks.defaultFormatUtc = 'YYYY-MM-DDTHH:mm:ss[Z]';\n\n    function toString () {\n        return this.clone().locale('en').format('ddd MMM DD YYYY HH:mm:ss [GMT]ZZ');\n    }\n\n    function toISOString () {\n        var m = this.clone().utc();\n        if (0 < m.year() && m.year() <= 9999) {\n            if (isFunction(Date.prototype.toISOString)) {\n                // native implementation is ~50x faster, use it when we can\n                return this.toDate().toISOString();\n            } else {\n                return formatMoment(m, 'YYYY-MM-DD[T]HH:mm:ss.SSS[Z]');\n            }\n        } else {\n            return formatMoment(m, 'YYYYYY-MM-DD[T]HH:mm:ss.SSS[Z]');\n        }\n    }\n\n    /**\n     * Return a human readable representation of a moment that can\n     * also be evaluated to get a new moment which is the same\n     *\n     * @link https://nodejs.org/dist/latest/docs/api/util.html#util_custom_inspect_function_on_objects\n     */\n    function inspect () {\n        if (!this.isValid()) {\n            return 'moment.invalid(/* ' + this._i + ' */)';\n        }\n        var func = 'moment';\n        var zone = '';\n        if (!this.isLocal()) {\n            func = this.utcOffset() === 0 ? 'moment.utc' : 'moment.parseZone';\n            zone = 'Z';\n        }\n        var prefix = '[' + func + '(\"]';\n        var year = (0 < this.year() && this.year() <= 9999) ? 'YYYY' : 'YYYYYY';\n        var datetime = '-MM-DD[T]HH:mm:ss.SSS';\n        var suffix = zone + '[\")]';\n\n        return this.format(prefix + year + datetime + suffix);\n    }\n\n    function format (inputString) {\n        if (!inputString) {\n            inputString = this.isUtc() ? hooks.defaultFormatUtc : hooks.defaultFormat;\n        }\n        var output = formatMoment(this, inputString);\n        return this.localeData().postformat(output);\n    }\n\n    function from (time, withoutSuffix) {\n        if (this.isValid() &&\n                ((isMoment(time) && time.isValid()) ||\n                 createLocal(time).isValid())) {\n            return createDuration({to: this, from: time}).locale(this.locale()).humanize(!withoutSuffix);\n        } else {\n            return this.localeData().invalidDate();\n        }\n    }\n\n    function fromNow (withoutSuffix) {\n        return this.from(createLocal(), withoutSuffix);\n    }\n\n    function to (time, withoutSuffix) {\n        if (this.isValid() &&\n                ((isMoment(time) && time.isValid()) ||\n                 createLocal(time).isValid())) {\n            return createDuration({from: this, to: time}).locale(this.locale()).humanize(!withoutSuffix);\n        } else {\n            return this.localeData().invalidDate();\n        }\n    }\n\n    function toNow (withoutSuffix) {\n        return this.to(createLocal(), withoutSuffix);\n    }\n\n    // If passed a locale key, it will set the locale for this\n    // instance.  Otherwise, it will return the locale configuration\n    // variables for this instance.\n    function locale (key) {\n        var newLocaleData;\n\n        if (key === undefined) {\n            return this._locale._abbr;\n        } else {\n            newLocaleData = getLocale(key);\n            if (newLocaleData != null) {\n                this._locale = newLocaleData;\n            }\n            return this;\n        }\n    }\n\n    var lang = deprecate(\n        'moment().lang() is deprecated. Instead, use moment().localeData() to get the language configuration. Use moment().locale() to change languages.',\n        function (key) {\n            if (key === undefined) {\n                return this.localeData();\n            } else {\n                return this.locale(key);\n            }\n        }\n    );\n\n    function localeData () {\n        return this._locale;\n    }\n\n    function startOf (units) {\n        units = normalizeUnits(units);\n        // the following switch intentionally omits break keywords\n        // to utilize falling through the cases.\n        switch (units) {\n            case 'year':\n                this.month(0);\n                /* falls through */\n            case 'quarter':\n            case 'month':\n                this.date(1);\n                /* falls through */\n            case 'week':\n            case 'isoWeek':\n            case 'day':\n            case 'date':\n                this.hours(0);\n                /* falls through */\n            case 'hour':\n                this.minutes(0);\n                /* falls through */\n            case 'minute':\n                this.seconds(0);\n                /* falls through */\n            case 'second':\n                this.milliseconds(0);\n        }\n\n        // weeks are a special case\n        if (units === 'week') {\n            this.weekday(0);\n        }\n        if (units === 'isoWeek') {\n            this.isoWeekday(1);\n        }\n\n        // quarters are also special\n        if (units === 'quarter') {\n            this.month(Math.floor(this.month() / 3) * 3);\n        }\n\n        return this;\n    }\n\n    function endOf (units) {\n        units = normalizeUnits(units);\n        if (units === undefined || units === 'millisecond') {\n            return this;\n        }\n\n        // 'date' is an alias for 'day', so it should be considered as such.\n        if (units === 'date') {\n            units = 'day';\n        }\n\n        return this.startOf(units).add(1, (units === 'isoWeek' ? 'week' : units)).subtract(1, 'ms');\n    }\n\n    function valueOf () {\n        return this._d.valueOf() - ((this._offset || 0) * 60000);\n    }\n\n    function unix () {\n        return Math.floor(this.valueOf() / 1000);\n    }\n\n    function toDate () {\n        return new Date(this.valueOf());\n    }\n\n    function toArray () {\n        var m = this;\n        return [m.year(), m.month(), m.date(), m.hour(), m.minute(), m.second(), m.millisecond()];\n    }\n\n    function toObject () {\n        var m = this;\n        return {\n            years: m.year(),\n            months: m.month(),\n            date: m.date(),\n            hours: m.hours(),\n            minutes: m.minutes(),\n            seconds: m.seconds(),\n            milliseconds: m.milliseconds()\n        };\n    }\n\n    function toJSON () {\n        // new Date(NaN).toJSON() === null\n        return this.isValid() ? this.toISOString() : null;\n    }\n\n    function isValid$1 () {\n        return isValid(this);\n    }\n\n    function parsingFlags () {\n        return extend({}, getParsingFlags(this));\n    }\n\n    function invalidAt () {\n        return getParsingFlags(this).overflow;\n    }\n\n    function creationData() {\n        return {\n            input: this._i,\n            format: this._f,\n            locale: this._locale,\n            isUTC: this._isUTC,\n            strict: this._strict\n        };\n    }\n\n    // FORMATTING\n\n    addFormatToken(0, ['gg', 2], 0, function () {\n        return this.weekYear() % 100;\n    });\n\n    addFormatToken(0, ['GG', 2], 0, function () {\n        return this.isoWeekYear() % 100;\n    });\n\n    function addWeekYearFormatToken (token, getter) {\n        addFormatToken(0, [token, token.length], 0, getter);\n    }\n\n    addWeekYearFormatToken('gggg',     'weekYear');\n    addWeekYearFormatToken('ggggg',    'weekYear');\n    addWeekYearFormatToken('GGGG',  'isoWeekYear');\n    addWeekYearFormatToken('GGGGG', 'isoWeekYear');\n\n    // ALIASES\n\n    addUnitAlias('weekYear', 'gg');\n    addUnitAlias('isoWeekYear', 'GG');\n\n    // PRIORITY\n\n    addUnitPriority('weekYear', 1);\n    addUnitPriority('isoWeekYear', 1);\n\n\n    // PARSING\n\n    addRegexToken('G',      matchSigned);\n    addRegexToken('g',      matchSigned);\n    addRegexToken('GG',     match1to2, match2);\n    addRegexToken('gg',     match1to2, match2);\n    addRegexToken('GGGG',   match1to4, match4);\n    addRegexToken('gggg',   match1to4, match4);\n    addRegexToken('GGGGG',  match1to6, match6);\n    addRegexToken('ggggg',  match1to6, match6);\n\n    addWeekParseToken(['gggg', 'ggggg', 'GGGG', 'GGGGG'], function (input, week, config, token) {\n        week[token.substr(0, 2)] = toInt(input);\n    });\n\n    addWeekParseToken(['gg', 'GG'], function (input, week, config, token) {\n        week[token] = hooks.parseTwoDigitYear(input);\n    });\n\n    // MOMENTS\n\n    function getSetWeekYear (input) {\n        return getSetWeekYearHelper.call(this,\n                input,\n                this.week(),\n                this.weekday(),\n                this.localeData()._week.dow,\n                this.localeData()._week.doy);\n    }\n\n    function getSetISOWeekYear (input) {\n        return getSetWeekYearHelper.call(this,\n                input, this.isoWeek(), this.isoWeekday(), 1, 4);\n    }\n\n    function getISOWeeksInYear () {\n        return weeksInYear(this.year(), 1, 4);\n    }\n\n    function getWeeksInYear () {\n        var weekInfo = this.localeData()._week;\n        return weeksInYear(this.year(), weekInfo.dow, weekInfo.doy);\n    }\n\n    function getSetWeekYearHelper(input, week, weekday, dow, doy) {\n        var weeksTarget;\n        if (input == null) {\n            return weekOfYear(this, dow, doy).year;\n        } else {\n            weeksTarget = weeksInYear(input, dow, doy);\n            if (week > weeksTarget) {\n                week = weeksTarget;\n            }\n            return setWeekAll.call(this, input, week, weekday, dow, doy);\n        }\n    }\n\n    function setWeekAll(weekYear, week, weekday, dow, doy) {\n        var dayOfYearData = dayOfYearFromWeeks(weekYear, week, weekday, dow, doy),\n            date = createUTCDate(dayOfYearData.year, 0, dayOfYearData.dayOfYear);\n\n        this.year(date.getUTCFullYear());\n        this.month(date.getUTCMonth());\n        this.date(date.getUTCDate());\n        return this;\n    }\n\n    // FORMATTING\n\n    addFormatToken('Q', 0, 'Qo', 'quarter');\n\n    // ALIASES\n\n    addUnitAlias('quarter', 'Q');\n\n    // PRIORITY\n\n    addUnitPriority('quarter', 7);\n\n    // PARSING\n\n    addRegexToken('Q', match1);\n    addParseToken('Q', function (input, array) {\n        array[MONTH] = (toInt(input) - 1) * 3;\n    });\n\n    // MOMENTS\n\n    function getSetQuarter (input) {\n        return input == null ? Math.ceil((this.month() + 1) / 3) : this.month((input - 1) * 3 + this.month() % 3);\n    }\n\n    // FORMATTING\n\n    addFormatToken('D', ['DD', 2], 'Do', 'date');\n\n    // ALIASES\n\n    addUnitAlias('date', 'D');\n\n    // PRIOROITY\n    addUnitPriority('date', 9);\n\n    // PARSING\n\n    addRegexToken('D',  match1to2);\n    addRegexToken('DD', match1to2, match2);\n    addRegexToken('Do', function (isStrict, locale) {\n        return isStrict ? locale._ordinalParse : locale._ordinalParseLenient;\n    });\n\n    addParseToken(['D', 'DD'], DATE);\n    addParseToken('Do', function (input, array) {\n        array[DATE] = toInt(input.match(match1to2)[0], 10);\n    });\n\n    // MOMENTS\n\n    var getSetDayOfMonth = makeGetSet('Date', true);\n\n    // FORMATTING\n\n    addFormatToken('DDD', ['DDDD', 3], 'DDDo', 'dayOfYear');\n\n    // ALIASES\n\n    addUnitAlias('dayOfYear', 'DDD');\n\n    // PRIORITY\n    addUnitPriority('dayOfYear', 4);\n\n    // PARSING\n\n    addRegexToken('DDD',  match1to3);\n    addRegexToken('DDDD', match3);\n    addParseToken(['DDD', 'DDDD'], function (input, array, config) {\n        config._dayOfYear = toInt(input);\n    });\n\n    // HELPERS\n\n    // MOMENTS\n\n    function getSetDayOfYear (input) {\n        var dayOfYear = Math.round((this.clone().startOf('day') - this.clone().startOf('year')) / 864e5) + 1;\n        return input == null ? dayOfYear : this.add((input - dayOfYear), 'd');\n    }\n\n    // FORMATTING\n\n    addFormatToken('m', ['mm', 2], 0, 'minute');\n\n    // ALIASES\n\n    addUnitAlias('minute', 'm');\n\n    // PRIORITY\n\n    addUnitPriority('minute', 14);\n\n    // PARSING\n\n    addRegexToken('m',  match1to2);\n    addRegexToken('mm', match1to2, match2);\n    addParseToken(['m', 'mm'], MINUTE);\n\n    // MOMENTS\n\n    var getSetMinute = makeGetSet('Minutes', false);\n\n    // FORMATTING\n\n    addFormatToken('s', ['ss', 2], 0, 'second');\n\n    // ALIASES\n\n    addUnitAlias('second', 's');\n\n    // PRIORITY\n\n    addUnitPriority('second', 15);\n\n    // PARSING\n\n    addRegexToken('s',  match1to2);\n    addRegexToken('ss', match1to2, match2);\n    addParseToken(['s', 'ss'], SECOND);\n\n    // MOMENTS\n\n    var getSetSecond = makeGetSet('Seconds', false);\n\n    // FORMATTING\n\n    addFormatToken('S', 0, 0, function () {\n        return ~~(this.millisecond() / 100);\n    });\n\n    addFormatToken(0, ['SS', 2], 0, function () {\n        return ~~(this.millisecond() / 10);\n    });\n\n    addFormatToken(0, ['SSS', 3], 0, 'millisecond');\n    addFormatToken(0, ['SSSS', 4], 0, function () {\n        return this.millisecond() * 10;\n    });\n    addFormatToken(0, ['SSSSS', 5], 0, function () {\n        return this.millisecond() * 100;\n    });\n    addFormatToken(0, ['SSSSSS', 6], 0, function () {\n        return this.millisecond() * 1000;\n    });\n    addFormatToken(0, ['SSSSSSS', 7], 0, function () {\n        return this.millisecond() * 10000;\n    });\n    addFormatToken(0, ['SSSSSSSS', 8], 0, function () {\n        return this.millisecond() * 100000;\n    });\n    addFormatToken(0, ['SSSSSSSSS', 9], 0, function () {\n        return this.millisecond() * 1000000;\n    });\n\n\n    // ALIASES\n\n    addUnitAlias('millisecond', 'ms');\n\n    // PRIORITY\n\n    addUnitPriority('millisecond', 16);\n\n    // PARSING\n\n    addRegexToken('S',    match1to3, match1);\n    addRegexToken('SS',   match1to3, match2);\n    addRegexToken('SSS',  match1to3, match3);\n\n    var token;\n    for (token = 'SSSS'; token.length <= 9; token += 'S') {\n        addRegexToken(token, matchUnsigned);\n    }\n\n    function parseMs(input, array) {\n        array[MILLISECOND] = toInt(('0.' + input) * 1000);\n    }\n\n    for (token = 'S'; token.length <= 9; token += 'S') {\n        addParseToken(token, parseMs);\n    }\n    // MOMENTS\n\n    var getSetMillisecond = makeGetSet('Milliseconds', false);\n\n    // FORMATTING\n\n    addFormatToken('z',  0, 0, 'zoneAbbr');\n    addFormatToken('zz', 0, 0, 'zoneName');\n\n    // MOMENTS\n\n    function getZoneAbbr () {\n        return this._isUTC ? 'UTC' : '';\n    }\n\n    function getZoneName () {\n        return this._isUTC ? 'Coordinated Universal Time' : '';\n    }\n\n    var proto = Moment.prototype;\n\n    proto.add               = add;\n    proto.calendar          = calendar$1;\n    proto.clone             = clone;\n    proto.diff              = diff;\n    proto.endOf             = endOf;\n    proto.format            = format;\n    proto.from              = from;\n    proto.fromNow           = fromNow;\n    proto.to                = to;\n    proto.toNow             = toNow;\n    proto.get               = stringGet;\n    proto.invalidAt         = invalidAt;\n    proto.isAfter           = isAfter;\n    proto.isBefore          = isBefore;\n    proto.isBetween         = isBetween;\n    proto.isSame            = isSame;\n    proto.isSameOrAfter     = isSameOrAfter;\n    proto.isSameOrBefore    = isSameOrBefore;\n    proto.isValid           = isValid$1;\n    proto.lang              = lang;\n    proto.locale            = locale;\n    proto.localeData        = localeData;\n    proto.max               = prototypeMax;\n    proto.min               = prototypeMin;\n    proto.parsingFlags      = parsingFlags;\n    proto.set               = stringSet;\n    proto.startOf           = startOf;\n    proto.subtract          = subtract;\n    proto.toArray           = toArray;\n    proto.toObject          = toObject;\n    proto.toDate            = toDate;\n    proto.toISOString       = toISOString;\n    proto.inspect           = inspect;\n    proto.toJSON            = toJSON;\n    proto.toString          = toString;\n    proto.unix              = unix;\n    proto.valueOf           = valueOf;\n    proto.creationData      = creationData;\n\n    // Year\n    proto.year       = getSetYear;\n    proto.isLeapYear = getIsLeapYear;\n\n    // Week Year\n    proto.weekYear    = getSetWeekYear;\n    proto.isoWeekYear = getSetISOWeekYear;\n\n    // Quarter\n    proto.quarter = proto.quarters = getSetQuarter;\n\n    // Month\n    proto.month       = getSetMonth;\n    proto.daysInMonth = getDaysInMonth;\n\n    // Week\n    proto.week           = proto.weeks        = getSetWeek;\n    proto.isoWeek        = proto.isoWeeks     = getSetISOWeek;\n    proto.weeksInYear    = getWeeksInYear;\n    proto.isoWeeksInYear = getISOWeeksInYear;\n\n    // Day\n    proto.date       = getSetDayOfMonth;\n    proto.day        = proto.days             = getSetDayOfWeek;\n    proto.weekday    = getSetLocaleDayOfWeek;\n    proto.isoWeekday = getSetISODayOfWeek;\n    proto.dayOfYear  = getSetDayOfYear;\n\n    // Hour\n    proto.hour = proto.hours = getSetHour;\n\n    // Minute\n    proto.minute = proto.minutes = getSetMinute;\n\n    // Second\n    proto.second = proto.seconds = getSetSecond;\n\n    // Millisecond\n    proto.millisecond = proto.milliseconds = getSetMillisecond;\n\n    // Offset\n    proto.utcOffset            = getSetOffset;\n    proto.utc                  = setOffsetToUTC;\n    proto.local                = setOffsetToLocal;\n    proto.parseZone            = setOffsetToParsedOffset;\n    proto.hasAlignedHourOffset = hasAlignedHourOffset;\n    proto.isDST                = isDaylightSavingTime;\n    proto.isLocal              = isLocal;\n    proto.isUtcOffset          = isUtcOffset;\n    proto.isUtc                = isUtc;\n    proto.isUTC                = isUtc;\n\n    // Timezone\n    proto.zoneAbbr = getZoneAbbr;\n    proto.zoneName = getZoneName;\n\n    // Deprecations\n    proto.dates  = deprecate('dates accessor is deprecated. Use date instead.', getSetDayOfMonth);\n    proto.months = deprecate('months accessor is deprecated. Use month instead', getSetMonth);\n    proto.years  = deprecate('years accessor is deprecated. Use year instead', getSetYear);\n    proto.zone   = deprecate('moment().zone is deprecated, use moment().utcOffset instead. http://momentjs.com/guides/#/warnings/zone/', getSetZone);\n    proto.isDSTShifted = deprecate('isDSTShifted is deprecated. See http://momentjs.com/guides/#/warnings/dst-shifted/ for more information', isDaylightSavingTimeShifted);\n\n    function createUnix (input) {\n        return createLocal(input * 1000);\n    }\n\n    function createInZone () {\n        return createLocal.apply(null, arguments).parseZone();\n    }\n\n    function preParsePostFormat (string) {\n        return string;\n    }\n\n    var proto$1 = Locale.prototype;\n\n    proto$1.calendar        = calendar;\n    proto$1.longDateFormat  = longDateFormat;\n    proto$1.invalidDate     = invalidDate;\n    proto$1.ordinal         = ordinal;\n    proto$1.preparse        = preParsePostFormat;\n    proto$1.postformat      = preParsePostFormat;\n    proto$1.relativeTime    = relativeTime;\n    proto$1.pastFuture      = pastFuture;\n    proto$1.set             = set;\n\n    // Month\n    proto$1.months            =        localeMonths;\n    proto$1.monthsShort       =        localeMonthsShort;\n    proto$1.monthsParse       =        localeMonthsParse;\n    proto$1.monthsRegex       = monthsRegex;\n    proto$1.monthsShortRegex  = monthsShortRegex;\n\n    // Week\n    proto$1.week = localeWeek;\n    proto$1.firstDayOfYear = localeFirstDayOfYear;\n    proto$1.firstDayOfWeek = localeFirstDayOfWeek;\n\n    // Day of Week\n    proto$1.weekdays       =        localeWeekdays;\n    proto$1.weekdaysMin    =        localeWeekdaysMin;\n    proto$1.weekdaysShort  =        localeWeekdaysShort;\n    proto$1.weekdaysParse  =        localeWeekdaysParse;\n\n    proto$1.weekdaysRegex       =        weekdaysRegex;\n    proto$1.weekdaysShortRegex  =        weekdaysShortRegex;\n    proto$1.weekdaysMinRegex    =        weekdaysMinRegex;\n\n    // Hours\n    proto$1.isPM = localeIsPM;\n    proto$1.meridiem = localeMeridiem;\n\n    function get$1 (format, index, field, setter) {\n        var locale = getLocale();\n        var utc = createUTC().set(setter, index);\n        return locale[field](utc, format);\n    }\n\n    function listMonthsImpl (format, index, field) {\n        if (isNumber(format)) {\n            index = format;\n            format = undefined;\n        }\n\n        format = format || '';\n\n        if (index != null) {\n            return get$1(format, index, field, 'month');\n        }\n\n        var i;\n        var out = [];\n        for (i = 0; i < 12; i++) {\n            out[i] = get$1(format, i, field, 'month');\n        }\n        return out;\n    }\n\n    // ()\n    // (5)\n    // (fmt, 5)\n    // (fmt)\n    // (true)\n    // (true, 5)\n    // (true, fmt, 5)\n    // (true, fmt)\n    function listWeekdaysImpl (localeSorted, format, index, field) {\n        if (typeof localeSorted === 'boolean') {\n            if (isNumber(format)) {\n                index = format;\n                format = undefined;\n            }\n\n            format = format || '';\n        } else {\n            format = localeSorted;\n            index = format;\n            localeSorted = false;\n\n            if (isNumber(format)) {\n                index = format;\n                format = undefined;\n            }\n\n            format = format || '';\n        }\n\n        var locale = getLocale(),\n            shift = localeSorted ? locale._week.dow : 0;\n\n        if (index != null) {\n            return get$1(format, (index + shift) % 7, field, 'day');\n        }\n\n        var i;\n        var out = [];\n        for (i = 0; i < 7; i++) {\n            out[i] = get$1(format, (i + shift) % 7, field, 'day');\n        }\n        return out;\n    }\n\n    function listMonths (format, index) {\n        return listMonthsImpl(format, index, 'months');\n    }\n\n    function listMonthsShort (format, index) {\n        return listMonthsImpl(format, index, 'monthsShort');\n    }\n\n    function listWeekdays (localeSorted, format, index) {\n        return listWeekdaysImpl(localeSorted, format, index, 'weekdays');\n    }\n\n    function listWeekdaysShort (localeSorted, format, index) {\n        return listWeekdaysImpl(localeSorted, format, index, 'weekdaysShort');\n    }\n\n    function listWeekdaysMin (localeSorted, format, index) {\n        return listWeekdaysImpl(localeSorted, format, index, 'weekdaysMin');\n    }\n\n    getSetGlobalLocale('en', {\n        ordinalParse: /\\d{1,2}(th|st|nd|rd)/,\n        ordinal : function (number) {\n            var b = number % 10,\n                output = (toInt(number % 100 / 10) === 1) ? 'th' :\n                (b === 1) ? 'st' :\n                (b === 2) ? 'nd' :\n                (b === 3) ? 'rd' : 'th';\n            return number + output;\n        }\n    });\n\n    // Side effect imports\n    hooks.lang = deprecate('moment.lang is deprecated. Use moment.locale instead.', getSetGlobalLocale);\n    hooks.langData = deprecate('moment.langData is deprecated. Use moment.localeData instead.', getLocale);\n\n    var mathAbs = Math.abs;\n\n    function abs () {\n        var data           = this._data;\n\n        this._milliseconds = mathAbs(this._milliseconds);\n        this._days         = mathAbs(this._days);\n        this._months       = mathAbs(this._months);\n\n        data.milliseconds  = mathAbs(data.milliseconds);\n        data.seconds       = mathAbs(data.seconds);\n        data.minutes       = mathAbs(data.minutes);\n        data.hours         = mathAbs(data.hours);\n        data.months        = mathAbs(data.months);\n        data.years         = mathAbs(data.years);\n\n        return this;\n    }\n\n    function addSubtract$1 (duration, input, value, direction) {\n        var other = createDuration(input, value);\n\n        duration._milliseconds += direction * other._milliseconds;\n        duration._days         += direction * other._days;\n        duration._months       += direction * other._months;\n\n        return duration._bubble();\n    }\n\n    // supports only 2.0-style add(1, 's') or add(duration)\n    function add$1 (input, value) {\n        return addSubtract$1(this, input, value, 1);\n    }\n\n    // supports only 2.0-style subtract(1, 's') or subtract(duration)\n    function subtract$1 (input, value) {\n        return addSubtract$1(this, input, value, -1);\n    }\n\n    function absCeil (number) {\n        if (number < 0) {\n            return Math.floor(number);\n        } else {\n            return Math.ceil(number);\n        }\n    }\n\n    function bubble () {\n        var milliseconds = this._milliseconds;\n        var days         = this._days;\n        var months       = this._months;\n        var data         = this._data;\n        var seconds, minutes, hours, years, monthsFromDays;\n\n        // if we have a mix of positive and negative values, bubble down first\n        // check: https://github.com/moment/moment/issues/2166\n        if (!((milliseconds >= 0 && days >= 0 && months >= 0) ||\n                (milliseconds <= 0 && days <= 0 && months <= 0))) {\n            milliseconds += absCeil(monthsToDays(months) + days) * 864e5;\n            days = 0;\n            months = 0;\n        }\n\n        // The following code bubbles up values, see the tests for\n        // examples of what that means.\n        data.milliseconds = milliseconds % 1000;\n\n        seconds           = absFloor(milliseconds / 1000);\n        data.seconds      = seconds % 60;\n\n        minutes           = absFloor(seconds / 60);\n        data.minutes      = minutes % 60;\n\n        hours             = absFloor(minutes / 60);\n        data.hours        = hours % 24;\n\n        days += absFloor(hours / 24);\n\n        // convert days to months\n        monthsFromDays = absFloor(daysToMonths(days));\n        months += monthsFromDays;\n        days -= absCeil(monthsToDays(monthsFromDays));\n\n        // 12 months -> 1 year\n        years = absFloor(months / 12);\n        months %= 12;\n\n        data.days   = days;\n        data.months = months;\n        data.years  = years;\n\n        return this;\n    }\n\n    function daysToMonths (days) {\n        // 400 years have 146097 days (taking into account leap year rules)\n        // 400 years have 12 months === 4800\n        return days * 4800 / 146097;\n    }\n\n    function monthsToDays (months) {\n        // the reverse of daysToMonths\n        return months * 146097 / 4800;\n    }\n\n    function as (units) {\n        var days;\n        var months;\n        var milliseconds = this._milliseconds;\n\n        units = normalizeUnits(units);\n\n        if (units === 'month' || units === 'year') {\n            days   = this._days   + milliseconds / 864e5;\n            months = this._months + daysToMonths(days);\n            return units === 'month' ? months : months / 12;\n        } else {\n            // handle milliseconds separately because of floating point math errors (issue #1867)\n            days = this._days + Math.round(monthsToDays(this._months));\n            switch (units) {\n                case 'week'   : return days / 7     + milliseconds / 6048e5;\n                case 'day'    : return days         + milliseconds / 864e5;\n                case 'hour'   : return days * 24    + milliseconds / 36e5;\n                case 'minute' : return days * 1440  + milliseconds / 6e4;\n                case 'second' : return days * 86400 + milliseconds / 1000;\n                // Math.floor prevents floating point math errors here\n                case 'millisecond': return Math.floor(days * 864e5) + milliseconds;\n                default: throw new Error('Unknown unit ' + units);\n            }\n        }\n    }\n\n    // TODO: Use this.as('ms')?\n    function valueOf$1 () {\n        return (\n            this._milliseconds +\n            this._days * 864e5 +\n            (this._months % 12) * 2592e6 +\n            toInt(this._months / 12) * 31536e6\n        );\n    }\n\n    function makeAs (alias) {\n        return function () {\n            return this.as(alias);\n        };\n    }\n\n    var asMilliseconds = makeAs('ms');\n    var asSeconds      = makeAs('s');\n    var asMinutes      = makeAs('m');\n    var asHours        = makeAs('h');\n    var asDays         = makeAs('d');\n    var asWeeks        = makeAs('w');\n    var asMonths       = makeAs('M');\n    var asYears        = makeAs('y');\n\n    function get$2 (units) {\n        units = normalizeUnits(units);\n        return this[units + 's']();\n    }\n\n    function makeGetter(name) {\n        return function () {\n            return this._data[name];\n        };\n    }\n\n    var milliseconds = makeGetter('milliseconds');\n    var seconds      = makeGetter('seconds');\n    var minutes      = makeGetter('minutes');\n    var hours        = makeGetter('hours');\n    var days         = makeGetter('days');\n    var months       = makeGetter('months');\n    var years        = makeGetter('years');\n\n    function weeks () {\n        return absFloor(this.days() / 7);\n    }\n\n    var round = Math.round;\n    var thresholds = {\n        s: 45,  // seconds to minute\n        m: 45,  // minutes to hour\n        h: 22,  // hours to day\n        d: 26,  // days to month\n        M: 11   // months to year\n    };\n\n    // helper function for moment.fn.from, moment.fn.fromNow, and moment.duration.fn.humanize\n    function substituteTimeAgo(string, number, withoutSuffix, isFuture, locale) {\n        return locale.relativeTime(number || 1, !!withoutSuffix, string, isFuture);\n    }\n\n    function relativeTime$1 (posNegDuration, withoutSuffix, locale) {\n        var duration = createDuration(posNegDuration).abs();\n        var seconds  = round(duration.as('s'));\n        var minutes  = round(duration.as('m'));\n        var hours    = round(duration.as('h'));\n        var days     = round(duration.as('d'));\n        var months   = round(duration.as('M'));\n        var years    = round(duration.as('y'));\n\n        var a = seconds < thresholds.s && ['s', seconds]  ||\n                minutes <= 1           && ['m']           ||\n                minutes < thresholds.m && ['mm', minutes] ||\n                hours   <= 1           && ['h']           ||\n                hours   < thresholds.h && ['hh', hours]   ||\n                days    <= 1           && ['d']           ||\n                days    < thresholds.d && ['dd', days]    ||\n                months  <= 1           && ['M']           ||\n                months  < thresholds.M && ['MM', months]  ||\n                years   <= 1           && ['y']           || ['yy', years];\n\n        a[2] = withoutSuffix;\n        a[3] = +posNegDuration > 0;\n        a[4] = locale;\n        return substituteTimeAgo.apply(null, a);\n    }\n\n    // This function allows you to set the rounding function for relative time strings\n    function getSetRelativeTimeRounding (roundingFunction) {\n        if (roundingFunction === undefined) {\n            return round;\n        }\n        if (typeof(roundingFunction) === 'function') {\n            round = roundingFunction;\n            return true;\n        }\n        return false;\n    }\n\n    // This function allows you to set a threshold for relative time strings\n    function getSetRelativeTimeThreshold (threshold, limit) {\n        if (thresholds[threshold] === undefined) {\n            return false;\n        }\n        if (limit === undefined) {\n            return thresholds[threshold];\n        }\n        thresholds[threshold] = limit;\n        return true;\n    }\n\n    function humanize (withSuffix) {\n        var locale = this.localeData();\n        var output = relativeTime$1(this, !withSuffix, locale);\n\n        if (withSuffix) {\n            output = locale.pastFuture(+this, output);\n        }\n\n        return locale.postformat(output);\n    }\n\n    var abs$1 = Math.abs;\n\n    function toISOString$1() {\n        // for ISO strings we do not use the normal bubbling rules:\n        //  * milliseconds bubble up until they become hours\n        //  * days do not bubble at all\n        //  * months bubble up until they become years\n        // This is because there is no context-free conversion between hours and days\n        // (think of clock changes)\n        // and also not between days and months (28-31 days per month)\n        var seconds = abs$1(this._milliseconds) / 1000;\n        var days         = abs$1(this._days);\n        var months       = abs$1(this._months);\n        var minutes, hours, years;\n\n        // 3600 seconds -> 60 minutes -> 1 hour\n        minutes           = absFloor(seconds / 60);\n        hours             = absFloor(minutes / 60);\n        seconds %= 60;\n        minutes %= 60;\n\n        // 12 months -> 1 year\n        years  = absFloor(months / 12);\n        months %= 12;\n\n\n        // inspired by https://github.com/dordille/moment-isoduration/blob/master/moment.isoduration.js\n        var Y = years;\n        var M = months;\n        var D = days;\n        var h = hours;\n        var m = minutes;\n        var s = seconds;\n        var total = this.asSeconds();\n\n        if (!total) {\n            // this is the same as C#'s (Noda) and python (isodate)...\n            // but not other JS (goog.date)\n            return 'P0D';\n        }\n\n        return (total < 0 ? '-' : '') +\n            'P' +\n            (Y ? Y + 'Y' : '') +\n            (M ? M + 'M' : '') +\n            (D ? D + 'D' : '') +\n            ((h || m || s) ? 'T' : '') +\n            (h ? h + 'H' : '') +\n            (m ? m + 'M' : '') +\n            (s ? s + 'S' : '');\n    }\n\n    var proto$2 = Duration.prototype;\n\n    proto$2.abs            = abs;\n    proto$2.add            = add$1;\n    proto$2.subtract       = subtract$1;\n    proto$2.as             = as;\n    proto$2.asMilliseconds = asMilliseconds;\n    proto$2.asSeconds      = asSeconds;\n    proto$2.asMinutes      = asMinutes;\n    proto$2.asHours        = asHours;\n    proto$2.asDays         = asDays;\n    proto$2.asWeeks        = asWeeks;\n    proto$2.asMonths       = asMonths;\n    proto$2.asYears        = asYears;\n    proto$2.valueOf        = valueOf$1;\n    proto$2._bubble        = bubble;\n    proto$2.get            = get$2;\n    proto$2.milliseconds   = milliseconds;\n    proto$2.seconds        = seconds;\n    proto$2.minutes        = minutes;\n    proto$2.hours          = hours;\n    proto$2.days           = days;\n    proto$2.weeks          = weeks;\n    proto$2.months         = months;\n    proto$2.years          = years;\n    proto$2.humanize       = humanize;\n    proto$2.toISOString    = toISOString$1;\n    proto$2.toString       = toISOString$1;\n    proto$2.toJSON         = toISOString$1;\n    proto$2.locale         = locale;\n    proto$2.localeData     = localeData;\n\n    // Deprecations\n    proto$2.toIsoString = deprecate('toIsoString() is deprecated. Please use toISOString() instead (notice the capitals)', toISOString$1);\n    proto$2.lang = lang;\n\n    // Side effect imports\n\n    // FORMATTING\n\n    addFormatToken('X', 0, 0, 'unix');\n    addFormatToken('x', 0, 0, 'valueOf');\n\n    // PARSING\n\n    addRegexToken('x', matchSigned);\n    addRegexToken('X', matchTimestamp);\n    addParseToken('X', function (input, array, config) {\n        config._d = new Date(parseFloat(input, 10) * 1000);\n    });\n    addParseToken('x', function (input, array, config) {\n        config._d = new Date(toInt(input));\n    });\n\n    // Side effect imports\n\n\n    hooks.version = '2.16.0';\n\n    setHookCallback(createLocal);\n\n    hooks.fn                    = proto;\n    hooks.min                   = min;\n    hooks.max                   = max;\n    hooks.now                   = now;\n    hooks.utc                   = createUTC;\n    hooks.unix                  = createUnix;\n    hooks.months                = listMonths;\n    hooks.isDate                = isDate;\n    hooks.locale                = getSetGlobalLocale;\n    hooks.invalid               = createInvalid;\n    hooks.duration              = createDuration;\n    hooks.isMoment              = isMoment;\n    hooks.weekdays              = listWeekdays;\n    hooks.parseZone             = createInZone;\n    hooks.localeData            = getLocale;\n    hooks.isDuration            = isDuration;\n    hooks.monthsShort           = listMonthsShort;\n    hooks.weekdaysMin           = listWeekdaysMin;\n    hooks.defineLocale          = defineLocale;\n    hooks.updateLocale          = updateLocale;\n    hooks.locales               = listLocales;\n    hooks.weekdaysShort         = listWeekdaysShort;\n    hooks.normalizeUnits        = normalizeUnits;\n    hooks.relativeTimeRounding = getSetRelativeTimeRounding;\n    hooks.relativeTimeThreshold = getSetRelativeTimeThreshold;\n    hooks.calendarFormat        = getCalendarFormat;\n    hooks.prototype             = proto;\n\n    return hooks;\n\n}));","/home/travis/build/npmtest/node-npmtest-alloy/node_modules/alloy/Alloy/builtins/sha1.js":"/**\n * @class Alloy.builtins.sha1\n * A collection of utilities for calculating SHA-1 or HMAC-SHA-1 values.\n * To use the sha1 builtin library,\n * require it with the `alloy` root directory in your `require` call. For example:\n *\n *     var sha1 = require('/alloy/sha1');\n *     var sha1_digest = sha1.hex_sha1('The quick brown fox jumps over the lazy dog.');\n */\n/*\n * A JavaScript implementation of the Secure Hash Algorithm, SHA-1, as defined\n * in FIPS PUB 180-1\n * Version 2.1a Copyright Paul Johnston 2000 - 2002.\n * Other contributors: Greg Holt, Andrew Kepert, Ydnar, Lostinet\n * Distributed under the BSD License\n * See http://pajhome.org.uk/crypt/md5 for details.\n */\n\n/*\n * Configurable variables. You may need to tweak these to be compatible with\n * the server-side, but the defaults work in most cases.\n */\nvar hexcase = 0;\n/* hex output format. 0 - lowercase; 1 - uppercase */\nvar b64pad = '';\n/* base-64 pad character. '=' for strict RFC compliance */\nvar chrsz = 8;\n/* bits per input character. 8 - ASCII; 16 - Unicode */\n\n/*\n * These are the functions you'll usually want to call\n * They take string arguments and return either hex or base-64 encoded strings\n */\n\n/**\n * @method hex_sha1\n * Calculates the SHA-1 of a string and returns the value in hexadecimal.\n * @param {String} s String to use.\n * @return {String} SHA-1 value of the string in hexadecimal.\n */\nfunction hex_sha1(s) {\n\treturn binb2hex(core_sha1(str2binb(s), s.length * chrsz));\n}\n\n/**\n * @method b64_sha1\n * Calculates the SHA-1 of a string and returns the value in base-64.\n * @param {String} s String to use.\n * @return {String} SHA-1 value of the string in base-64.\n */\nfunction b64_sha1(s) {\n\treturn binb2b64(core_sha1(str2binb(s), s.length * chrsz));\n}\n\n/**\n * @method str_sha1\n * Calculates the SHA-1 of a string and returns the value as a string.\n * @param {String} s String to use.\n * @return {String} SHA-1 value of the string as a string.\n */\nfunction str_sha1(s) {\n\treturn binb2str(core_sha1(str2binb(s), s.length * chrsz));\n}\n\n/**\n * @method hex_hmac_sha1\n * Calculates the HMAC-SHA-1 of a key and some data, and returns the value in hexadecimal.\n * @param {String} key Key to use.\n * @param {String} data Data to use.\n * @return {String} HMAC-SHA-1 value of the string in hexadecimal.\n */\nfunction hex_hmac_sha1(key, data) {\n\treturn binb2hex(core_hmac_sha1(key, data));\n}\n\n/**\n * @method b64_hmac_sha1\n * Calculates the HMAC-SHA-1 of a key and some data, and returns the value in base-64.\n * @param {String} key Key to use.\n * @param {String} data Data to use.\n * @return {String} HMAC-SHA-1 value of the string in base-64.\n */\nfunction b64_hmac_sha1(key, data) {\n\treturn binb2b64(core_hmac_sha1(key, data));\n}\n\n/**\n * @method str_hmac_sha1\n * Calculates the HMAC-SHA-1 of a key and some data, and returns the value as a string.\n * @param {String} key Key to use.\n * @param {String} data Data to use.\n * @return {String} HMAC-SHA-1 value of the string as a string.\n */\nfunction str_hmac_sha1(key, data) {\n\treturn binb2str(core_hmac_sha1(key, data));\n}\n\n\n/*\n * Calculate the SHA-1 of an array of big-endian words, and a bit length\n */\n\nfunction core_sha1(x, len) { /* append padding */\n\tx[len >> 5] |= 0x80 << (24 - len % 32);\n\tx[((len + 64 >> 9) << 4) + 15] = len;\n\n\tvar w = Array(80);\n\tvar a = 1732584193;\n\tvar b = -271733879;\n\tvar c = -1732584194;\n\tvar d = 271733878;\n\tvar e = -1009589776;\n\n\tfor (var i = 0; i < x.length; i += 16) {\n\t\tvar olda = a;\n\t\tvar oldb = b;\n\t\tvar oldc = c;\n\t\tvar oldd = d;\n\t\tvar olde = e;\n\n\t\tfor (var j = 0; j < 80; j++) {\n\t\t\tif (j < 16) w[j] = x[i + j];\n\t\t\telse w[j] = rol(w[j - 3] ^ w[j - 8] ^ w[j - 14] ^ w[j - 16], 1);\n\t\t\tvar t = safe_add(safe_add(rol(a, 5), sha1_ft(j, b, c, d)), safe_add(safe_add(e, w[j]), sha1_kt(j)));\n\t\t\te = d;\n\t\t\td = c;\n\t\t\tc = rol(b, 30);\n\t\t\tb = a;\n\t\t\ta = t;\n\t\t}\n\n\t\ta = safe_add(a, olda);\n\t\tb = safe_add(b, oldb);\n\t\tc = safe_add(c, oldc);\n\t\td = safe_add(d, oldd);\n\t\te = safe_add(e, olde);\n\t}\n\treturn Array(a, b, c, d, e);\n\n}\n\n/*\n * Perform the appropriate triplet combination function for the current\n * iteration\n */\n\nfunction sha1_ft(t, b, c, d) {\n\tif (t < 20) return (b & c) | ((~b) & d);\n\tif (t < 40) return b ^ c ^ d;\n\tif (t < 60) return (b & c) | (b & d) | (c & d);\n\treturn b ^ c ^ d;\n}\n\n/*\n * Determine the appropriate additive constant for the current iteration\n */\n\nfunction sha1_kt(t) {\n\treturn (t < 20) ? 1518500249 : (t < 40) ? 1859775393 : (t < 60) ? -1894007588 : -899497514;\n}\n\n/*\n * Calculate the HMAC-SHA1 of a key and some data\n */\n\nfunction core_hmac_sha1(key, data) {\n\tvar bkey = str2binb(key);\n\tif (bkey.length > 16) bkey = core_sha1(bkey, key.length * chrsz);\n\n\tvar ipad = Array(16),\n\t\topad = Array(16);\n\tfor (var i = 0; i < 16; i++) {\n\t\tipad[i] = bkey[i] ^ 0x36363636;\n\t\topad[i] = bkey[i] ^ 0x5C5C5C5C;\n\t}\n\n\tvar hash = core_sha1(ipad.concat(str2binb(data)), 512 + data.length * chrsz);\n\treturn core_sha1(opad.concat(hash), 512 + 160);\n}\n\n/*\n * Add integers, wrapping at 2^32. This uses 16-bit operations internally\n * to work around bugs in some JS interpreters.\n */\n\nfunction safe_add(x, y) {\n\tvar lsw = (x & 0xFFFF) + (y & 0xFFFF);\n\tvar msw = (x >> 16) + (y >> 16) + (lsw >> 16);\n\treturn (msw << 16) | (lsw & 0xFFFF);\n}\n\n/*\n * Bitwise rotate a 32-bit number to the left.\n */\n\nfunction rol(num, cnt) {\n\treturn (num << cnt) | (num >>> (32 - cnt));\n}\n\n/*\n * Convert an 8-bit or 16-bit string to an array of big-endian words\n * In 8-bit function, characters >255 have their hi-byte silently ignored.\n */\n\nfunction str2binb(str) {\n\tvar bin = Array();\n\tvar mask = (1 << chrsz) - 1;\n\tfor (var i = 0; i < str.length * chrsz; i += chrsz)\n\t\tbin[i >> 5] |= (str.charCodeAt(i / chrsz) & mask) << (32 - chrsz - i % 32);\n\treturn bin;\n}\n\n/*\n * Convert an array of big-endian words to a string\n */\n\nfunction binb2str(bin) {\n\tvar str = '';\n\tvar mask = (1 << chrsz) - 1;\n\tfor (var i = 0; i < bin.length * 32; i += chrsz)\n\t\tstr += String.fromCharCode((bin[i >> 5] >>> (32 - chrsz - i % 32)) & mask);\n\treturn str;\n}\n\n/*\n * Convert an array of big-endian words to a hex string.\n */\n\nfunction binb2hex(binarray) {\n\tvar hex_tab = hexcase ? '0123456789ABCDEF' : '0123456789abcdef';\n\tvar str = '';\n\tfor (var i = 0; i < binarray.length * 4; i++) {\n\t\tstr += hex_tab.charAt((binarray[i >> 2] >> ((3 - i % 4) * 8 + 4)) & 0xF) + hex_tab.charAt((binarray[i >> 2] >> ((3 - i % 4) * 8)) & 0xF);\n\t}\n\treturn str;\n}\n\n/*\n * Convert an array of big-endian words to a base-64 string\n */\n\nfunction binb2b64(binarray) {\n\tvar tab = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';\n\tvar str = '';\n\tfor (var i = 0; i < binarray.length * 4; i += 3) {\n\t\tvar triplet = (((binarray[i >> 2] >> 8 * (3 - i % 4)) & 0xFF) << 16) | (((binarray[i + 1 >> 2] >> 8 * (3 - (i + 1) % 4)) & 0xFF) << 8) | ((binarray[i + 2 >> 2] >> 8 * (3 - (i + 2) % 4)) & 0xFF);\n\t\tfor (var j = 0; j < 4; j++) {\n\t\t\tif (i * 8 + j * 6 > binarray.length * 32) str += b64pad;\n\t\t\telse str += tab.charAt((triplet >> 6 * (3 - j)) & 0x3F);\n\t\t}\n\t}\n\treturn str;\n}\n\n\nexports.binb2b64 = binb2b64;\nexports.binb2hex = binb2hex;\nexports.binb2str = binb2str;\nexports.str2binb = str2binb;\nexports.hex_sha1 = hex_sha1;\nexports.b64_sha1 = b64_sha1;\nexports.str_sha1 = str_sha1;\nexports.hex_hmac_sha1 = hex_hmac_sha1;\nexports.b64_hmac_sha1 = b64_hmac_sha1;\nexports.str_hmac_sha1 = str_hmac_sha1;\n\n","/home/travis/build/npmtest/node-npmtest-alloy/node_modules/alloy/Alloy/builtins/social.js":"/**\n * @class Alloy.builtins.social\n * A collection of useful social media provider utilities. Currently, this module only supports\n * Twitter and the following features:\n *\n * - Logging into Twitter and authorizing the application through the OAuth protocol.\n * - Posting tweets to the user's Twitter account.\n *\n * To use the social builtin library, require it with the `alloy` root\n * directory in your `require` call. For example:\n *\n *     var social = require('/alloy/social').create({\n *         consumerSecret: 'consumer-secret',\n *         consumerKey: 'consumer-key'\n *     });\n *\n * ## Login and Authorization\n *\n * To use a social media provider, a user must log in and authorize the application to perform\n * certain actions, such as accessing profile information or posting messages.\n *\n * Call `authorize` to prompt the user to login and authorize the application.  For Twitter, a\n * dialog box will appear asking the user for their permission and login credentials.\n *\n * Before calling `authorize`, the application will need a consumer key and secret provided by the\n * social media service provider for the OAuth protocol, used when calling `create`.\n * For Twitter, these are provided when registering an application:\n * [https://dev.twitter.com/apps/new](https://dev.twitter.com/apps/new)\n *\n * ## Example\n *\n * This example authorizes the application, posts a message to the user's Twitter account, then\n * deauthorizes the application.\n *\n *\t\t// If not authorized, get authorization from the user\n *\t\tif(!social.isAuthorized()) {\n *\t\t\tsocial.authorize();\n *\t\t}\n *\n *\t\t// Post a message\n *\t  // Setup both callbacks for confirmation\n *\t  // Note: share() automatically calls authorize() so an explicit call as above is unnecessary\n *\t\tsocial.share({\n *\t\t\tmessage: \"Salut, Monde!\",\n *\t\t\tsuccess: function(e) {alert('Success!')},\n *\t\t\terror: function(e) {alert('Error!')}\n *\t\t});\n *\n *\t\t// Deauthorize the application\n *\t\tsocial.deauthorize();\n */\n\nfunction hex_sha1(s) {\n\treturn binb2hex(core_sha1(str2binb(s), s.length * chrsz));\n}\n\nfunction b64_sha1(s) {\n\treturn binb2b64(core_sha1(str2binb(s), s.length * chrsz));\n}\n\nfunction str_sha1(s) {\n\treturn binb2str(core_sha1(str2binb(s), s.length * chrsz));\n}\n\nfunction hex_hmac_sha1(key, data) {\n\treturn binb2hex(core_hmac_sha1(key, data));\n}\n\nfunction b64_hmac_sha1(key, data) {\n\treturn binb2b64(core_hmac_sha1(key, data));\n}\n\nfunction str_hmac_sha1(key, data) {\n\treturn binb2str(core_hmac_sha1(key, data));\n}\n\nfunction sha1_vm_test() {\n\treturn hex_sha1('abc') == 'a9993e364706816aba3e25717850c26c9cd0d89d';\n}\n\nfunction core_sha1(x, len) {\n\tx[len >> 5] |= 128 << 24 - len % 32, x[(len + 64 >> 9 << 4) + 15] = len;\n\tvar w = Array(80), a = 1732584193, b = -271733879, c = -1732584194, d = 271733878, e = -1009589776;\n\tfor (var i = 0; i < x.length; i += 16) {\n\t\tvar olda = a, oldb = b, oldc = c, oldd = d, olde = e;\n\t\tfor (var j = 0; j < 80; j++) {\n\t\t\tj < 16 ? w[j] = x[i + j] : w[j] = rol(w[j - 3] ^ w[j - 8] ^ w[j - 14] ^ w[j - 16], 1);\n\t\t\tvar t = safe_add(safe_add(rol(a, 5), sha1_ft(j, b, c, d)), safe_add(safe_add(e, w[j]), sha1_kt(j)));\n\t\t\te = d, d = c, c = rol(b, 30), b = a, a = t;\n\t\t}\n\t\ta = safe_add(a, olda), b = safe_add(b, oldb), c = safe_add(c, oldc), d = safe_add(d, oldd), e = safe_add(e, olde);\n\t}\n\treturn Array(a, b, c, d, e);\n}\n\nfunction sha1_ft(t, b, c, d) {\n\treturn t < 20 ? b & c | ~b & d : t < 40 ? b ^ c ^ d : t < 60 ? b & c | b & d | c & d : b ^ c ^ d;\n}\n\nfunction sha1_kt(t) {\n\treturn t < 20 ? 1518500249 : t < 40 ? 1859775393 : t < 60 ? -1894007588 : -899497514;\n}\n\nfunction core_hmac_sha1(key, data) {\n\tvar bkey = str2binb(key);\n\tbkey.length > 16 && (bkey = core_sha1(bkey, key.length * chrsz));\n\tvar ipad = Array(16), opad = Array(16);\n\tfor (var i = 0; i < 16; i++) ipad[i] = bkey[i] ^ 909522486, opad[i] = bkey[i] ^ 1549556828;\n\tvar hash = core_sha1(ipad.concat(str2binb(data)), 512 + data.length * chrsz);\n\treturn core_sha1(opad.concat(hash), 672);\n}\n\nfunction safe_add(x, y) {\n\tvar lsw = (x & 65535) + (y & 65535), msw = (x >> 16) + (y >> 16) + (lsw >> 16);\n\treturn msw << 16 | lsw & 65535;\n}\n\nfunction rol(num, cnt) {\n\treturn num << cnt | num >>> 32 - cnt;\n}\n\nfunction str2binb(str) {\n\tvar bin = Array(), mask = (1 << chrsz) - 1;\n\tfor (var i = 0; i < str.length * chrsz; i += chrsz) bin[i >> 5] |= (str.charCodeAt(i / chrsz) & mask) << 32 - chrsz - i % 32;\n\treturn bin;\n}\n\nfunction binb2str(bin) {\n\tvar str = '', mask = (1 << chrsz) - 1;\n\tfor (var i = 0; i < bin.length * 32; i += chrsz) str += String.fromCharCode(bin[i >> 5] >>> 32 - chrsz - i % 32 & mask);\n\treturn str;\n}\n\nfunction binb2hex(binarray) {\n\tvar hex_tab = hexcase ? '0123456789ABCDEF' : '0123456789abcdef', str = '';\n\tfor (var i = 0; i < binarray.length * 4; i++) str += hex_tab.charAt(binarray[i >> 2] >> (3 - i % 4) * 8 + 4 & 15) + hex_tab.charAt(binarray[i >> 2] >> (3 - i % 4) * 8 & 15);\n\treturn str;\n}\n\nfunction binb2b64(binarray) {\n\tvar tab = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/', str = '';\n\tfor (var i = 0; i < binarray.length * 4; i += 3) {\n\t\tvar triplet = (binarray[i >> 2] >> 8 * (3 - i % 4) & 255) << 16 | (binarray[i + 1 >> 2] >> 8 * (3 - (i + 1) % 4) & 255) << 8 | binarray[i + 2 >> 2] >> 8 * (3 - (i + 2) % 4) & 255;\n\t\tfor (var j = 0; j < 4; j++) i * 8 + j * 6 > binarray.length * 32 ? str += b64pad : str += tab.charAt(triplet >> 6 * (3 - j) & 63);\n\t}\n\treturn str;\n}\n\nvar hexcase = 0, b64pad = '', chrsz = 8, OAuth;\n\n\nOAuth == null && (OAuth = {}), OAuth.setProperties = function(into, from) {\n\tif (into != null && from != null) for (var key in from) into[key] = from[key];\n\treturn into;\n}, OAuth.setProperties(OAuth, {\n\tpercentEncode: function(s) {\n\t\tif (s == null) return '';\n\t\tif (s instanceof Array) {\n\t\t\tvar e = '';\n\t\t\tfor (var i = 0; i < s.length; ++s) e != '' && (e += '&'), e += OAuth.percentEncode(s[i]);\n\t\t\treturn e;\n\t\t}\n\t\treturn s = encodeURIComponent(s), s = s.replace(/\\!/g, '%21'), s = s.replace(/\\*/g, '%2A'), s = s.replace(/\\'/g, '%27'), s = s.replace(/\\(/g, '%28'), s = s.replace(/\\)/g, '%29'), s;\n\t},\n\tdecodePercent: function(s) {\n\t\treturn s != null && (s = s.replace(/\\+/g, ' ')), decodeURIComponent(s);\n\t},\n\tgetParameterList: function(parameters) {\n\t\tif (parameters == null) return [];\n\t\tif (typeof parameters != 'object') return OAuth.decodeForm(parameters + '');\n\t\tif (parameters instanceof Array) return parameters;\n\t\tvar list = [];\n\t\tfor (var p in parameters) list.push([ p, parameters[p] ]);\n\t\treturn list;\n\t},\n\tgetParameterMap: function(parameters) {\n\t\tif (parameters == null) return {};\n\t\tif (typeof parameters != 'object') return OAuth.getParameterMap(OAuth.decodeForm(parameters + ''));\n\t\tif (parameters instanceof Array) {\n\t\t\tvar map = {};\n\t\t\tfor (var p = 0; p < parameters.length; ++p) {\n\t\t\t\tvar key = parameters[p][0];\n\t\t\t\tmap[key] === undefined && (map[key] = parameters[p][1]);\n\t\t\t}\n\t\t\treturn map;\n\t\t}\n\t\treturn parameters;\n\t},\n\tgetParameter: function(parameters, name) {\n\t\tif (parameters instanceof Array) {\n\t\t\tfor (var p = 0; p < parameters.length; ++p) if (parameters[p][0] == name) return parameters[p][1];\n\t\t\treturn null;\n\t\t}\n\t\treturn OAuth.getParameterMap(parameters)[name];\n\t},\n\tformEncode: function(parameters) {\n\t\tvar form = '', list = OAuth.getParameterList(parameters);\n\t\tfor (var p = 0; p < list.length; ++p) {\n\t\t\tvar value = list[p][1];\n\t\t\tvalue == null && (value = ''), form != '' && (form += '&'), form += OAuth.percentEncode(list[p][0]) + '=' + OAuth.percentEncode(value);\n\t\t}\n\t\treturn form;\n\t},\n\tdecodeForm: function(form) {\n\t\tvar list = [], nvps = form.split('&');\n\t\tfor (var n = 0; n < nvps.length; ++n) {\n\t\t\tvar nvp = nvps[n];\n\t\t\tif (nvp == '') continue;\n\t\t\tvar equals = nvp.indexOf('='), name, value;\n\t\t\tequals < 0 ? (name = OAuth.decodePercent(nvp), value = null) : (name = OAuth.decodePercent(nvp.substring(0, equals)), value = OAuth.decodePercent(nvp.substring(equals + 1))), list.push([ name, value ]);\n\t\t}\n\t\treturn list;\n\t},\n\tsetParameter: function(message, name, value) {\n\t\tvar parameters = message.parameters;\n\t\tif (parameters instanceof Array) {\n\t\t\tfor (var p = 0; p < parameters.length; ++p) parameters[p][0] == name && (value === undefined ? parameters.splice(p, 1) : (parameters[p][1] = value, value = undefined));\n\t\t\tvalue !== undefined && parameters.push([ name, value ]);\n\t\t} else parameters = OAuth.getParameterMap(parameters), parameters[name] = value, message.parameters = parameters;\n\t},\n\tsetParameters: function(message, parameters) {\n\t\tvar list = OAuth.getParameterList(parameters);\n\t\tfor (var i = 0; i < list.length; ++i) OAuth.setParameter(message, list[i][0], list[i][1]);\n\t},\n\tcompleteRequest: function(message, accessor) {\n\t\tmessage.method == null && (message.method = 'GET');\n\t\tvar map = OAuth.getParameterMap(message.parameters);\n\t\tmap.oauth_consumer_key == null && OAuth.setParameter(message, 'oauth_consumer_key', accessor.consumerKey || ''), map.oauth_token == null && accessor.token != null && OAuth.setParameter(message, 'oauth_token', accessor.token), map.oauth_version == null && OAuth.setParameter(message, 'oauth_version', '1.0'), map.oauth_timestamp == null && OAuth.setParameter(message, 'oauth_timestamp', OAuth.timestamp()), map.oauth_nonce == null && OAuth.setParameter(message, 'oauth_nonce', OAuth.nonce(6)), OAuth.SignatureMethod.sign(message, accessor);\n\t},\n\tsetTimestampAndNonce: function(message) {\n\t\tOAuth.setParameter(message, 'oauth_timestamp', OAuth.timestamp()), OAuth.setParameter(message, 'oauth_nonce', OAuth.nonce(6));\n\t},\n\taddToURL: function(url, parameters) {\n\t\tnewURL = url;\n\t\tif (parameters != null) {\n\t\t\tvar toAdd = OAuth.formEncode(parameters);\n\t\t\tif (toAdd.length > 0) {\n\t\t\t\tvar q = url.indexOf('?');\n\t\t\t\tq < 0 ? newURL += '?' : newURL += '&', newURL += toAdd;\n\t\t\t}\n\t\t}\n\t\treturn newURL;\n\t},\n\tgetAuthorizationHeader: function(realm, parameters) {\n\t\tvar header = 'OAuth realm=\"' + OAuth.percentEncode(realm) + '\"', list = OAuth.getParameterList(parameters);\n\t\tfor (var p = 0; p < list.length; ++p) {\n\t\t\tvar parameter = list[p], name = parameter[0];\n\t\t\tname.indexOf('oauth_') == 0 && (header += ',' + OAuth.percentEncode(name) + '=\"' + OAuth.percentEncode(parameter[1]) + '\"');\n\t\t}\n\t\treturn header;\n\t},\n\tcorrectTimestampFromSrc: function(parameterName) {\n\t\tparameterName = parameterName || 'oauth_timestamp';\n\t\tvar scripts = document.getElementsByTagName('script');\n\t\tif (scripts == null || !scripts.length) return;\n\t\tvar src = scripts[scripts.length - 1].src;\n\t\tif (!src) return;\n\t\tvar q = src.indexOf('?');\n\t\tif (q < 0) return;\n\t\tparameters = OAuth.getParameterMap(OAuth.decodeForm(src.substring(q + 1)));\n\t\tvar t = parameters[parameterName];\n\t\tif (t == null) return;\n\t\tOAuth.correctTimestamp(t);\n\t},\n\tcorrectTimestamp: function(timestamp) {\n\t\tOAuth.timeCorrectionMsec = timestamp * 1e3 - (new Date).getTime();\n\t},\n\ttimeCorrectionMsec: 0,\n\ttimestamp: function() {\n\t\tvar t = (new Date).getTime() + OAuth.timeCorrectionMsec;\n\t\treturn '' + Math.floor(t / 1e3);\n\t},\n\tnonce: function(length) {\n\t\tvar chars = OAuth.nonce.CHARS, result = '';\n\t\tfor (var i = 0; i < length; ++i) {\n\t\t\tvar rnum = Math.floor(Math.random() * chars.length);\n\t\t\tresult += chars.substring(rnum, rnum + 1);\n\t\t}\n\t\treturn result;\n\t}\n}), OAuth.nonce.CHARS = '0123456789ABCDEFGHIJKLMNOPQRSTUVWXTZabcdefghiklmnopqrstuvwxyz', OAuth.declareClass = function(parent, name, newConstructor) {\n\tvar previous = parent[name];\n\tparent[name] = newConstructor;\n\tif (newConstructor != null && previous != null) for (var key in previous) key != 'prototype' && (newConstructor[key] = previous[key]);\n\treturn newConstructor;\n}, OAuth.declareClass(OAuth, 'SignatureMethod', function() {}), OAuth.setProperties(OAuth.SignatureMethod.prototype, {\n\tsign: function(message) {\n\t\tvar baseString = OAuth.SignatureMethod.getBaseString(message), signature = this.getSignature(baseString);\n\t\treturn OAuth.setParameter(message, 'oauth_signature', signature), signature;\n\t},\n\tinitialize: function(name, accessor) {\n\t\tvar consumerSecret;\n\t\taccessor.accessorSecret != null && name.length > 9 && name.substring(name.length - 9) == '-Accessor' ? consumerSecret = accessor.accessorSecret : consumerSecret = accessor.consumerSecret, this.key = OAuth.percentEncode(consumerSecret) + '&' + OAuth.percentEncode(accessor.tokenSecret);\n\t}\n}), OAuth.setProperties(OAuth.SignatureMethod, {\n\tsign: function(message, accessor) {\n\t\tvar name = OAuth.getParameterMap(message.parameters).oauth_signature_method;\n\t\tif (name == null || name == '') name = 'HMAC-SHA1', OAuth.setParameter(message, 'oauth_signature_method', name);\n\t\tOAuth.SignatureMethod.newMethod(name, accessor).sign(message);\n\t},\n\tnewMethod: function(name, accessor) {\n\t\tvar impl = OAuth.SignatureMethod.REGISTERED[name];\n\t\tif (impl != null) {\n\t\t\tvar method = new impl;\n\t\t\treturn method.initialize(name, accessor), method;\n\t\t}\n\t\tvar err = new Error('signature_method_rejected'), acceptable = '';\n\t\tfor (var r in OAuth.SignatureMethod.REGISTERED) acceptable != '' && (acceptable += '&'), acceptable += OAuth.percentEncode(r);\n\t\tthrow err.oauth_acceptable_signature_methods = acceptable, err;\n\t},\n\tREGISTERED: {},\n\tregisterMethodClass: function(names, classConstructor) {\n\t\tfor (var n = 0; n < names.length; ++n) OAuth.SignatureMethod.REGISTERED[names[n]] = classConstructor;\n\t},\n\tmakeSubclass: function(getSignatureFunction) {\n\t\tvar superClass = OAuth.SignatureMethod,\n\t\t\tsubClass = function() {\n\t\t\t\tsuperClass.call(this);\n\t\t\t};\n\t\treturn subClass.prototype = new superClass, subClass.prototype.getSignature = getSignatureFunction, subClass.prototype.constructor = subClass, subClass;\n\t},\n\tgetBaseString: function(message) {\n\t\tvar URL = message.action, q = URL.indexOf('?'), parameters;\n\t\tif (q < 0) parameters = message.parameters; else {\n\t\t\tparameters = OAuth.decodeForm(URL.substring(q + 1));\n\t\t\tvar toAdd = OAuth.getParameterList(message.parameters);\n\t\t\tfor (var a = 0; a < toAdd.length; ++a) parameters.push(toAdd[a]);\n\t\t}\n\t\treturn OAuth.percentEncode(message.method.toUpperCase()) + '&' + OAuth.percentEncode(OAuth.SignatureMethod.normalizeUrl(URL)) + '&' + OAuth.percentEncode(OAuth.SignatureMethod.normalizeParameters(parameters));\n\t},\n\tnormalizeUrl: function(url) {\n\t\tvar uri = OAuth.SignatureMethod.parseUri(url), scheme = uri.protocol.toLowerCase(), authority = uri.authority.toLowerCase(), dropPort = scheme == 'http' && uri.port == 80 || scheme == 'https' && uri.port == 443;\n\t\tif (dropPort) {\n\t\t\tvar index = authority.lastIndexOf(':');\n\t\t\tindex >= 0 && (authority = authority.substring(0, index));\n\t\t}\n\t\tvar path = uri.path;\n\t\treturn path || (path = '/'), scheme + '://' + authority + path;\n\t},\n\tparseUri: function(str) {\n\t\tvar o = {\n\t\t\t\tkey: [ 'source', 'protocol', 'authority', 'userInfo', 'user', 'password', 'host', 'port', 'relative', 'path', 'directory', 'file', 'query', 'anchor' ],\n\t\t\t\tparser: {\n\t\t\t\t\tstrict: /^(?:([^:\\/?#]+):)?(?:\\/\\/((?:(([^:@\\/]*):?([^:@\\/]*))?@)?([^:\\/?#]*)(?::(\\d*))?))?((((?:[^?#\\/]*\\/)*)([^?#]*))(?:\\?([^#]*))?(?:#(.*))?)/\n\t\t\t\t}\n\t\t\t},\n\t\t\tm = o.parser.strict.exec(str),\n\t\t\turi = {},\n\t\t\ti = 14;\n\n\t\twhile (i--) uri[o.key[i]] = m[i] || '';\n\t\treturn uri;\n\t},\n\tnormalizeParameters: function(parameters) {\n\t\tif (parameters == null) return '';\n\t\tvar list = OAuth.getParameterList(parameters), sortable = [];\n\t\tfor (var p = 0; p < list.length; ++p) {\n\t\t\tvar nvp = list[p];\n\t\t\tnvp[0] != 'oauth_signature' && sortable.push([ OAuth.percentEncode(nvp[0]) + ' ' + OAuth.percentEncode(nvp[1]), nvp ]);\n\t\t}\n\t\tsortable.sort(function(a, b) {\n\t\t\treturn a[0] < b[0] ? -1 : a[0] > b[0] ? 1 : 0;\n\t\t});\n\t\tvar sorted = [];\n\t\tfor (var s = 0; s < sortable.length; ++s) sorted.push(sortable[s][1]);\n\t\treturn OAuth.formEncode(sorted);\n\t}\n}), OAuth.SignatureMethod.registerMethodClass([ 'PLAINTEXT', 'PLAINTEXT-Accessor' ], OAuth.SignatureMethod.makeSubclass(function(baseString) {\n\treturn this.key;\n})), OAuth.SignatureMethod.registerMethodClass([ 'HMAC-SHA1', 'HMAC-SHA1-Accessor' ], OAuth.SignatureMethod.makeSubclass(function(baseString) {\n\tb64pad = '=';\n\tvar signature = b64_hmac_sha1(this.key, baseString);\n\treturn signature;\n}));\n\ntry {\n\tOAuth.correctTimestampFromSrc();\n} catch (e) {\n\t//do nothing\n}\n\nvar OAuthAdapter = function(pConsumerSecret, pConsumerKey, pSignatureMethod) {\n    function showLoading() {\n        if (loading) return;\n        loading = !0, loadingView && (loadingView.value = 0), estimateID = firstLoad ? \"tokenRequest\" : \"pageLoad\", estimates[estimateID] || (estimates[estimateID] = firstLoad ? 2e3 : 1e3), firstLoad = !1, startTime = (new Date).getTime(), intervalID = setInterval(updateProgress, 30), webView && webView.hide(), loadingView && loadingView.show(), loadingContainer && loadingContainer.show();\n    }\n    function updateProgress() {\n        loadingView && (loadingView.value = ((new Date).getTime() - startTime) / estimates[estimateID]);\n    }\n    function authorizeUICallback(e) {\n        var response = e.source.evalJS('(p = document.getElementById(\"oauth_pin\")) && p.innerHTML;');\n        response ? (pin = response.split(\"<code>\")[1].split(\"</code>\")[0], destroyAuthorizeUI(), receivePinCallback()) : (loadingView && loadingView.hide(), loadingContainer && loadingContainer.hide(), webView && webView.show()), loading = !1, clearInterval(intervalID), estimates[estimateID] = (new Date).getTime() - startTime, Ti.App.Properties.setString(\"Social-LoadingEstimates\", JSON.stringify(estimates));\n    }\n    var  consumerSecret = pConsumerSecret, consumerKey = pConsumerKey, signatureMethod = pSignatureMethod, pin = null, requestToken = null, requestTokenSecret = null, accessToken = null, accessTokenSecret = null, accessor = {\n        consumerSecret: consumerSecret,\n        tokenSecret: \"\"\n    }, window = null, view = null, webView = null, loadingView = null, loadingContainer = null, receivePinCallback = null, accessTokenStore = {};\n    this.loadAccessToken = function(pService) {\n        var token;\n        if (accessTokenStore[pService]) token = accessTokenStore[pService]; else {\n            var raw = Ti.App.Properties.getString(\"Social.js-AccessToken-\" + pService, \"\");\n            if (!raw) return;\n            try {\n                token = accessTokenStore[pService] = JSON.parse(raw);\n            } catch (err) {\n                Ti.API.error(\"Failed to parse stored access token for \" + pService + \"!\"), Ti.API.error(err);\n                return;\n            }\n        }\n        token.accessToken && (accessToken = token.accessToken), token.accessTokenSecret && (accessTokenSecret = token.accessTokenSecret);\n    }, this.saveAccessToken = function(pService) {\n        accessTokenStore[pService] = {\n            accessToken: accessToken,\n            accessTokenSecret: accessTokenSecret\n        }, Ti.App.Properties.setString(\"Social.js-AccessToken-\" + pService, JSON.stringify(accessTokenStore[pService]));\n    }, this.clearAccessToken = function(pService) {\n        delete accessTokenStore[pService], Ti.App.Properties.setString(\"Social.js-AccessToken-\" + pService, null), accessToken = null, accessTokenSecret = null;\n    }, this.isAuthorized = function() {\n        return accessToken != null && accessTokenSecret != null;\n    };\n    var createMessage = function(pUrl) {\n        var message = {\n            action: pUrl,\n            method: \"POST\",\n            parameters: []\n        };\n        return message.parameters.push([ \"oauth_consumer_key\", consumerKey ]), message.parameters.push([ \"oauth_signature_method\", signatureMethod ]), message;\n    };\n    this.getPin = function() {\n        return pin;\n    }, this.getRequestToken = function(pUrl, callback) {\n        accessor.tokenSecret = \"\";\n        var message = createMessage(pUrl);\n        OAuth.setTimestampAndNonce(message), OAuth.SignatureMethod.sign(message, accessor);\n        var done = !1, client = Ti.Network.createHTTPClient({\n            onload: function() {\n                var responseParams = OAuth.getParameterMap(this.responseText);\n                requestToken = responseParams.oauth_token, requestTokenSecret = responseParams.oauth_token_secret, callback({\n                    success: !0,\n                    token: this.responseText\n                }), done = !0;\n            },\n            onerror: function() {\n                Ti.API.error(\"Social.js: FAILED to getRequestToken!\"), Ti.API.error(this.responseText), callback({\n                    success: !1\n                }), done = !0;\n            }\n        });\n        client.open(\"POST\", pUrl), client.send(OAuth.getParameterMap(message.parameters));\n    };\n    var destroyAuthorizeUI = function() {\n        if (window == null) return;\n        try {\n            webView.removeEventListener(\"load\", authorizeUICallback), webView.removeEventListener(\"beforeload\", showLoading), loadingView.hide(), window.close(), loading = null, webView = null, loadingView = null, loading = !1, firstLoad = !0, view = null, window = null;\n        } catch (ex) {\n            Ti.API.debug(\"Cannot destroy the authorize UI. Ignoring.\");\n        }\n    }, firstLoad = !0, loading = !1, estimates = JSON.parse(Ti.App.Properties.getString(\"Social-LoadingEstimates\", \"{}\")), estimateID, startTime, intervalID = 0;\n    this.showLoadingUI = function() {\n        var animation = require('/alloy/animation');\n        var isIOS7 = OS_IOS && parseInt(Ti.Platform.version, 10) > 6 ? true : false\n        window = Ti.UI.createWindow({\n            backgroundColor: \"transparent\",\n            zIndex: 1e3,\n            opacity: 0,\n            navBarHidden: true\n        }), view = Ti.UI.createView({\n            top: isIOS7 ? \"30dp\" : \"10dp\",\n            right: \"10dp\",\n            bottom: \"10dp\",\n            left: \"10dp\",\n            backgroundColor: \"#52D3FE\",\n            border: 10,\n            borderColor: \"#52D3FE\",\n            borderRadius: 10,\n            borderWidth: 4,\n            zIndex: -1\n        });\n        var closeLabelContainer = Ti.UI.createView({\n            top: isIOS7 ? \"20dp\" : \"0dp\",\n            right: 0,\n            height: \"30dp\",\n            width: \"32dp\"\n        }), closeLabel = Ti.UI.createButton({\n            font: {\n                fontSize: \"12sp\",\n                fontWeight: \"bold\"\n            },\n            backgroundColor: \"#52D3FE\",\n            borderColor: \"#52D3FE\",\n            color: \"#fff\",\n            style: 0,\n            borderRadius: 6,\n            title: \"X\",\n            top: \"3dp\",\n            right: \"3dp\",\n            width: \"25dp\",\n            height: \"25dp\"\n        });\n        closeLabelContainer.addEventListener(\"click\", destroyAuthorizeUI), window.open();\n        loadingContainer = Ti.UI.createView({\n            backgroundColor: \"#fff\"\n        }), loadingView = Ti.UI.createProgressBar({\n            min: 0,\n            max: 1,\n            value: .5,\n            message: \"Loading, please wait.\",\n            backgroundColor: \"#fff\",\n            font: {\n                fontSize: \"14sp\",\n                fontWeight: \"bold\"\n            },\n            style: 0\n        }), view.add(loadingContainer), loadingContainer.add(loadingView), loadingView.show(), closeLabelContainer.add(closeLabel), window.add(view), window.add(closeLabelContainer);\n        animation.popIn(window);\n        showLoading();\n    }, this.showAuthorizeUI = function(pUrl, pReceivePinCallback) {\n        receivePinCallback = pReceivePinCallback;\n        webView = Ti.UI.createWebView({\n            url: pUrl,\n            autoDetect: [ Ti.UI.AUTODETECT_NONE ]\n        }), webView.addEventListener(\"beforeload\", showLoading), webView.addEventListener(\"load\", authorizeUICallback), view.add(webView);\n    }, this.getAccessToken = function(pUrl, callback) {\n        accessor.tokenSecret = requestTokenSecret;\n        var message = createMessage(pUrl);\n        message.parameters.push([ \"oauth_token\", requestToken ]), message.parameters.push([ \"oauth_verifier\", pin ]), OAuth.setTimestampAndNonce(message), OAuth.SignatureMethod.sign(message, accessor);\n        var parameterMap = OAuth.getParameterMap(message.parameters), client = Ti.Network.createHTTPClient({\n            onload: function() {\n\t\tvar responseParams = OAuth.getParameterMap(this.responseText);\n\t\tvar userid = responseParams.user_id;\n\t\tvar username = responseParams.screen_name;\n\t\t\t\taccessToken = responseParams.oauth_token, accessTokenSecret = responseParams.oauth_token_secret, callback({\n\t\t\t\t\tsuccess: !0, username:username, userid:userid\n\t\t\t\t});\n\t\t\t},\n\t\t\tonerror: function() {\n\t\t\t\tTi.API.error('Social.js: FAILED to getAccessToken!'), Ti.API.error(this.responseText), callback({\n\t\t\t\t\tsuccess: !1\n\t\t\t\t});\n\t\t\t}\n\t\t});\n\t\tclient.open('POST', pUrl), client.send(parameterMap);\n\t}, this.send = function(options, callback) {\n\t\tvar pUrl = options.url, pParameters = options.parameters, pTitle = options.title, pSuccessMessage = options.onSuccess, pErrorMessage = options.onError;\n\t\tif (accessToken == null || accessTokenSecret == null) {\n\t\t\tTi.API.debug(\"The send status cannot be processed as the client doesn't have an access token. Authorize before trying to send.\");\n\t\t\treturn;\n\t\t}\n\t\taccessor.tokenSecret = accessTokenSecret;\n\t\tvar message = createMessage(pUrl);\n\t\tmessage.parameters.push([ 'oauth_token', accessToken ]);\n\t\tfor (p in pParameters) message.parameters.push(pParameters[p]);\n\t\tOAuth.setTimestampAndNonce(message), OAuth.SignatureMethod.sign(message, accessor);\n\t\tvar parameterMap = OAuth.getParameterMap(message.parameters), client = Ti.Network.createHTTPClient({\n\t\t\tonload: function() {\n\t\t\t\tclient.status == 200 ? pSuccessMessage && pSuccessMessage(this.responseText) : pErrorMessage && pErrorMessage(this.responseText);\n\t\t\t},\n\t\t\tonerror: function() {\n\t\t\t\tTi.API.error('Social.js: FAILED to send a request!'), pErrorMessage && pErrorMessage(this.responseText);\n\t\t\t}\n\t\t});\n\t\tclient.open('POST', pUrl), client.send(parameterMap);\n\t};\n}, supportedSites = {\n\ttwitter: {\n\t\taccessToken: 'https://api.twitter.com/oauth/access_token',\n\t\trequestToken: 'https://api.twitter.com/oauth/request_token',\n\t\tauthorize: 'https://api.twitter.com/oauth/authorize?',\n\t\tupdate: 'https://api.twitter.com/1.1/statuses/update.json'\n\t}\n};\n\n/**\n * @method create\n * Initializes an OAuth session to the service provider.\n * If a previous access token exists, it will be loaded.\n * @param {...*} settings OAuth session settings.\n * @param {String} [settings.site='twitter'] Site to access. Only 'twitter' is working.\n * @param {String} settings.consumerSecret Shared secret used to authenticate the key.\n * @param {String} settings.consumerKey Key used to identify the client to the service provider.\n * @return {Object} Instance of social to make subsequent API calls.\n */\n\nexports.create = function(settings) {\n\tvar site = (settings.site || 'twitter').toLowerCase(), adapter = new OAuthAdapter(settings.consumerSecret, settings.consumerKey, 'HMAC-SHA1');\n\tadapter.loadAccessToken(site);\n\tvar urls = supportedSites[site];\n\treturn urls == null ? (alert('The Social.js module does not support ' + site + ' yet!'), null) : {\n\t\t/**\n\t\t * @method isAuthorized\n\t\t * Returns 'true' if the client is authorized by the service provider.\n\t\t * @return {Boolean} Returns 'true' if authorized else 'false'.\n\t\t */\n\t\tisAuthorized: function() {\n\t\t\treturn adapter.isAuthorized();\n\t\t},\n\t\t/**\n\t\t * @method deauthorize\n\t\t * Deauthorizes the client and clears the access token.\n\t\t */\n\t\tdeauthorize: function() {\n\t\t\tadapter.clearAccessToken(site);\n\t\t},\n\t\t/**\n\t\t * @method authorize\n\t\t * Authorizes the client to the service provider to access user data.\n\t\t * If successful, the client will receive an access token, which will be saved for future\n\t\t * usage.\n\t\t * Call this function after opening the parent view or else the authorize UI window will\n\t\t * appear in the background behind the view and unusable to the user.\n\t\t * @param {Function} [callback] Callback function executed after successfully retrieving\n\t\t * an access token.\n\t\t */\n\t\tauthorize: function(callback) {\n\t\t\tfunction receivePin() {\n\t\t\t\tadapter.getAccessToken(urls.accessToken, function(evt) {\n\t\t\t\t\tevt.success ? (adapter.saveAccessToken(site), callback && callback({username:evt.username, userid:evt.userid})) : alert('Twitter did not give us an access token!');\n\t\t\t\t});\n\t\t\t}\n\n\t\t\tif (!adapter.isAuthorized()) {\n\t\t\t\tadapter.showLoadingUI(), adapter.getRequestToken(urls.requestToken, function(evt) {\n\t\t\t\t\tevt.success ? adapter.showAuthorizeUI(urls.authorize + evt.token, receivePin) : alert('Twitter did not give us a request token!');\n\t\t\t\t});\n\t\t\t} else callback && callback();\n\t\t},\n\t\t/**\n\t\t * @method share\n\t\t * Sends an update to the service provider. Implicitly calls authorize() to authorize your app.\n\t\t * @param {...*} options Update parameters.\n\t\t * @param {String} options.message Message to send.\n\t\t * @param {Function} [options.success] Callback function executed after a successful update.\n\t\t * @param {Function} [options.error] Callback function executed after a failed update.\n\t\t */\n\t\tshare: function(options) {\n\t\t\tthis.authorize(function() {\n\t\t\t\tadapter.send({\n\t\t\t\t\turl: urls.update,\n\t\t\t\t\tparameters: [ [ 'status', options.message ] ],\n\t\t\t\t\ttitle: 'Twitter',\n\t\t\t\t\tonSuccess: options.success,\n\t\t\t\t\tonError: options.error\n\t\t\t\t});\n\t\t\t});\n\t\t}\n\t};\n};\n","/home/travis/build/npmtest/node-npmtest-alloy/node_modules/alloy/Alloy/builtins/string.js":"/**\n * @class Alloy.builtins.string\n * A collection of utilities for manipulating strings.\n * To use the string builtin library,\n * require it with the `alloy` root directory in your `require` call. For example:\n *\n *\t\tvar string = require('/alloy/string');\n *\t\tvar text = '     hola, mundo   ';\n *\t\tTi.API.info(string.ucfirst(string.trim(text))); // --> 'Hola, mundo'\n */\n\n/**\n * @method trim\n * Removes leading and trailing white space from a string.\n * @param {String} line String to trim.\n * @return {String} String without leading and trailing white space.\n */\nexports.trim = function(line) {\n\treturn String(line).replace(/^\\s\\s*/, '').replace(/\\s\\s*$/, '');\n};\n\n/**\n * @method trimZeros\n * Removes trailing zeroes from a float value after the decimal point.\n * @param num Number to trim.\n * @return {Number} Number without trailing zeroes.\n */\nexports.trimZeros = function (num) {\n\tvar str = (num || '0') + '';\n\tif (str.indexOf('.') === -1)\n\t\treturn str;\n\treturn str.replace(/\\.?0*$/, '');\n};\n\n/**\n * @method ucfirst\n * Capitalizes the first character in the string.\n * @param {String} text String to capitalize.\n * @return {String} String with first character capitalized.\n */\nexports.ucfirst = function (text) {\n\tif (!text)\n\t\treturn text;\n\treturn text[0].toUpperCase() + text.substr(1);\n};\n\n/**\n * @method lcfirst\n * Lowercases the first character in the string.\n * @param {String} text String to lowercase.\n * @return {String} String with first character lowercased.\n */\nexports.lcfirst = function (text) {\n\tif (!text)\n\t\treturn text;\n\treturn text[0].toLowerCase() + text.substr(1);\n};\n\n/**\n * @method formatCurrency\n * Returns an amount formatted as a currency value.\n * Uses the device settings to determine the currency symbol.\n * On the Mobile Web platform, the currency symbol will always be dollars ('$').\n * @param {String} amount Amount to format.\n * @return {String} Amount formatted as a currency value.\n */\nexports.formatCurrency = !(OS_MOBILEWEB) ? String.formatCurrency : function (amount) {\n\tvar num = isNaN(amount) || amount === '' || amount === null ? 0.00 : amount;\n\treturn '$' + parseFloat(num).toFixed(2);\n};\n\n\n/**\n * @method urlDecode\n * Converts URL-encoded characters in a string to ASCII characters.\n * For example, the string '%38' will return '&'.\n * @param {String} url String to process.\n * @return {String} String with URL-encoded characters replaced with ASCII characters.\n */\nexports.urlDecode = function (string) {\n\tif (!string) {\n\t\treturn '';\n\t}\n\treturn string.replace(/%[a-fA-F0-9]{2}/ig, function (match) {\n\t\treturn String.fromCharCode(parseInt(match.replace('%', ''), 16));\n\t});\n};\n\n/**\n * @method urlToJson\n * Parses an URL and converts it to JSON-formatted data.\n * For example, an URL with a query string will produce a JSON object with each query field paired\n * with its value as well as the base URL.\n * @param {String} url URL to process.\n * @return {Object} JSON-formatted URL data.\n */\nexports.urlToJson = function (url) {\n\tvar ret = {};\n\tvar arr = url.split('?');\n\tvar list = {};\n\tvar queryarr = arr[1].split('&');\n\tfor (var n = 0; n < queryarr.length; ++n) {\n\t\tvar item = queryarr[n];\n\t\tif (item === '') { continue; }\n\t\tvar e = item.indexOf('='),\n\t\t\tname,\n\t\t\tvalue;\n\t\tif (e < 0) {\n\t\t\tname = item;\n\t\t\tvalue = null;\n\t\t} else {\n\t\t\tname = item.substring(0, e);\n\t\t\tvalue = item.substring(e + 1);\n\t\t}\n\t\tlist[name] = value;\n\t}\n\tret.url = arr[0];\n\tret.query = list;\n\treturn ret;\n};\n","/home/travis/build/npmtest/node-npmtest-alloy/node_modules/alloy/Alloy/grammar/tss.js":"module.exports = (function(){\n  /*\n   * Generated by PEG.js 0.7.0.\n   *\n   * http://pegjs.majda.cz/\n   */\n  \n  function quote(s) {\n    /*\n     * ECMA-262, 5th ed., 7.8.4: All characters may appear literally in a\n     * string literal except for the closing quote character, backslash,\n     * carriage return, line separator, paragraph separator, and line feed.\n     * Any character may appear in the form of an escape sequence.\n     *\n     * For portability, we also escape escape all control and non-ASCII\n     * characters. Note that \"\\0\" and \"\\v\" escape sequences are not used\n     * because JSHint does not like the first and IE the second.\n     */\n     return '\"' + s\n      .replace(/\\\\/g, '\\\\\\\\')  // backslash\n      .replace(/\"/g, '\\\\\"')    // closing quote character\n      .replace(/\\x08/g, '\\\\b') // backspace\n      .replace(/\\t/g, '\\\\t')   // horizontal tab\n      .replace(/\\n/g, '\\\\n')   // line feed\n      .replace(/\\f/g, '\\\\f')   // form feed\n      .replace(/\\r/g, '\\\\r')   // carriage return\n      .replace(/[\\x00-\\x07\\x0B\\x0E-\\x1F\\x80-\\uFFFF]/g, escape)\n      + '\"';\n  }\n  \n  var result = {\n    /*\n     * Parses the input with a generated parser. If the parsing is successfull,\n     * returns a value explicitly or implicitly specified by the grammar from\n     * which the parser was generated (see |PEG.buildParser|). If the parsing is\n     * unsuccessful, throws |PEG.parser.SyntaxError| describing the error.\n     */\n    parse: function(input, startRule) {\n      var parseFunctions = {\n        \"start\": parse_start,\n        \"topobject\": parse_topobject,\n        \"object\": parse_object,\n        \"topmembers\": parse_topmembers,\n        \"members\": parse_members,\n        \"pair\": parse_pair,\n        \"array\": parse_array,\n        \"elements\": parse_elements,\n        \"value\": parse_value,\n        \"basevalue\": parse_basevalue,\n        \"bitwise_operator\": parse_bitwise_operator,\n        \"OpenParen\": parse_OpenParen,\n        \"CloseParen\": parse_CloseParen,\n        \"WPATH\": parse_WPATH,\n        \"LocaleCall\": parse_LocaleCall,\n        \"Locale\": parse_Locale,\n        \"TiConstant\": parse_TiConstant,\n        \"TiNS\": parse_TiNS,\n        \"paramComma\": parse_paramComma,\n        \"paramString\": parse_paramString,\n        \"string\": parse_string,\n        \"bareString\": parse_bareString,\n        \"bareChar\": parse_bareChar,\n        \"schars\": parse_schars,\n        \"chars\": parse_chars,\n        \"schar\": parse_schar,\n        \"char\": parse_char,\n        \"number\": parse_number,\n        \"int\": parse_int,\n        \"frac\": parse_frac,\n        \"exp\": parse_exp,\n        \"digits\": parse_digits,\n        \"e\": parse_e,\n        \"digit\": parse_digit,\n        \"digit19\": parse_digit19,\n        \"hexDigit\": parse_hexDigit,\n        \"_\": parse__,\n        \"__\": parse___,\n        \"___\": parse____,\n        \"Comma\": parse_Comma,\n        \"LineTerminator\": parse_LineTerminator,\n        \"LineTerminatorSequence\": parse_LineTerminatorSequence,\n        \"SourceCharacter\": parse_SourceCharacter,\n        \"WhiteSpace\": parse_WhiteSpace,\n        \"Comment\": parse_Comment,\n        \"MultiLineComment\": parse_MultiLineComment,\n        \"SingleLineComment\": parse_SingleLineComment,\n        \"MultiLineCommentNoLineTerminator\": parse_MultiLineCommentNoLineTerminator\n      };\n      \n      if (startRule !== undefined) {\n        if (parseFunctions[startRule] === undefined) {\n          throw new Error(\"Invalid rule name: \" + quote(startRule) + \".\");\n        }\n      } else {\n        startRule = \"start\";\n      }\n      \n      var pos = 0;\n      var reportFailures = 0;\n      var rightmostFailuresPos = 0;\n      var rightmostFailuresExpected = [];\n      \n      function padLeft(input, padding, length) {\n        var result = input;\n        \n        var padLength = length - input.length;\n        for (var i = 0; i < padLength; i++) {\n          result = padding + result;\n        }\n        \n        return result;\n      }\n      \n      function escape(ch) {\n        var charCode = ch.charCodeAt(0);\n        var escapeChar;\n        var length;\n        \n        if (charCode <= 0xFF) {\n          escapeChar = 'x';\n          length = 2;\n        } else {\n          escapeChar = 'u';\n          length = 4;\n        }\n        \n        return '\\\\' + escapeChar + padLeft(charCode.toString(16).toUpperCase(), '0', length);\n      }\n      \n      function matchFailed(failure) {\n        if (pos < rightmostFailuresPos) {\n          return;\n        }\n        \n        if (pos > rightmostFailuresPos) {\n          rightmostFailuresPos = pos;\n          rightmostFailuresExpected = [];\n        }\n        \n        rightmostFailuresExpected.push(failure);\n      }\n      \n      function parse_start() {\n        var result0, result1, result2;\n        var pos0, pos1;\n        \n        pos0 = pos;\n        pos1 = pos;\n        result0 = parse___();\n        if (result0 !== null) {\n          result1 = parse_topobject();\n          if (result1 !== null) {\n            result2 = parse___();\n            if (result2 !== null) {\n              result0 = [result0, result1, result2];\n            } else {\n              result0 = null;\n              pos = pos1;\n            }\n          } else {\n            result0 = null;\n            pos = pos1;\n          }\n        } else {\n          result0 = null;\n          pos = pos1;\n        }\n        if (result0 !== null) {\n          result0 = (function(offset, topobject) { return topobject; })(pos0, result0[1]);\n        }\n        if (result0 === null) {\n          pos = pos0;\n        }\n        return result0;\n      }\n      \n      function parse_topobject() {\n        var result0, result1, result2, result3, result4;\n        var pos0, pos1;\n        \n        pos0 = pos;\n        pos1 = pos;\n        if (input.charCodeAt(pos) === 123) {\n          result0 = \"{\";\n          pos++;\n        } else {\n          result0 = null;\n          if (reportFailures === 0) {\n            matchFailed(\"\\\"{\\\"\");\n          }\n        }\n        if (result0 !== null) {\n          result1 = parse___();\n          if (result1 !== null) {\n            if (input.charCodeAt(pos) === 125) {\n              result2 = \"}\";\n              pos++;\n            } else {\n              result2 = null;\n              if (reportFailures === 0) {\n                matchFailed(\"\\\"}\\\"\");\n              }\n            }\n            if (result2 !== null) {\n              result0 = [result0, result1, result2];\n            } else {\n              result0 = null;\n              pos = pos1;\n            }\n          } else {\n            result0 = null;\n            pos = pos1;\n          }\n        } else {\n          result0 = null;\n          pos = pos1;\n        }\n        if (result0 !== null) {\n          result0 = (function(offset) { return {};      })(pos0);\n        }\n        if (result0 === null) {\n          pos = pos0;\n        }\n        if (result0 === null) {\n          pos0 = pos;\n          pos1 = pos;\n          if (input.charCodeAt(pos) === 123) {\n            result0 = \"{\";\n            pos++;\n          } else {\n            result0 = null;\n            if (reportFailures === 0) {\n              matchFailed(\"\\\"{\\\"\");\n            }\n          }\n          if (result0 !== null) {\n            result1 = parse___();\n            if (result1 !== null) {\n              result2 = parse_topmembers();\n              if (result2 !== null) {\n                result3 = parse___();\n                if (result3 !== null) {\n                  if (input.charCodeAt(pos) === 125) {\n                    result4 = \"}\";\n                    pos++;\n                  } else {\n                    result4 = null;\n                    if (reportFailures === 0) {\n                      matchFailed(\"\\\"}\\\"\");\n                    }\n                  }\n                  if (result4 !== null) {\n                    result0 = [result0, result1, result2, result3, result4];\n                  } else {\n                    result0 = null;\n                    pos = pos1;\n                  }\n                } else {\n                  result0 = null;\n                  pos = pos1;\n                }\n              } else {\n                result0 = null;\n                pos = pos1;\n              }\n            } else {\n              result0 = null;\n              pos = pos1;\n            }\n          } else {\n            result0 = null;\n            pos = pos1;\n          }\n          if (result0 !== null) {\n            result0 = (function(offset, topmembers) { return topmembers; })(pos0, result0[2]);\n          }\n          if (result0 === null) {\n            pos = pos0;\n          }\n        }\n        return result0;\n      }\n      \n      function parse_object() {\n        var result0, result1, result2, result3, result4;\n        var pos0, pos1;\n        \n        pos0 = pos;\n        pos1 = pos;\n        if (input.charCodeAt(pos) === 123) {\n          result0 = \"{\";\n          pos++;\n        } else {\n          result0 = null;\n          if (reportFailures === 0) {\n            matchFailed(\"\\\"{\\\"\");\n          }\n        }\n        if (result0 !== null) {\n          result1 = parse___();\n          if (result1 !== null) {\n            if (input.charCodeAt(pos) === 125) {\n              result2 = \"}\";\n              pos++;\n            } else {\n              result2 = null;\n              if (reportFailures === 0) {\n                matchFailed(\"\\\"}\\\"\");\n              }\n            }\n            if (result2 !== null) {\n              result0 = [result0, result1, result2];\n            } else {\n              result0 = null;\n              pos = pos1;\n            }\n          } else {\n            result0 = null;\n            pos = pos1;\n          }\n        } else {\n          result0 = null;\n          pos = pos1;\n        }\n        if (result0 !== null) {\n          result0 = (function(offset) { return {};      })(pos0);\n        }\n        if (result0 === null) {\n          pos = pos0;\n        }\n        if (result0 === null) {\n          pos0 = pos;\n          pos1 = pos;\n          if (input.charCodeAt(pos) === 123) {\n            result0 = \"{\";\n            pos++;\n          } else {\n            result0 = null;\n            if (reportFailures === 0) {\n              matchFailed(\"\\\"{\\\"\");\n            }\n          }\n          if (result0 !== null) {\n            result1 = parse___();\n            if (result1 !== null) {\n              result2 = parse_members();\n              if (result2 !== null) {\n                result3 = parse___();\n                if (result3 !== null) {\n                  if (input.charCodeAt(pos) === 125) {\n                    result4 = \"}\";\n                    pos++;\n                  } else {\n                    result4 = null;\n                    if (reportFailures === 0) {\n                      matchFailed(\"\\\"}\\\"\");\n                    }\n                  }\n                  if (result4 !== null) {\n                    result0 = [result0, result1, result2, result3, result4];\n                  } else {\n                    result0 = null;\n                    pos = pos1;\n                  }\n                } else {\n                  result0 = null;\n                  pos = pos1;\n                }\n              } else {\n                result0 = null;\n                pos = pos1;\n              }\n            } else {\n              result0 = null;\n              pos = pos1;\n            }\n          } else {\n            result0 = null;\n            pos = pos1;\n          }\n          if (result0 !== null) {\n            result0 = (function(offset, members) { return members; })(pos0, result0[2]);\n          }\n          if (result0 === null) {\n            pos = pos0;\n          }\n        }\n        return result0;\n      }\n      \n      function parse_topmembers() {\n        var result0, result1, result2, result3;\n        var pos0, pos1, pos2;\n        \n        pos0 = pos;\n        pos1 = pos;\n        result0 = parse_pair();\n        if (result0 !== null) {\n          result1 = [];\n          pos2 = pos;\n          result2 = parse____();\n          if (result2 !== null) {\n            result3 = parse_pair();\n            result3 = result3 !== null ? result3 : \"\";\n            if (result3 !== null) {\n              result2 = [result2, result3];\n            } else {\n              result2 = null;\n              pos = pos2;\n            }\n          } else {\n            result2 = null;\n            pos = pos2;\n          }\n          while (result2 !== null) {\n            result1.push(result2);\n            pos2 = pos;\n            result2 = parse____();\n            if (result2 !== null) {\n              result3 = parse_pair();\n              result3 = result3 !== null ? result3 : \"\";\n              if (result3 !== null) {\n                result2 = [result2, result3];\n              } else {\n                result2 = null;\n                pos = pos2;\n              }\n            } else {\n              result2 = null;\n              pos = pos2;\n            }\n          }\n          if (result1 !== null) {\n            result0 = [result0, result1];\n          } else {\n            result0 = null;\n            pos = pos1;\n          }\n        } else {\n          result0 = null;\n          pos = pos1;\n        }\n        if (result0 !== null) {\n          result0 = (function(offset, head, tail) {\n              var result = {};\n              result[head[0]] = head[1];\n              for (var i = 0; i < tail.length; i++) {\n                result[tail[i][1][0]] = tail[i][1][1];\n              }\n              if (typeof result['undefined'] === 'undefined') {\n                delete result['undefined'];\n              }\n              return result;\n            })(pos0, result0[0], result0[1]);\n        }\n        if (result0 === null) {\n          pos = pos0;\n        }\n        return result0;\n      }\n      \n      function parse_members() {\n        var result0, result1, result2, result3, result4, result5;\n        var pos0, pos1, pos2;\n        \n        pos0 = pos;\n        pos1 = pos;\n        result0 = parse_pair();\n        if (result0 !== null) {\n          result1 = [];\n          pos2 = pos;\n          result2 = parse___();\n          if (result2 !== null) {\n            if (input.charCodeAt(pos) === 44) {\n              result3 = \",\";\n              pos++;\n            } else {\n              result3 = null;\n              if (reportFailures === 0) {\n                matchFailed(\"\\\",\\\"\");\n              }\n            }\n            if (result3 !== null) {\n              result4 = parse___();\n              if (result4 !== null) {\n                result5 = parse_pair();\n                result5 = result5 !== null ? result5 : \"\";\n                if (result5 !== null) {\n                  result2 = [result2, result3, result4, result5];\n                } else {\n                  result2 = null;\n                  pos = pos2;\n                }\n              } else {\n                result2 = null;\n                pos = pos2;\n              }\n            } else {\n              result2 = null;\n              pos = pos2;\n            }\n          } else {\n            result2 = null;\n            pos = pos2;\n          }\n          while (result2 !== null) {\n            result1.push(result2);\n            pos2 = pos;\n            result2 = parse___();\n            if (result2 !== null) {\n              if (input.charCodeAt(pos) === 44) {\n                result3 = \",\";\n                pos++;\n              } else {\n                result3 = null;\n                if (reportFailures === 0) {\n                  matchFailed(\"\\\",\\\"\");\n                }\n              }\n              if (result3 !== null) {\n                result4 = parse___();\n                if (result4 !== null) {\n                  result5 = parse_pair();\n                  result5 = result5 !== null ? result5 : \"\";\n                  if (result5 !== null) {\n                    result2 = [result2, result3, result4, result5];\n                  } else {\n                    result2 = null;\n                    pos = pos2;\n                  }\n                } else {\n                  result2 = null;\n                  pos = pos2;\n                }\n              } else {\n                result2 = null;\n                pos = pos2;\n              }\n            } else {\n              result2 = null;\n              pos = pos2;\n            }\n          }\n          if (result1 !== null) {\n            result0 = [result0, result1];\n          } else {\n            result0 = null;\n            pos = pos1;\n          }\n        } else {\n          result0 = null;\n          pos = pos1;\n        }\n        if (result0 !== null) {\n          result0 = (function(offset, head, tail) {\n              var result = {};\n              result[head[0]] = head[1];\n              for (var i = 0; i < tail.length; i++) {\n                result[tail[i][3][0]] = tail[i][3][1];\n              }\n              if (typeof result['undefined'] === 'undefined') {\n                delete result['undefined'];\n              }\n              return result;\n            })(pos0, result0[0], result0[1]);\n        }\n        if (result0 === null) {\n          pos = pos0;\n        }\n        return result0;\n      }\n      \n      function parse_pair() {\n        var result0, result1, result2, result3, result4;\n        var pos0, pos1;\n        \n        pos0 = pos;\n        pos1 = pos;\n        result0 = parse_string();\n        if (result0 === null) {\n          result0 = parse_bareString();\n        }\n        if (result0 !== null) {\n          result1 = parse___();\n          if (result1 !== null) {\n            if (input.charCodeAt(pos) === 58) {\n              result2 = \":\";\n              pos++;\n            } else {\n              result2 = null;\n              if (reportFailures === 0) {\n                matchFailed(\"\\\":\\\"\");\n              }\n            }\n            if (result2 !== null) {\n              result3 = parse___();\n              if (result3 !== null) {\n                result4 = parse_value();\n                if (result4 !== null) {\n                  result0 = [result0, result1, result2, result3, result4];\n                } else {\n                  result0 = null;\n                  pos = pos1;\n                }\n              } else {\n                result0 = null;\n                pos = pos1;\n              }\n            } else {\n              result0 = null;\n              pos = pos1;\n            }\n          } else {\n            result0 = null;\n            pos = pos1;\n          }\n        } else {\n          result0 = null;\n          pos = pos1;\n        }\n        if (result0 !== null) {\n          result0 = (function(offset, name, value) { return [name, value]; })(pos0, result0[0], result0[4]);\n        }\n        if (result0 === null) {\n          pos = pos0;\n        }\n        return result0;\n      }\n      \n      function parse_array() {\n        var result0, result1, result2, result3, result4;\n        var pos0, pos1;\n        \n        pos0 = pos;\n        pos1 = pos;\n        if (input.charCodeAt(pos) === 91) {\n          result0 = \"[\";\n          pos++;\n        } else {\n          result0 = null;\n          if (reportFailures === 0) {\n            matchFailed(\"\\\"[\\\"\");\n          }\n        }\n        if (result0 !== null) {\n          result1 = parse___();\n          if (result1 !== null) {\n            if (input.charCodeAt(pos) === 93) {\n              result2 = \"]\";\n              pos++;\n            } else {\n              result2 = null;\n              if (reportFailures === 0) {\n                matchFailed(\"\\\"]\\\"\");\n              }\n            }\n            if (result2 !== null) {\n              result0 = [result0, result1, result2];\n            } else {\n              result0 = null;\n              pos = pos1;\n            }\n          } else {\n            result0 = null;\n            pos = pos1;\n          }\n        } else {\n          result0 = null;\n          pos = pos1;\n        }\n        if (result0 !== null) {\n          result0 = (function(offset) { return [];       })(pos0);\n        }\n        if (result0 === null) {\n          pos = pos0;\n        }\n        if (result0 === null) {\n          pos0 = pos;\n          pos1 = pos;\n          if (input.charCodeAt(pos) === 91) {\n            result0 = \"[\";\n            pos++;\n          } else {\n            result0 = null;\n            if (reportFailures === 0) {\n              matchFailed(\"\\\"[\\\"\");\n            }\n          }\n          if (result0 !== null) {\n            result1 = parse___();\n            if (result1 !== null) {\n              result2 = parse_elements();\n              if (result2 !== null) {\n                result3 = parse___();\n                if (result3 !== null) {\n                  if (input.charCodeAt(pos) === 93) {\n                    result4 = \"]\";\n                    pos++;\n                  } else {\n                    result4 = null;\n                    if (reportFailures === 0) {\n                      matchFailed(\"\\\"]\\\"\");\n                    }\n                  }\n                  if (result4 !== null) {\n                    result0 = [result0, result1, result2, result3, result4];\n                  } else {\n                    result0 = null;\n                    pos = pos1;\n                  }\n                } else {\n                  result0 = null;\n                  pos = pos1;\n                }\n              } else {\n                result0 = null;\n                pos = pos1;\n              }\n            } else {\n              result0 = null;\n              pos = pos1;\n            }\n          } else {\n            result0 = null;\n            pos = pos1;\n          }\n          if (result0 !== null) {\n            result0 = (function(offset, elements) { return elements; })(pos0, result0[2]);\n          }\n          if (result0 === null) {\n            pos = pos0;\n          }\n        }\n        return result0;\n      }\n      \n      function parse_elements() {\n        var result0, result1, result2, result3, result4, result5;\n        var pos0, pos1, pos2;\n        \n        pos0 = pos;\n        pos1 = pos;\n        result0 = parse_value();\n        if (result0 !== null) {\n          result1 = [];\n          pos2 = pos;\n          result2 = parse___();\n          if (result2 !== null) {\n            if (input.charCodeAt(pos) === 44) {\n              result3 = \",\";\n              pos++;\n            } else {\n              result3 = null;\n              if (reportFailures === 0) {\n                matchFailed(\"\\\",\\\"\");\n              }\n            }\n            if (result3 !== null) {\n              result4 = parse___();\n              if (result4 !== null) {\n                result5 = parse_value();\n                if (result5 !== null) {\n                  result2 = [result2, result3, result4, result5];\n                } else {\n                  result2 = null;\n                  pos = pos2;\n                }\n              } else {\n                result2 = null;\n                pos = pos2;\n              }\n            } else {\n              result2 = null;\n              pos = pos2;\n            }\n          } else {\n            result2 = null;\n            pos = pos2;\n          }\n          while (result2 !== null) {\n            result1.push(result2);\n            pos2 = pos;\n            result2 = parse___();\n            if (result2 !== null) {\n              if (input.charCodeAt(pos) === 44) {\n                result3 = \",\";\n                pos++;\n              } else {\n                result3 = null;\n                if (reportFailures === 0) {\n                  matchFailed(\"\\\",\\\"\");\n                }\n              }\n              if (result3 !== null) {\n                result4 = parse___();\n                if (result4 !== null) {\n                  result5 = parse_value();\n                  if (result5 !== null) {\n                    result2 = [result2, result3, result4, result5];\n                  } else {\n                    result2 = null;\n                    pos = pos2;\n                  }\n                } else {\n                  result2 = null;\n                  pos = pos2;\n                }\n              } else {\n                result2 = null;\n                pos = pos2;\n              }\n            } else {\n              result2 = null;\n              pos = pos2;\n            }\n          }\n          if (result1 !== null) {\n            result0 = [result0, result1];\n          } else {\n            result0 = null;\n            pos = pos1;\n          }\n        } else {\n          result0 = null;\n          pos = pos1;\n        }\n        if (result0 !== null) {\n          result0 = (function(offset, head, tail) {\n              var result = [head];\n              for (var i = 0; i < tail.length; i++) {\n                result.push(tail[i][3]);\n              }\n              return result;\n            })(pos0, result0[0], result0[1]);\n        }\n        if (result0 === null) {\n          pos = pos0;\n        }\n        return result0;\n      }\n      \n      function parse_value() {\n        var result0, result1, result2, result3, result4, result5;\n        var pos0, pos1, pos2;\n        \n        pos0 = pos;\n        pos1 = pos;\n        result0 = parse_basevalue();\n        if (result0 !== null) {\n          pos2 = pos;\n          result2 = parse___();\n          if (result2 !== null) {\n            result3 = parse_bitwise_operator();\n            if (result3 !== null) {\n              result4 = parse___();\n              if (result4 !== null) {\n                result5 = parse_basevalue();\n                if (result5 !== null) {\n                  result2 = [result2, result3, result4, result5];\n                } else {\n                  result2 = null;\n                  pos = pos2;\n                }\n              } else {\n                result2 = null;\n                pos = pos2;\n              }\n            } else {\n              result2 = null;\n              pos = pos2;\n            }\n          } else {\n            result2 = null;\n            pos = pos2;\n          }\n          if (result2 !== null) {\n            result1 = [];\n            while (result2 !== null) {\n              result1.push(result2);\n              pos2 = pos;\n              result2 = parse___();\n              if (result2 !== null) {\n                result3 = parse_bitwise_operator();\n                if (result3 !== null) {\n                  result4 = parse___();\n                  if (result4 !== null) {\n                    result5 = parse_basevalue();\n                    if (result5 !== null) {\n                      result2 = [result2, result3, result4, result5];\n                    } else {\n                      result2 = null;\n                      pos = pos2;\n                    }\n                  } else {\n                    result2 = null;\n                    pos = pos2;\n                  }\n                } else {\n                  result2 = null;\n                  pos = pos2;\n                }\n              } else {\n                result2 = null;\n                pos = pos2;\n              }\n            }\n          } else {\n            result1 = null;\n          }\n          if (result1 !== null) {\n            result0 = [result0, result1];\n          } else {\n            result0 = null;\n            pos = pos1;\n          }\n        } else {\n          result0 = null;\n          pos = pos1;\n        }\n        if (result0 !== null) {\n          result0 = (function(offset, head, tail) {\n              var str = processValue(head);\n              for (var i = 0; i < tail.length; i++) {\n                str += tail[i][1] + processValue(tail[i][3]);\n              }\n              return ALLOY_EXPR + str;\n            })(pos0, result0[0], result0[1]);\n        }\n        if (result0 === null) {\n          pos = pos0;\n        }\n        if (result0 === null) {\n          result0 = parse_basevalue();\n        }\n        return result0;\n      }\n      \n      function parse_basevalue() {\n        var result0, result1;\n        var pos0, pos1;\n        \n        result0 = parse_LocaleCall();\n        if (result0 === null) {\n          result0 = parse_TiConstant();\n          if (result0 === null) {\n            result0 = parse_WPATH();\n            if (result0 === null) {\n              result0 = parse_string();\n              if (result0 === null) {\n                result0 = parse_number();\n                if (result0 === null) {\n                  result0 = parse_object();\n                  if (result0 === null) {\n                    result0 = parse_array();\n                    if (result0 === null) {\n                      pos0 = pos;\n                      pos1 = pos;\n                      if (input.substr(pos, 4) === \"true\") {\n                        result0 = \"true\";\n                        pos += 4;\n                      } else {\n                        result0 = null;\n                        if (reportFailures === 0) {\n                          matchFailed(\"\\\"true\\\"\");\n                        }\n                      }\n                      if (result0 !== null) {\n                        result1 = parse___();\n                        if (result1 !== null) {\n                          result0 = [result0, result1];\n                        } else {\n                          result0 = null;\n                          pos = pos1;\n                        }\n                      } else {\n                        result0 = null;\n                        pos = pos1;\n                      }\n                      if (result0 !== null) {\n                        result0 = (function(offset) { return true;   })(pos0);\n                      }\n                      if (result0 === null) {\n                        pos = pos0;\n                      }\n                      if (result0 === null) {\n                        pos0 = pos;\n                        pos1 = pos;\n                        if (input.substr(pos, 5) === \"false\") {\n                          result0 = \"false\";\n                          pos += 5;\n                        } else {\n                          result0 = null;\n                          if (reportFailures === 0) {\n                            matchFailed(\"\\\"false\\\"\");\n                          }\n                        }\n                        if (result0 !== null) {\n                          result1 = parse___();\n                          if (result1 !== null) {\n                            result0 = [result0, result1];\n                          } else {\n                            result0 = null;\n                            pos = pos1;\n                          }\n                        } else {\n                          result0 = null;\n                          pos = pos1;\n                        }\n                        if (result0 !== null) {\n                          result0 = (function(offset) { return false;  })(pos0);\n                        }\n                        if (result0 === null) {\n                          pos = pos0;\n                        }\n                        if (result0 === null) {\n                          pos0 = pos;\n                          pos1 = pos;\n                          if (input.substr(pos, 9) === \"undefined\") {\n                            result0 = \"undefined\";\n                            pos += 9;\n                          } else {\n                            result0 = null;\n                            if (reportFailures === 0) {\n                              matchFailed(\"\\\"undefined\\\"\");\n                            }\n                          }\n                          if (result0 !== null) {\n                            result1 = parse___();\n                            if (result1 !== null) {\n                              result0 = [result0, result1];\n                            } else {\n                              result0 = null;\n                              pos = pos1;\n                            }\n                          } else {\n                            result0 = null;\n                            pos = pos1;\n                          }\n                          if (result0 !== null) {\n                            result0 = (function(offset) { return ALLOY_EXPR + \"undefined\"; })(pos0);\n                          }\n                          if (result0 === null) {\n                            pos = pos0;\n                          }\n                          if (result0 === null) {\n                            pos0 = pos;\n                            pos1 = pos;\n                            if (input.substr(pos, 4) === \"null\") {\n                              result0 = \"null\";\n                              pos += 4;\n                            } else {\n                              result0 = null;\n                              if (reportFailures === 0) {\n                                matchFailed(\"\\\"null\\\"\");\n                              }\n                            }\n                            if (result0 !== null) {\n                              result1 = parse___();\n                              if (result1 !== null) {\n                                result0 = [result0, result1];\n                              } else {\n                                result0 = null;\n                                pos = pos1;\n                              }\n                            } else {\n                              result0 = null;\n                              pos = pos1;\n                            }\n                            if (result0 !== null) {\n                              result0 = (function(offset) { return ALLOY_EXPR + \"null\"; })(pos0);\n                            }\n                            if (result0 === null) {\n                              pos = pos0;\n                            }\n                          }\n                        }\n                      }\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n        return result0;\n      }\n      \n      function parse_bitwise_operator() {\n        var result0;\n        var pos0;\n        \n        reportFailures++;\n        if (input.substr(pos, 2) === \">>\") {\n          result0 = \">>\";\n          pos += 2;\n        } else {\n          result0 = null;\n          if (reportFailures === 0) {\n            matchFailed(\"\\\">>\\\"\");\n          }\n        }\n        if (result0 === null) {\n          if (input.substr(pos, 3) === \">>>\") {\n            result0 = \">>>\";\n            pos += 3;\n          } else {\n            result0 = null;\n            if (reportFailures === 0) {\n              matchFailed(\"\\\">>>\\\"\");\n            }\n          }\n          if (result0 === null) {\n            if (input.substr(pos, 2) === \"<<\") {\n              result0 = \"<<\";\n              pos += 2;\n            } else {\n              result0 = null;\n              if (reportFailures === 0) {\n                matchFailed(\"\\\"<<\\\"\");\n              }\n            }\n            if (result0 === null) {\n              if (input.substr(pos, 3) === \"<<<\") {\n                result0 = \"<<<\";\n                pos += 3;\n              } else {\n                result0 = null;\n                if (reportFailures === 0) {\n                  matchFailed(\"\\\"<<<\\\"\");\n                }\n              }\n              if (result0 === null) {\n                pos0 = pos;\n                if (/^[&|^]/.test(input.charAt(pos))) {\n                  result0 = input.charAt(pos);\n                  pos++;\n                } else {\n                  result0 = null;\n                  if (reportFailures === 0) {\n                    matchFailed(\"[&|^]\");\n                  }\n                }\n                if (result0 !== null) {\n                  result0 = (function(offset, op) { return op; })(pos0, result0);\n                }\n                if (result0 === null) {\n                  pos = pos0;\n                }\n              }\n            }\n          }\n        }\n        reportFailures--;\n        if (reportFailures === 0 && result0 === null) {\n          matchFailed(\"bitwise_operator\");\n        }\n        return result0;\n      }\n      \n      function parse_OpenParen() {\n        var result0;\n        var pos0;\n        \n        pos0 = pos;\n        if (input.charCodeAt(pos) === 40) {\n          result0 = \"(\";\n          pos++;\n        } else {\n          result0 = null;\n          if (reportFailures === 0) {\n            matchFailed(\"\\\"(\\\"\");\n          }\n        }\n        if (result0 !== null) {\n          result0 = (function(offset) { return '('; })(pos0);\n        }\n        if (result0 === null) {\n          pos = pos0;\n        }\n        return result0;\n      }\n      \n      function parse_CloseParen() {\n        var result0;\n        var pos0;\n        \n        pos0 = pos;\n        if (input.charCodeAt(pos) === 41) {\n          result0 = \")\";\n          pos++;\n        } else {\n          result0 = null;\n          if (reportFailures === 0) {\n            matchFailed(\"\\\")\\\"\");\n          }\n        }\n        if (result0 !== null) {\n          result0 = (function(offset) { return ')'; })(pos0);\n        }\n        if (result0 === null) {\n          pos = pos0;\n        }\n        return result0;\n      }\n      \n      function parse_WPATH() {\n        var result0, result1, result2, result3, result4, result5, result6, result7, result8;\n        var pos0, pos1, pos2;\n        \n        pos0 = pos;\n        pos1 = pos;\n        if (input.substr(pos, 5) === \"WPATH\") {\n          result0 = \"WPATH\";\n          pos += 5;\n        } else {\n          result0 = null;\n          if (reportFailures === 0) {\n            matchFailed(\"\\\"WPATH\\\"\");\n          }\n        }\n        if (result0 !== null) {\n          result1 = parse_OpenParen();\n          if (result1 !== null) {\n            result2 = parse___();\n            if (result2 !== null) {\n              result3 = parse_paramString();\n              if (result3 !== null) {\n                result4 = parse___();\n                if (result4 !== null) {\n                  result5 = [];\n                  pos2 = pos;\n                  result6 = parse_paramComma();\n                  if (result6 !== null) {\n                    result7 = parse___();\n                    if (result7 !== null) {\n                      result8 = parse_paramString();\n                      if (result8 !== null) {\n                        result6 = [result6, result7, result8];\n                      } else {\n                        result6 = null;\n                        pos = pos2;\n                      }\n                    } else {\n                      result6 = null;\n                      pos = pos2;\n                    }\n                  } else {\n                    result6 = null;\n                    pos = pos2;\n                  }\n                  while (result6 !== null) {\n                    result5.push(result6);\n                    pos2 = pos;\n                    result6 = parse_paramComma();\n                    if (result6 !== null) {\n                      result7 = parse___();\n                      if (result7 !== null) {\n                        result8 = parse_paramString();\n                        if (result8 !== null) {\n                          result6 = [result6, result7, result8];\n                        } else {\n                          result6 = null;\n                          pos = pos2;\n                        }\n                      } else {\n                        result6 = null;\n                        pos = pos2;\n                      }\n                    } else {\n                      result6 = null;\n                      pos = pos2;\n                    }\n                  }\n                  if (result5 !== null) {\n                    result6 = parse___();\n                    if (result6 !== null) {\n                      result7 = parse_CloseParen();\n                      if (result7 !== null) {\n                        result0 = [result0, result1, result2, result3, result4, result5, result6, result7];\n                      } else {\n                        result0 = null;\n                        pos = pos1;\n                      }\n                    } else {\n                      result0 = null;\n                      pos = pos1;\n                    }\n                  } else {\n                    result0 = null;\n                    pos = pos1;\n                  }\n                } else {\n                  result0 = null;\n                  pos = pos1;\n                }\n              } else {\n                result0 = null;\n                pos = pos1;\n              }\n            } else {\n              result0 = null;\n              pos = pos1;\n            }\n          } else {\n            result0 = null;\n            pos = pos1;\n          }\n        } else {\n          result0 = null;\n          pos = pos1;\n        }\n        if (result0 !== null) {\n          result0 = (function(offset, param1) {\n            return ALLOY_EXPR + 'WPATH(' + param1 + ')';\n          })(pos0, result0[3]);\n        }\n        if (result0 === null) {\n          pos = pos0;\n        }\n        return result0;\n      }\n      \n      function parse_LocaleCall() {\n        var result0, result1, result2, result3, result4, result5, result6, result7;\n        var pos0, pos1, pos2;\n        \n        pos0 = pos;\n        pos1 = pos;\n        result0 = parse_Locale();\n        if (result0 !== null) {\n          result1 = parse_OpenParen();\n          if (result1 !== null) {\n            result2 = parse___();\n            if (result2 !== null) {\n              result3 = parse_paramString();\n              if (result3 !== null) {\n                result4 = parse___();\n                if (result4 !== null) {\n                  pos2 = pos;\n                  result5 = parse_paramComma();\n                  if (result5 !== null) {\n                    result6 = parse___();\n                    if (result6 !== null) {\n                      result7 = parse_paramString();\n                      if (result7 !== null) {\n                        result5 = [result5, result6, result7];\n                      } else {\n                        result5 = null;\n                        pos = pos2;\n                      }\n                    } else {\n                      result5 = null;\n                      pos = pos2;\n                    }\n                  } else {\n                    result5 = null;\n                    pos = pos2;\n                  }\n                  result5 = result5 !== null ? result5 : \"\";\n                  if (result5 !== null) {\n                    result6 = parse___();\n                    if (result6 !== null) {\n                      result7 = parse_CloseParen();\n                      if (result7 !== null) {\n                        result0 = [result0, result1, result2, result3, result4, result5, result6, result7];\n                      } else {\n                        result0 = null;\n                        pos = pos1;\n                      }\n                    } else {\n                      result0 = null;\n                      pos = pos1;\n                    }\n                  } else {\n                    result0 = null;\n                    pos = pos1;\n                  }\n                } else {\n                  result0 = null;\n                  pos = pos1;\n                }\n              } else {\n                result0 = null;\n                pos = pos1;\n              }\n            } else {\n              result0 = null;\n              pos = pos1;\n            }\n          } else {\n            result0 = null;\n            pos = pos1;\n          }\n        } else {\n          result0 = null;\n          pos = pos1;\n        }\n        if (result0 !== null) {\n          result0 = (function(offset, param1, param2) {\n            return ALLOY_EXPR + 'L(' + param1 + (param2 ? param2.join('') : '') + ')';\n          })(pos0, result0[3], result0[5]);\n        }\n        if (result0 === null) {\n          pos = pos0;\n        }\n        return result0;\n      }\n      \n      function parse_Locale() {\n        var result0, result1;\n        var pos0;\n        \n        pos0 = pos;\n        result0 = parse_TiNS();\n        if (result0 !== null) {\n          if (input.substr(pos, 17) === \".Locale.getString\") {\n            result1 = \".Locale.getString\";\n            pos += 17;\n          } else {\n            result1 = null;\n            if (reportFailures === 0) {\n              matchFailed(\"\\\".Locale.getString\\\"\");\n            }\n          }\n          if (result1 !== null) {\n            result0 = [result0, result1];\n          } else {\n            result0 = null;\n            pos = pos0;\n          }\n        } else {\n          result0 = null;\n          pos = pos0;\n        }\n        if (result0 === null) {\n          if (input.charCodeAt(pos) === 76) {\n            result0 = \"L\";\n            pos++;\n          } else {\n            result0 = null;\n            if (reportFailures === 0) {\n              matchFailed(\"\\\"L\\\"\");\n            }\n          }\n        }\n        return result0;\n      }\n      \n      function parse_TiConstant() {\n        var result0, result1, result2, result3;\n        var pos0, pos1, pos2;\n        \n        pos0 = pos;\n        pos1 = pos;\n        result0 = parse_TiNS();\n        if (result0 !== null) {\n          pos2 = pos;\n          if (input.charCodeAt(pos) === 46) {\n            result2 = \".\";\n            pos++;\n          } else {\n            result2 = null;\n            if (reportFailures === 0) {\n              matchFailed(\"\\\".\\\"\");\n            }\n          }\n          if (result2 !== null) {\n            result3 = parse_bareString();\n            if (result3 !== null) {\n              result2 = [result2, result3];\n            } else {\n              result2 = null;\n              pos = pos2;\n            }\n          } else {\n            result2 = null;\n            pos = pos2;\n          }\n          if (result2 !== null) {\n            result1 = [];\n            while (result2 !== null) {\n              result1.push(result2);\n              pos2 = pos;\n              if (input.charCodeAt(pos) === 46) {\n                result2 = \".\";\n                pos++;\n              } else {\n                result2 = null;\n                if (reportFailures === 0) {\n                  matchFailed(\"\\\".\\\"\");\n                }\n              }\n              if (result2 !== null) {\n                result3 = parse_bareString();\n                if (result3 !== null) {\n                  result2 = [result2, result3];\n                } else {\n                  result2 = null;\n                  pos = pos2;\n                }\n              } else {\n                result2 = null;\n                pos = pos2;\n              }\n            }\n          } else {\n            result1 = null;\n          }\n          if (result1 !== null) {\n            result0 = [result0, result1];\n          } else {\n            result0 = null;\n            pos = pos1;\n          }\n        } else {\n          result0 = null;\n          pos = pos1;\n        }\n        if (result0 !== null) {\n          result0 = (function(offset, parts) {\n            var tc = ALLOY_EXPR + parts[0];\n            var len = parts[1] ? parts[1].length : 0;\n            for (var i = 0; i < len; i++) {\n              tc += parts[1][i].join('');\n            }\n            return tc;\n          })(pos0, result0);\n        }\n        if (result0 === null) {\n          pos = pos0;\n        }\n        return result0;\n      }\n      \n      function parse_TiNS() {\n        var result0;\n        \n        if (input.substr(pos, 8) === \"Titanium\") {\n          result0 = \"Titanium\";\n          pos += 8;\n        } else {\n          result0 = null;\n          if (reportFailures === 0) {\n            matchFailed(\"\\\"Titanium\\\"\");\n          }\n        }\n        if (result0 === null) {\n          if (input.substr(pos, 2) === \"Ti\") {\n            result0 = \"Ti\";\n            pos += 2;\n          } else {\n            result0 = null;\n            if (reportFailures === 0) {\n              matchFailed(\"\\\"Ti\\\"\");\n            }\n          }\n          if (result0 === null) {\n            if (input.substr(pos, 5) === \"Alloy\") {\n              result0 = \"Alloy\";\n              pos += 5;\n            } else {\n              result0 = null;\n              if (reportFailures === 0) {\n                matchFailed(\"\\\"Alloy\\\"\");\n              }\n            }\n          }\n        }\n        return result0;\n      }\n      \n      function parse_paramComma() {\n        var result0, result1, result2;\n        var pos0, pos1;\n        \n        pos0 = pos;\n        pos1 = pos;\n        result0 = parse___();\n        if (result0 !== null) {\n          if (input.charCodeAt(pos) === 44) {\n            result1 = \",\";\n            pos++;\n          } else {\n            result1 = null;\n            if (reportFailures === 0) {\n              matchFailed(\"\\\",\\\"\");\n            }\n          }\n          if (result1 !== null) {\n            result2 = parse___();\n            if (result2 !== null) {\n              result0 = [result0, result1, result2];\n            } else {\n              result0 = null;\n              pos = pos1;\n            }\n          } else {\n            result0 = null;\n            pos = pos1;\n          }\n        } else {\n          result0 = null;\n          pos = pos1;\n        }\n        if (result0 !== null) {\n          result0 = (function(offset) { return ','; })(pos0);\n        }\n        if (result0 === null) {\n          pos = pos0;\n        }\n        return result0;\n      }\n      \n      function parse_paramString() {\n        var result0, result1, result2, result3;\n        var pos0, pos1;\n        \n        pos0 = pos;\n        pos1 = pos;\n        if (input.charCodeAt(pos) === 34) {\n          result0 = \"\\\"\";\n          pos++;\n        } else {\n          result0 = null;\n          if (reportFailures === 0) {\n            matchFailed(\"\\\"\\\\\\\"\\\"\");\n          }\n        }\n        if (result0 !== null) {\n          if (input.charCodeAt(pos) === 34) {\n            result1 = \"\\\"\";\n            pos++;\n          } else {\n            result1 = null;\n            if (reportFailures === 0) {\n              matchFailed(\"\\\"\\\\\\\"\\\"\");\n            }\n          }\n          if (result1 !== null) {\n            result2 = parse___();\n            if (result2 !== null) {\n              result0 = [result0, result1, result2];\n            } else {\n              result0 = null;\n              pos = pos1;\n            }\n          } else {\n            result0 = null;\n            pos = pos1;\n          }\n        } else {\n          result0 = null;\n          pos = pos1;\n        }\n        if (result0 !== null) {\n          result0 = (function(offset) { return '\"\"';    })(pos0);\n        }\n        if (result0 === null) {\n          pos = pos0;\n        }\n        if (result0 === null) {\n          pos0 = pos;\n          pos1 = pos;\n          if (input.charCodeAt(pos) === 39) {\n            result0 = \"'\";\n            pos++;\n          } else {\n            result0 = null;\n            if (reportFailures === 0) {\n              matchFailed(\"\\\"'\\\"\");\n            }\n          }\n          if (result0 !== null) {\n            if (input.charCodeAt(pos) === 39) {\n              result1 = \"'\";\n              pos++;\n            } else {\n              result1 = null;\n              if (reportFailures === 0) {\n                matchFailed(\"\\\"'\\\"\");\n              }\n            }\n            if (result1 !== null) {\n              result2 = parse___();\n              if (result2 !== null) {\n                result0 = [result0, result1, result2];\n              } else {\n                result0 = null;\n                pos = pos1;\n              }\n            } else {\n              result0 = null;\n              pos = pos1;\n            }\n          } else {\n            result0 = null;\n            pos = pos1;\n          }\n          if (result0 !== null) {\n            result0 = (function(offset) { return \"''\";    })(pos0);\n          }\n          if (result0 === null) {\n            pos = pos0;\n          }\n          if (result0 === null) {\n            pos0 = pos;\n            pos1 = pos;\n            if (input.charCodeAt(pos) === 34) {\n              result0 = \"\\\"\";\n              pos++;\n            } else {\n              result0 = null;\n              if (reportFailures === 0) {\n                matchFailed(\"\\\"\\\\\\\"\\\"\");\n              }\n            }\n            if (result0 !== null) {\n              result1 = parse_chars();\n              if (result1 !== null) {\n                if (input.charCodeAt(pos) === 34) {\n                  result2 = \"\\\"\";\n                  pos++;\n                } else {\n                  result2 = null;\n                  if (reportFailures === 0) {\n                    matchFailed(\"\\\"\\\\\\\"\\\"\");\n                  }\n                }\n                if (result2 !== null) {\n                  result3 = parse___();\n                  if (result3 !== null) {\n                    result0 = [result0, result1, result2, result3];\n                  } else {\n                    result0 = null;\n                    pos = pos1;\n                  }\n                } else {\n                  result0 = null;\n                  pos = pos1;\n                }\n              } else {\n                result0 = null;\n                pos = pos1;\n              }\n            } else {\n              result0 = null;\n              pos = pos1;\n            }\n            if (result0 !== null) {\n              result0 = (function(offset, chars) { return '\"' + chars + '\"'; })(pos0, result0[1]);\n            }\n            if (result0 === null) {\n              pos = pos0;\n            }\n            if (result0 === null) {\n              pos0 = pos;\n              pos1 = pos;\n              if (input.charCodeAt(pos) === 39) {\n                result0 = \"'\";\n                pos++;\n              } else {\n                result0 = null;\n                if (reportFailures === 0) {\n                  matchFailed(\"\\\"'\\\"\");\n                }\n              }\n              if (result0 !== null) {\n                result1 = parse_schars();\n                if (result1 !== null) {\n                  if (input.charCodeAt(pos) === 39) {\n                    result2 = \"'\";\n                    pos++;\n                  } else {\n                    result2 = null;\n                    if (reportFailures === 0) {\n                      matchFailed(\"\\\"'\\\"\");\n                    }\n                  }\n                  if (result2 !== null) {\n                    result3 = parse___();\n                    if (result3 !== null) {\n                      result0 = [result0, result1, result2, result3];\n                    } else {\n                      result0 = null;\n                      pos = pos1;\n                    }\n                  } else {\n                    result0 = null;\n                    pos = pos1;\n                  }\n                } else {\n                  result0 = null;\n                  pos = pos1;\n                }\n              } else {\n                result0 = null;\n                pos = pos1;\n              }\n              if (result0 !== null) {\n                result0 = (function(offset, schars) { return \"'\" + schars + \"'\"; })(pos0, result0[1]);\n              }\n              if (result0 === null) {\n                pos = pos0;\n              }\n              if (result0 === null) {\n                pos0 = pos;\n                result0 = parse_TiConstant();\n                if (result0 !== null) {\n                  result0 = (function(offset, c) { return c.replace(ALLOY_EXPR, ''); })(pos0, result0);\n                }\n                if (result0 === null) {\n                  pos = pos0;\n                }\n              }\n            }\n          }\n        }\n        return result0;\n      }\n      \n      function parse_string() {\n        var result0, result1, result2, result3;\n        var pos0, pos1;\n        \n        reportFailures++;\n        pos0 = pos;\n        pos1 = pos;\n        if (input.charCodeAt(pos) === 34) {\n          result0 = \"\\\"\";\n          pos++;\n        } else {\n          result0 = null;\n          if (reportFailures === 0) {\n            matchFailed(\"\\\"\\\\\\\"\\\"\");\n          }\n        }\n        if (result0 !== null) {\n          if (input.charCodeAt(pos) === 34) {\n            result1 = \"\\\"\";\n            pos++;\n          } else {\n            result1 = null;\n            if (reportFailures === 0) {\n              matchFailed(\"\\\"\\\\\\\"\\\"\");\n            }\n          }\n          if (result1 !== null) {\n            result2 = parse___();\n            if (result2 !== null) {\n              result0 = [result0, result1, result2];\n            } else {\n              result0 = null;\n              pos = pos1;\n            }\n          } else {\n            result0 = null;\n            pos = pos1;\n          }\n        } else {\n          result0 = null;\n          pos = pos1;\n        }\n        if (result0 !== null) {\n          result0 = (function(offset) { return \"\";    })(pos0);\n        }\n        if (result0 === null) {\n          pos = pos0;\n        }\n        if (result0 === null) {\n          pos0 = pos;\n          pos1 = pos;\n          if (input.charCodeAt(pos) === 39) {\n            result0 = \"'\";\n            pos++;\n          } else {\n            result0 = null;\n            if (reportFailures === 0) {\n              matchFailed(\"\\\"'\\\"\");\n            }\n          }\n          if (result0 !== null) {\n            if (input.charCodeAt(pos) === 39) {\n              result1 = \"'\";\n              pos++;\n            } else {\n              result1 = null;\n              if (reportFailures === 0) {\n                matchFailed(\"\\\"'\\\"\");\n              }\n            }\n            if (result1 !== null) {\n              result2 = parse___();\n              if (result2 !== null) {\n                result0 = [result0, result1, result2];\n              } else {\n                result0 = null;\n                pos = pos1;\n              }\n            } else {\n              result0 = null;\n              pos = pos1;\n            }\n          } else {\n            result0 = null;\n            pos = pos1;\n          }\n          if (result0 !== null) {\n            result0 = (function(offset) { return \"\";    })(pos0);\n          }\n          if (result0 === null) {\n            pos = pos0;\n          }\n          if (result0 === null) {\n            pos0 = pos;\n            pos1 = pos;\n            if (input.charCodeAt(pos) === 34) {\n              result0 = \"\\\"\";\n              pos++;\n            } else {\n              result0 = null;\n              if (reportFailures === 0) {\n                matchFailed(\"\\\"\\\\\\\"\\\"\");\n              }\n            }\n            if (result0 !== null) {\n              result1 = parse_chars();\n              if (result1 !== null) {\n                if (input.charCodeAt(pos) === 34) {\n                  result2 = \"\\\"\";\n                  pos++;\n                } else {\n                  result2 = null;\n                  if (reportFailures === 0) {\n                    matchFailed(\"\\\"\\\\\\\"\\\"\");\n                  }\n                }\n                if (result2 !== null) {\n                  result3 = parse___();\n                  if (result3 !== null) {\n                    result0 = [result0, result1, result2, result3];\n                  } else {\n                    result0 = null;\n                    pos = pos1;\n                  }\n                } else {\n                  result0 = null;\n                  pos = pos1;\n                }\n              } else {\n                result0 = null;\n                pos = pos1;\n              }\n            } else {\n              result0 = null;\n              pos = pos1;\n            }\n            if (result0 !== null) {\n              result0 = (function(offset, chars) { return chars; })(pos0, result0[1]);\n            }\n            if (result0 === null) {\n              pos = pos0;\n            }\n            if (result0 === null) {\n              pos0 = pos;\n              pos1 = pos;\n              if (input.charCodeAt(pos) === 39) {\n                result0 = \"'\";\n                pos++;\n              } else {\n                result0 = null;\n                if (reportFailures === 0) {\n                  matchFailed(\"\\\"'\\\"\");\n                }\n              }\n              if (result0 !== null) {\n                result1 = parse_schars();\n                if (result1 !== null) {\n                  if (input.charCodeAt(pos) === 39) {\n                    result2 = \"'\";\n                    pos++;\n                  } else {\n                    result2 = null;\n                    if (reportFailures === 0) {\n                      matchFailed(\"\\\"'\\\"\");\n                    }\n                  }\n                  if (result2 !== null) {\n                    result3 = parse___();\n                    if (result3 !== null) {\n                      result0 = [result0, result1, result2, result3];\n                    } else {\n                      result0 = null;\n                      pos = pos1;\n                    }\n                  } else {\n                    result0 = null;\n                    pos = pos1;\n                  }\n                } else {\n                  result0 = null;\n                  pos = pos1;\n                }\n              } else {\n                result0 = null;\n                pos = pos1;\n              }\n              if (result0 !== null) {\n                result0 = (function(offset, schars) { return schars; })(pos0, result0[1]);\n              }\n              if (result0 === null) {\n                pos = pos0;\n              }\n            }\n          }\n        }\n        reportFailures--;\n        if (reportFailures === 0 && result0 === null) {\n          matchFailed(\"string\");\n        }\n        return result0;\n      }\n      \n      function parse_bareString() {\n        var result0, result1;\n        var pos0;\n        \n        reportFailures++;\n        pos0 = pos;\n        result1 = parse_bareChar();\n        if (result1 !== null) {\n          result0 = [];\n          while (result1 !== null) {\n            result0.push(result1);\n            result1 = parse_bareChar();\n          }\n        } else {\n          result0 = null;\n        }\n        if (result0 !== null) {\n          result0 = (function(offset, chars) { return chars.join(''); })(pos0, result0);\n        }\n        if (result0 === null) {\n          pos = pos0;\n        }\n        reportFailures--;\n        if (reportFailures === 0 && result0 === null) {\n          matchFailed(\"bare word\");\n        }\n        return result0;\n      }\n      \n      function parse_bareChar() {\n        var result0;\n        \n        if (/^[a-zA-Z0-9_$]/.test(input.charAt(pos))) {\n          result0 = input.charAt(pos);\n          pos++;\n        } else {\n          result0 = null;\n          if (reportFailures === 0) {\n            matchFailed(\"[a-zA-Z0-9_$]\");\n          }\n        }\n        return result0;\n      }\n      \n      function parse_schars() {\n        var result0, result1;\n        var pos0;\n        \n        pos0 = pos;\n        result1 = parse_schar();\n        if (result1 !== null) {\n          result0 = [];\n          while (result1 !== null) {\n            result0.push(result1);\n            result1 = parse_schar();\n          }\n        } else {\n          result0 = null;\n        }\n        if (result0 !== null) {\n          result0 = (function(offset, schars) { return schars.join(''); })(pos0, result0);\n        }\n        if (result0 === null) {\n          pos = pos0;\n        }\n        return result0;\n      }\n      \n      function parse_chars() {\n        var result0, result1;\n        var pos0;\n        \n        pos0 = pos;\n        result1 = parse_char();\n        if (result1 !== null) {\n          result0 = [];\n          while (result1 !== null) {\n            result0.push(result1);\n            result1 = parse_char();\n          }\n        } else {\n          result0 = null;\n        }\n        if (result0 !== null) {\n          result0 = (function(offset, chars) { return chars.join(''); })(pos0, result0);\n        }\n        if (result0 === null) {\n          pos = pos0;\n        }\n        return result0;\n      }\n      \n      function parse_schar() {\n        var result0, result1, result2, result3, result4;\n        var pos0, pos1;\n        \n        if (/^[^'\\\\\\0-\\x1F]/.test(input.charAt(pos))) {\n          result0 = input.charAt(pos);\n          pos++;\n        } else {\n          result0 = null;\n          if (reportFailures === 0) {\n            matchFailed(\"[^'\\\\\\\\\\\\0-\\\\x1F]\");\n          }\n        }\n        if (result0 === null) {\n          pos0 = pos;\n          if (input.substr(pos, 2) === \"\\\\'\") {\n            result0 = \"\\\\'\";\n            pos += 2;\n          } else {\n            result0 = null;\n            if (reportFailures === 0) {\n              matchFailed(\"\\\"\\\\\\\\'\\\"\");\n            }\n          }\n          if (result0 !== null) {\n            result0 = (function(offset) { return \"'\";  })(pos0);\n          }\n          if (result0 === null) {\n            pos = pos0;\n          }\n          if (result0 === null) {\n            pos0 = pos;\n            if (input.substr(pos, 2) === \"\\\\\\\\\") {\n              result0 = \"\\\\\\\\\";\n              pos += 2;\n            } else {\n              result0 = null;\n              if (reportFailures === 0) {\n                matchFailed(\"\\\"\\\\\\\\\\\\\\\\\\\"\");\n              }\n            }\n            if (result0 !== null) {\n              result0 = (function(offset) { return \"\\\\\"; })(pos0);\n            }\n            if (result0 === null) {\n              pos = pos0;\n            }\n            if (result0 === null) {\n              pos0 = pos;\n              if (input.substr(pos, 2) === \"\\\\/\") {\n                result0 = \"\\\\/\";\n                pos += 2;\n              } else {\n                result0 = null;\n                if (reportFailures === 0) {\n                  matchFailed(\"\\\"\\\\\\\\/\\\"\");\n                }\n              }\n              if (result0 !== null) {\n                result0 = (function(offset) { return \"/\";  })(pos0);\n              }\n              if (result0 === null) {\n                pos = pos0;\n              }\n              if (result0 === null) {\n                pos0 = pos;\n                if (input.substr(pos, 2) === \"\\\\b\") {\n                  result0 = \"\\\\b\";\n                  pos += 2;\n                } else {\n                  result0 = null;\n                  if (reportFailures === 0) {\n                    matchFailed(\"\\\"\\\\\\\\b\\\"\");\n                  }\n                }\n                if (result0 !== null) {\n                  result0 = (function(offset) { return \"\\b\"; })(pos0);\n                }\n                if (result0 === null) {\n                  pos = pos0;\n                }\n                if (result0 === null) {\n                  pos0 = pos;\n                  if (input.substr(pos, 2) === \"\\\\f\") {\n                    result0 = \"\\\\f\";\n                    pos += 2;\n                  } else {\n                    result0 = null;\n                    if (reportFailures === 0) {\n                      matchFailed(\"\\\"\\\\\\\\f\\\"\");\n                    }\n                  }\n                  if (result0 !== null) {\n                    result0 = (function(offset) { return \"\\f\"; })(pos0);\n                  }\n                  if (result0 === null) {\n                    pos = pos0;\n                  }\n                  if (result0 === null) {\n                    pos0 = pos;\n                    if (input.substr(pos, 2) === \"\\\\n\") {\n                      result0 = \"\\\\n\";\n                      pos += 2;\n                    } else {\n                      result0 = null;\n                      if (reportFailures === 0) {\n                        matchFailed(\"\\\"\\\\\\\\n\\\"\");\n                      }\n                    }\n                    if (result0 !== null) {\n                      result0 = (function(offset) { return \"\\n\"; })(pos0);\n                    }\n                    if (result0 === null) {\n                      pos = pos0;\n                    }\n                    if (result0 === null) {\n                      pos0 = pos;\n                      if (input.substr(pos, 2) === \"\\\\r\") {\n                        result0 = \"\\\\r\";\n                        pos += 2;\n                      } else {\n                        result0 = null;\n                        if (reportFailures === 0) {\n                          matchFailed(\"\\\"\\\\\\\\r\\\"\");\n                        }\n                      }\n                      if (result0 !== null) {\n                        result0 = (function(offset) { return \"\\r\"; })(pos0);\n                      }\n                      if (result0 === null) {\n                        pos = pos0;\n                      }\n                      if (result0 === null) {\n                        pos0 = pos;\n                        if (input.substr(pos, 2) === \"\\\\t\") {\n                          result0 = \"\\\\t\";\n                          pos += 2;\n                        } else {\n                          result0 = null;\n                          if (reportFailures === 0) {\n                            matchFailed(\"\\\"\\\\\\\\t\\\"\");\n                          }\n                        }\n                        if (result0 !== null) {\n                          result0 = (function(offset) { return \"\\t\"; })(pos0);\n                        }\n                        if (result0 === null) {\n                          pos = pos0;\n                        }\n                        if (result0 === null) {\n                          pos0 = pos;\n                          pos1 = pos;\n                          if (input.substr(pos, 2) === \"\\\\u\") {\n                            result0 = \"\\\\u\";\n                            pos += 2;\n                          } else {\n                            result0 = null;\n                            if (reportFailures === 0) {\n                              matchFailed(\"\\\"\\\\\\\\u\\\"\");\n                            }\n                          }\n                          if (result0 !== null) {\n                            result1 = parse_hexDigit();\n                            if (result1 !== null) {\n                              result2 = parse_hexDigit();\n                              if (result2 !== null) {\n                                result3 = parse_hexDigit();\n                                if (result3 !== null) {\n                                  result4 = parse_hexDigit();\n                                  if (result4 !== null) {\n                                    result0 = [result0, result1, result2, result3, result4];\n                                  } else {\n                                    result0 = null;\n                                    pos = pos1;\n                                  }\n                                } else {\n                                  result0 = null;\n                                  pos = pos1;\n                                }\n                              } else {\n                                result0 = null;\n                                pos = pos1;\n                              }\n                            } else {\n                              result0 = null;\n                              pos = pos1;\n                            }\n                          } else {\n                            result0 = null;\n                            pos = pos1;\n                          }\n                          if (result0 !== null) {\n                            result0 = (function(offset, h1, h2, h3, h4) {\n                                return String.fromCharCode(parseInt(\"0x\" + h1 + h2 + h3 + h4));\n                              })(pos0, result0[1], result0[2], result0[3], result0[4]);\n                          }\n                          if (result0 === null) {\n                            pos = pos0;\n                          }\n                        }\n                      }\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n        return result0;\n      }\n      \n      function parse_char() {\n        var result0, result1, result2, result3, result4;\n        var pos0, pos1;\n        \n        if (/^[^\"\\\\\\0-\\x1F]/.test(input.charAt(pos))) {\n          result0 = input.charAt(pos);\n          pos++;\n        } else {\n          result0 = null;\n          if (reportFailures === 0) {\n            matchFailed(\"[^\\\"\\\\\\\\\\\\0-\\\\x1F]\");\n          }\n        }\n        if (result0 === null) {\n          pos0 = pos;\n          if (input.substr(pos, 2) === \"\\\\\\\"\") {\n            result0 = \"\\\\\\\"\";\n            pos += 2;\n          } else {\n            result0 = null;\n            if (reportFailures === 0) {\n              matchFailed(\"\\\"\\\\\\\\\\\\\\\"\\\"\");\n            }\n          }\n          if (result0 !== null) {\n            result0 = (function(offset) { return '\"';  })(pos0);\n          }\n          if (result0 === null) {\n            pos = pos0;\n          }\n          if (result0 === null) {\n            pos0 = pos;\n            if (input.substr(pos, 2) === \"\\\\\\\\\") {\n              result0 = \"\\\\\\\\\";\n              pos += 2;\n            } else {\n              result0 = null;\n              if (reportFailures === 0) {\n                matchFailed(\"\\\"\\\\\\\\\\\\\\\\\\\"\");\n              }\n            }\n            if (result0 !== null) {\n              result0 = (function(offset) { return \"\\\\\"; })(pos0);\n            }\n            if (result0 === null) {\n              pos = pos0;\n            }\n            if (result0 === null) {\n              pos0 = pos;\n              if (input.substr(pos, 2) === \"\\\\/\") {\n                result0 = \"\\\\/\";\n                pos += 2;\n              } else {\n                result0 = null;\n                if (reportFailures === 0) {\n                  matchFailed(\"\\\"\\\\\\\\/\\\"\");\n                }\n              }\n              if (result0 !== null) {\n                result0 = (function(offset) { return \"/\";  })(pos0);\n              }\n              if (result0 === null) {\n                pos = pos0;\n              }\n              if (result0 === null) {\n                pos0 = pos;\n                if (input.substr(pos, 2) === \"\\\\b\") {\n                  result0 = \"\\\\b\";\n                  pos += 2;\n                } else {\n                  result0 = null;\n                  if (reportFailures === 0) {\n                    matchFailed(\"\\\"\\\\\\\\b\\\"\");\n                  }\n                }\n                if (result0 !== null) {\n                  result0 = (function(offset) { return \"\\b\"; })(pos0);\n                }\n                if (result0 === null) {\n                  pos = pos0;\n                }\n                if (result0 === null) {\n                  pos0 = pos;\n                  if (input.substr(pos, 2) === \"\\\\f\") {\n                    result0 = \"\\\\f\";\n                    pos += 2;\n                  } else {\n                    result0 = null;\n                    if (reportFailures === 0) {\n                      matchFailed(\"\\\"\\\\\\\\f\\\"\");\n                    }\n                  }\n                  if (result0 !== null) {\n                    result0 = (function(offset) { return \"\\f\"; })(pos0);\n                  }\n                  if (result0 === null) {\n                    pos = pos0;\n                  }\n                  if (result0 === null) {\n                    pos0 = pos;\n                    if (input.substr(pos, 2) === \"\\\\n\") {\n                      result0 = \"\\\\n\";\n                      pos += 2;\n                    } else {\n                      result0 = null;\n                      if (reportFailures === 0) {\n                        matchFailed(\"\\\"\\\\\\\\n\\\"\");\n                      }\n                    }\n                    if (result0 !== null) {\n                      result0 = (function(offset) { return \"\\n\"; })(pos0);\n                    }\n                    if (result0 === null) {\n                      pos = pos0;\n                    }\n                    if (result0 === null) {\n                      pos0 = pos;\n                      if (input.substr(pos, 2) === \"\\\\r\") {\n                        result0 = \"\\\\r\";\n                        pos += 2;\n                      } else {\n                        result0 = null;\n                        if (reportFailures === 0) {\n                          matchFailed(\"\\\"\\\\\\\\r\\\"\");\n                        }\n                      }\n                      if (result0 !== null) {\n                        result0 = (function(offset) { return \"\\r\"; })(pos0);\n                      }\n                      if (result0 === null) {\n                        pos = pos0;\n                      }\n                      if (result0 === null) {\n                        pos0 = pos;\n                        if (input.substr(pos, 2) === \"\\\\t\") {\n                          result0 = \"\\\\t\";\n                          pos += 2;\n                        } else {\n                          result0 = null;\n                          if (reportFailures === 0) {\n                            matchFailed(\"\\\"\\\\\\\\t\\\"\");\n                          }\n                        }\n                        if (result0 !== null) {\n                          result0 = (function(offset) { return \"\\t\"; })(pos0);\n                        }\n                        if (result0 === null) {\n                          pos = pos0;\n                        }\n                        if (result0 === null) {\n                          pos0 = pos;\n                          pos1 = pos;\n                          if (input.substr(pos, 2) === \"\\\\u\") {\n                            result0 = \"\\\\u\";\n                            pos += 2;\n                          } else {\n                            result0 = null;\n                            if (reportFailures === 0) {\n                              matchFailed(\"\\\"\\\\\\\\u\\\"\");\n                            }\n                          }\n                          if (result0 !== null) {\n                            result1 = parse_hexDigit();\n                            if (result1 !== null) {\n                              result2 = parse_hexDigit();\n                              if (result2 !== null) {\n                                result3 = parse_hexDigit();\n                                if (result3 !== null) {\n                                  result4 = parse_hexDigit();\n                                  if (result4 !== null) {\n                                    result0 = [result0, result1, result2, result3, result4];\n                                  } else {\n                                    result0 = null;\n                                    pos = pos1;\n                                  }\n                                } else {\n                                  result0 = null;\n                                  pos = pos1;\n                                }\n                              } else {\n                                result0 = null;\n                                pos = pos1;\n                              }\n                            } else {\n                              result0 = null;\n                              pos = pos1;\n                            }\n                          } else {\n                            result0 = null;\n                            pos = pos1;\n                          }\n                          if (result0 !== null) {\n                            result0 = (function(offset, h1, h2, h3, h4) {\n                                return String.fromCharCode(parseInt(\"0x\" + h1 + h2 + h3 + h4));\n                              })(pos0, result0[1], result0[2], result0[3], result0[4]);\n                          }\n                          if (result0 === null) {\n                            pos = pos0;\n                          }\n                        }\n                      }\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n        return result0;\n      }\n      \n      function parse_number() {\n        var result0, result1, result2, result3;\n        var pos0, pos1;\n        \n        reportFailures++;\n        pos0 = pos;\n        pos1 = pos;\n        result0 = parse_int();\n        if (result0 !== null) {\n          result1 = parse_frac();\n          if (result1 !== null) {\n            result2 = parse_exp();\n            if (result2 !== null) {\n              result3 = parse___();\n              if (result3 !== null) {\n                result0 = [result0, result1, result2, result3];\n              } else {\n                result0 = null;\n                pos = pos1;\n              }\n            } else {\n              result0 = null;\n              pos = pos1;\n            }\n          } else {\n            result0 = null;\n            pos = pos1;\n          }\n        } else {\n          result0 = null;\n          pos = pos1;\n        }\n        if (result0 !== null) {\n          result0 = (function(offset, int_, frac, exp) { return parseFloat(int_ + frac + exp); })(pos0, result0[0], result0[1], result0[2]);\n        }\n        if (result0 === null) {\n          pos = pos0;\n        }\n        if (result0 === null) {\n          pos0 = pos;\n          pos1 = pos;\n          result0 = parse_int();\n          if (result0 !== null) {\n            result1 = parse_frac();\n            if (result1 !== null) {\n              result2 = parse___();\n              if (result2 !== null) {\n                result0 = [result0, result1, result2];\n              } else {\n                result0 = null;\n                pos = pos1;\n              }\n            } else {\n              result0 = null;\n              pos = pos1;\n            }\n          } else {\n            result0 = null;\n            pos = pos1;\n          }\n          if (result0 !== null) {\n            result0 = (function(offset, int_, frac) { return parseFloat(int_ + frac);       })(pos0, result0[0], result0[1]);\n          }\n          if (result0 === null) {\n            pos = pos0;\n          }\n          if (result0 === null) {\n            pos0 = pos;\n            pos1 = pos;\n            result0 = parse_int();\n            if (result0 !== null) {\n              result1 = parse_exp();\n              if (result1 !== null) {\n                result2 = parse___();\n                if (result2 !== null) {\n                  result0 = [result0, result1, result2];\n                } else {\n                  result0 = null;\n                  pos = pos1;\n                }\n              } else {\n                result0 = null;\n                pos = pos1;\n              }\n            } else {\n              result0 = null;\n              pos = pos1;\n            }\n            if (result0 !== null) {\n              result0 = (function(offset, int_, exp) { return parseFloat(int_ + exp);        })(pos0, result0[0], result0[1]);\n            }\n            if (result0 === null) {\n              pos = pos0;\n            }\n            if (result0 === null) {\n              pos0 = pos;\n              pos1 = pos;\n              result0 = parse_int();\n              if (result0 !== null) {\n                result1 = parse___();\n                if (result1 !== null) {\n                  result0 = [result0, result1];\n                } else {\n                  result0 = null;\n                  pos = pos1;\n                }\n              } else {\n                result0 = null;\n                pos = pos1;\n              }\n              if (result0 !== null) {\n                result0 = (function(offset, int_) { return parseFloat(int_);              })(pos0, result0[0]);\n              }\n              if (result0 === null) {\n                pos = pos0;\n              }\n            }\n          }\n        }\n        reportFailures--;\n        if (reportFailures === 0 && result0 === null) {\n          matchFailed(\"number\");\n        }\n        return result0;\n      }\n      \n      function parse_int() {\n        var result0, result1, result2;\n        var pos0, pos1;\n        \n        pos0 = pos;\n        pos1 = pos;\n        result0 = parse_digit19();\n        if (result0 !== null) {\n          result1 = parse_digits();\n          if (result1 !== null) {\n            result0 = [result0, result1];\n          } else {\n            result0 = null;\n            pos = pos1;\n          }\n        } else {\n          result0 = null;\n          pos = pos1;\n        }\n        if (result0 !== null) {\n          result0 = (function(offset, digit19, digits) { return digit19 + digits;       })(pos0, result0[0], result0[1]);\n        }\n        if (result0 === null) {\n          pos = pos0;\n        }\n        if (result0 === null) {\n          result0 = parse_digit();\n          if (result0 === null) {\n            pos0 = pos;\n            pos1 = pos;\n            if (input.charCodeAt(pos) === 45) {\n              result0 = \"-\";\n              pos++;\n            } else {\n              result0 = null;\n              if (reportFailures === 0) {\n                matchFailed(\"\\\"-\\\"\");\n              }\n            }\n            if (result0 !== null) {\n              result1 = parse_digit19();\n              if (result1 !== null) {\n                result2 = parse_digits();\n                if (result2 !== null) {\n                  result0 = [result0, result1, result2];\n                } else {\n                  result0 = null;\n                  pos = pos1;\n                }\n              } else {\n                result0 = null;\n                pos = pos1;\n              }\n            } else {\n              result0 = null;\n              pos = pos1;\n            }\n            if (result0 !== null) {\n              result0 = (function(offset, digit19, digits) { return \"-\" + digit19 + digits; })(pos0, result0[1], result0[2]);\n            }\n            if (result0 === null) {\n              pos = pos0;\n            }\n            if (result0 === null) {\n              pos0 = pos;\n              pos1 = pos;\n              if (input.charCodeAt(pos) === 45) {\n                result0 = \"-\";\n                pos++;\n              } else {\n                result0 = null;\n                if (reportFailures === 0) {\n                  matchFailed(\"\\\"-\\\"\");\n                }\n              }\n              if (result0 !== null) {\n                result1 = parse_digit();\n                if (result1 !== null) {\n                  result0 = [result0, result1];\n                } else {\n                  result0 = null;\n                  pos = pos1;\n                }\n              } else {\n                result0 = null;\n                pos = pos1;\n              }\n              if (result0 !== null) {\n                result0 = (function(offset, digit) { return \"-\" + digit;            })(pos0, result0[1]);\n              }\n              if (result0 === null) {\n                pos = pos0;\n              }\n            }\n          }\n        }\n        return result0;\n      }\n      \n      function parse_frac() {\n        var result0, result1;\n        var pos0, pos1;\n        \n        pos0 = pos;\n        pos1 = pos;\n        if (input.charCodeAt(pos) === 46) {\n          result0 = \".\";\n          pos++;\n        } else {\n          result0 = null;\n          if (reportFailures === 0) {\n            matchFailed(\"\\\".\\\"\");\n          }\n        }\n        if (result0 !== null) {\n          result1 = parse_digits();\n          if (result1 !== null) {\n            result0 = [result0, result1];\n          } else {\n            result0 = null;\n            pos = pos1;\n          }\n        } else {\n          result0 = null;\n          pos = pos1;\n        }\n        if (result0 !== null) {\n          result0 = (function(offset, digits) { return \".\" + digits; })(pos0, result0[1]);\n        }\n        if (result0 === null) {\n          pos = pos0;\n        }\n        return result0;\n      }\n      \n      function parse_exp() {\n        var result0, result1;\n        var pos0, pos1;\n        \n        pos0 = pos;\n        pos1 = pos;\n        result0 = parse_e();\n        if (result0 !== null) {\n          result1 = parse_digits();\n          if (result1 !== null) {\n            result0 = [result0, result1];\n          } else {\n            result0 = null;\n            pos = pos1;\n          }\n        } else {\n          result0 = null;\n          pos = pos1;\n        }\n        if (result0 !== null) {\n          result0 = (function(offset, e, digits) { return e + digits; })(pos0, result0[0], result0[1]);\n        }\n        if (result0 === null) {\n          pos = pos0;\n        }\n        return result0;\n      }\n      \n      function parse_digits() {\n        var result0, result1;\n        var pos0;\n        \n        pos0 = pos;\n        result1 = parse_digit();\n        if (result1 !== null) {\n          result0 = [];\n          while (result1 !== null) {\n            result0.push(result1);\n            result1 = parse_digit();\n          }\n        } else {\n          result0 = null;\n        }\n        if (result0 !== null) {\n          result0 = (function(offset, digits) { return digits.join(\"\"); })(pos0, result0);\n        }\n        if (result0 === null) {\n          pos = pos0;\n        }\n        return result0;\n      }\n      \n      function parse_e() {\n        var result0, result1;\n        var pos0, pos1;\n        \n        pos0 = pos;\n        pos1 = pos;\n        if (/^[eE]/.test(input.charAt(pos))) {\n          result0 = input.charAt(pos);\n          pos++;\n        } else {\n          result0 = null;\n          if (reportFailures === 0) {\n            matchFailed(\"[eE]\");\n          }\n        }\n        if (result0 !== null) {\n          if (/^[+\\-]/.test(input.charAt(pos))) {\n            result1 = input.charAt(pos);\n            pos++;\n          } else {\n            result1 = null;\n            if (reportFailures === 0) {\n              matchFailed(\"[+\\\\-]\");\n            }\n          }\n          result1 = result1 !== null ? result1 : \"\";\n          if (result1 !== null) {\n            result0 = [result0, result1];\n          } else {\n            result0 = null;\n            pos = pos1;\n          }\n        } else {\n          result0 = null;\n          pos = pos1;\n        }\n        if (result0 !== null) {\n          result0 = (function(offset, e, sign) { return e + sign; })(pos0, result0[0], result0[1]);\n        }\n        if (result0 === null) {\n          pos = pos0;\n        }\n        return result0;\n      }\n      \n      function parse_digit() {\n        var result0;\n        \n        if (/^[0-9]/.test(input.charAt(pos))) {\n          result0 = input.charAt(pos);\n          pos++;\n        } else {\n          result0 = null;\n          if (reportFailures === 0) {\n            matchFailed(\"[0-9]\");\n          }\n        }\n        return result0;\n      }\n      \n      function parse_digit19() {\n        var result0;\n        \n        if (/^[1-9]/.test(input.charAt(pos))) {\n          result0 = input.charAt(pos);\n          pos++;\n        } else {\n          result0 = null;\n          if (reportFailures === 0) {\n            matchFailed(\"[1-9]\");\n          }\n        }\n        return result0;\n      }\n      \n      function parse_hexDigit() {\n        var result0;\n        \n        if (/^[0-9a-fA-F]/.test(input.charAt(pos))) {\n          result0 = input.charAt(pos);\n          pos++;\n        } else {\n          result0 = null;\n          if (reportFailures === 0) {\n            matchFailed(\"[0-9a-fA-F]\");\n          }\n        }\n        return result0;\n      }\n      \n      function parse__() {\n        var result0, result1;\n        \n        result0 = [];\n        result1 = parse_WhiteSpace();\n        if (result1 === null) {\n          result1 = parse_MultiLineCommentNoLineTerminator();\n          if (result1 === null) {\n            result1 = parse_SingleLineComment();\n          }\n        }\n        while (result1 !== null) {\n          result0.push(result1);\n          result1 = parse_WhiteSpace();\n          if (result1 === null) {\n            result1 = parse_MultiLineCommentNoLineTerminator();\n            if (result1 === null) {\n              result1 = parse_SingleLineComment();\n            }\n          }\n        }\n        return result0;\n      }\n      \n      function parse___() {\n        var result0, result1;\n        \n        result0 = [];\n        result1 = parse_WhiteSpace();\n        if (result1 === null) {\n          result1 = parse_LineTerminatorSequence();\n          if (result1 === null) {\n            result1 = parse_Comment();\n          }\n        }\n        while (result1 !== null) {\n          result0.push(result1);\n          result1 = parse_WhiteSpace();\n          if (result1 === null) {\n            result1 = parse_LineTerminatorSequence();\n            if (result1 === null) {\n              result1 = parse_Comment();\n            }\n          }\n        }\n        return result0;\n      }\n      \n      function parse____() {\n        var result0, result1;\n        \n        result1 = parse_WhiteSpace();\n        if (result1 === null) {\n          result1 = parse_LineTerminatorSequence();\n          if (result1 === null) {\n            result1 = parse_Comment();\n            if (result1 === null) {\n              result1 = parse_Comma();\n            }\n          }\n        }\n        if (result1 !== null) {\n          result0 = [];\n          while (result1 !== null) {\n            result0.push(result1);\n            result1 = parse_WhiteSpace();\n            if (result1 === null) {\n              result1 = parse_LineTerminatorSequence();\n              if (result1 === null) {\n                result1 = parse_Comment();\n                if (result1 === null) {\n                  result1 = parse_Comma();\n                }\n              }\n            }\n          }\n        } else {\n          result0 = null;\n        }\n        return result0;\n      }\n      \n      function parse_Comma() {\n        var result0;\n        \n        if (input.charCodeAt(pos) === 44) {\n          result0 = \",\";\n          pos++;\n        } else {\n          result0 = null;\n          if (reportFailures === 0) {\n            matchFailed(\"\\\",\\\"\");\n          }\n        }\n        return result0;\n      }\n      \n      function parse_LineTerminator() {\n        var result0;\n        \n        if (/^[\\n\\r\\u2028\\u2029]/.test(input.charAt(pos))) {\n          result0 = input.charAt(pos);\n          pos++;\n        } else {\n          result0 = null;\n          if (reportFailures === 0) {\n            matchFailed(\"[\\\\n\\\\r\\\\u2028\\\\u2029]\");\n          }\n        }\n        return result0;\n      }\n      \n      function parse_LineTerminatorSequence() {\n        var result0;\n        \n        reportFailures++;\n        if (input.charCodeAt(pos) === 10) {\n          result0 = \"\\n\";\n          pos++;\n        } else {\n          result0 = null;\n          if (reportFailures === 0) {\n            matchFailed(\"\\\"\\\\n\\\"\");\n          }\n        }\n        if (result0 === null) {\n          if (input.substr(pos, 2) === \"\\r\\n\") {\n            result0 = \"\\r\\n\";\n            pos += 2;\n          } else {\n            result0 = null;\n            if (reportFailures === 0) {\n              matchFailed(\"\\\"\\\\r\\\\n\\\"\");\n            }\n          }\n          if (result0 === null) {\n            if (input.charCodeAt(pos) === 13) {\n              result0 = \"\\r\";\n              pos++;\n            } else {\n              result0 = null;\n              if (reportFailures === 0) {\n                matchFailed(\"\\\"\\\\r\\\"\");\n              }\n            }\n            if (result0 === null) {\n              if (input.charCodeAt(pos) === 8232) {\n                result0 = \"\\u2028\";\n                pos++;\n              } else {\n                result0 = null;\n                if (reportFailures === 0) {\n                  matchFailed(\"\\\"\\\\u2028\\\"\");\n                }\n              }\n              if (result0 === null) {\n                if (input.charCodeAt(pos) === 8233) {\n                  result0 = \"\\u2029\";\n                  pos++;\n                } else {\n                  result0 = null;\n                  if (reportFailures === 0) {\n                    matchFailed(\"\\\"\\\\u2029\\\"\");\n                  }\n                }\n              }\n            }\n          }\n        }\n        reportFailures--;\n        if (reportFailures === 0 && result0 === null) {\n          matchFailed(\"end of line\");\n        }\n        return result0;\n      }\n      \n      function parse_SourceCharacter() {\n        var result0;\n        \n        if (input.length > pos) {\n          result0 = input.charAt(pos);\n          pos++;\n        } else {\n          result0 = null;\n          if (reportFailures === 0) {\n            matchFailed(\"any character\");\n          }\n        }\n        return result0;\n      }\n      \n      function parse_WhiteSpace() {\n        var result0;\n        \n        reportFailures++;\n        if (/^[\\t\\x0B\\f \\xA0\\uFEFF]/.test(input.charAt(pos))) {\n          result0 = input.charAt(pos);\n          pos++;\n        } else {\n          result0 = null;\n          if (reportFailures === 0) {\n            matchFailed(\"[\\\\t\\\\x0B\\\\f \\\\xA0\\\\uFEFF]\");\n          }\n        }\n        reportFailures--;\n        if (reportFailures === 0 && result0 === null) {\n          matchFailed(\"whitespace\");\n        }\n        return result0;\n      }\n      \n      function parse_Comment() {\n        var result0;\n        \n        reportFailures++;\n        result0 = parse_MultiLineComment();\n        if (result0 === null) {\n          result0 = parse_SingleLineComment();\n        }\n        reportFailures--;\n        if (reportFailures === 0 && result0 === null) {\n          matchFailed(\"comment\");\n        }\n        return result0;\n      }\n      \n      function parse_MultiLineComment() {\n        var result0, result1, result2, result3;\n        var pos0, pos1, pos2;\n        \n        pos0 = pos;\n        if (input.substr(pos, 2) === \"/*\") {\n          result0 = \"/*\";\n          pos += 2;\n        } else {\n          result0 = null;\n          if (reportFailures === 0) {\n            matchFailed(\"\\\"/*\\\"\");\n          }\n        }\n        if (result0 !== null) {\n          result1 = [];\n          pos1 = pos;\n          pos2 = pos;\n          reportFailures++;\n          if (input.substr(pos, 2) === \"*/\") {\n            result2 = \"*/\";\n            pos += 2;\n          } else {\n            result2 = null;\n            if (reportFailures === 0) {\n              matchFailed(\"\\\"*/\\\"\");\n            }\n          }\n          reportFailures--;\n          if (result2 === null) {\n            result2 = \"\";\n          } else {\n            result2 = null;\n            pos = pos2;\n          }\n          if (result2 !== null) {\n            result3 = parse_SourceCharacter();\n            if (result3 !== null) {\n              result2 = [result2, result3];\n            } else {\n              result2 = null;\n              pos = pos1;\n            }\n          } else {\n            result2 = null;\n            pos = pos1;\n          }\n          while (result2 !== null) {\n            result1.push(result2);\n            pos1 = pos;\n            pos2 = pos;\n            reportFailures++;\n            if (input.substr(pos, 2) === \"*/\") {\n              result2 = \"*/\";\n              pos += 2;\n            } else {\n              result2 = null;\n              if (reportFailures === 0) {\n                matchFailed(\"\\\"*/\\\"\");\n              }\n            }\n            reportFailures--;\n            if (result2 === null) {\n              result2 = \"\";\n            } else {\n              result2 = null;\n              pos = pos2;\n            }\n            if (result2 !== null) {\n              result3 = parse_SourceCharacter();\n              if (result3 !== null) {\n                result2 = [result2, result3];\n              } else {\n                result2 = null;\n                pos = pos1;\n              }\n            } else {\n              result2 = null;\n              pos = pos1;\n            }\n          }\n          if (result1 !== null) {\n            if (input.substr(pos, 2) === \"*/\") {\n              result2 = \"*/\";\n              pos += 2;\n            } else {\n              result2 = null;\n              if (reportFailures === 0) {\n                matchFailed(\"\\\"*/\\\"\");\n              }\n            }\n            if (result2 !== null) {\n              result0 = [result0, result1, result2];\n            } else {\n              result0 = null;\n              pos = pos0;\n            }\n          } else {\n            result0 = null;\n            pos = pos0;\n          }\n        } else {\n          result0 = null;\n          pos = pos0;\n        }\n        return result0;\n      }\n      \n      function parse_SingleLineComment() {\n        var result0, result1, result2, result3;\n        var pos0, pos1, pos2;\n        \n        pos0 = pos;\n        if (input.substr(pos, 2) === \"//\") {\n          result0 = \"//\";\n          pos += 2;\n        } else {\n          result0 = null;\n          if (reportFailures === 0) {\n            matchFailed(\"\\\"//\\\"\");\n          }\n        }\n        if (result0 !== null) {\n          result1 = [];\n          pos1 = pos;\n          pos2 = pos;\n          reportFailures++;\n          result2 = parse_LineTerminator();\n          reportFailures--;\n          if (result2 === null) {\n            result2 = \"\";\n          } else {\n            result2 = null;\n            pos = pos2;\n          }\n          if (result2 !== null) {\n            result3 = parse_SourceCharacter();\n            if (result3 !== null) {\n              result2 = [result2, result3];\n            } else {\n              result2 = null;\n              pos = pos1;\n            }\n          } else {\n            result2 = null;\n            pos = pos1;\n          }\n          while (result2 !== null) {\n            result1.push(result2);\n            pos1 = pos;\n            pos2 = pos;\n            reportFailures++;\n            result2 = parse_LineTerminator();\n            reportFailures--;\n            if (result2 === null) {\n              result2 = \"\";\n            } else {\n              result2 = null;\n              pos = pos2;\n            }\n            if (result2 !== null) {\n              result3 = parse_SourceCharacter();\n              if (result3 !== null) {\n                result2 = [result2, result3];\n              } else {\n                result2 = null;\n                pos = pos1;\n              }\n            } else {\n              result2 = null;\n              pos = pos1;\n            }\n          }\n          if (result1 !== null) {\n            result0 = [result0, result1];\n          } else {\n            result0 = null;\n            pos = pos0;\n          }\n        } else {\n          result0 = null;\n          pos = pos0;\n        }\n        return result0;\n      }\n      \n      function parse_MultiLineCommentNoLineTerminator() {\n        var result0, result1, result2, result3;\n        var pos0, pos1, pos2;\n        \n        pos0 = pos;\n        if (input.substr(pos, 2) === \"/*\") {\n          result0 = \"/*\";\n          pos += 2;\n        } else {\n          result0 = null;\n          if (reportFailures === 0) {\n            matchFailed(\"\\\"/*\\\"\");\n          }\n        }\n        if (result0 !== null) {\n          result1 = [];\n          pos1 = pos;\n          pos2 = pos;\n          reportFailures++;\n          if (input.substr(pos, 2) === \"*/\") {\n            result2 = \"*/\";\n            pos += 2;\n          } else {\n            result2 = null;\n            if (reportFailures === 0) {\n              matchFailed(\"\\\"*/\\\"\");\n            }\n          }\n          if (result2 === null) {\n            result2 = parse_LineTerminator();\n          }\n          reportFailures--;\n          if (result2 === null) {\n            result2 = \"\";\n          } else {\n            result2 = null;\n            pos = pos2;\n          }\n          if (result2 !== null) {\n            result3 = parse_SourceCharacter();\n            if (result3 !== null) {\n              result2 = [result2, result3];\n            } else {\n              result2 = null;\n              pos = pos1;\n            }\n          } else {\n            result2 = null;\n            pos = pos1;\n          }\n          while (result2 !== null) {\n            result1.push(result2);\n            pos1 = pos;\n            pos2 = pos;\n            reportFailures++;\n            if (input.substr(pos, 2) === \"*/\") {\n              result2 = \"*/\";\n              pos += 2;\n            } else {\n              result2 = null;\n              if (reportFailures === 0) {\n                matchFailed(\"\\\"*/\\\"\");\n              }\n            }\n            if (result2 === null) {\n              result2 = parse_LineTerminator();\n            }\n            reportFailures--;\n            if (result2 === null) {\n              result2 = \"\";\n            } else {\n              result2 = null;\n              pos = pos2;\n            }\n            if (result2 !== null) {\n              result3 = parse_SourceCharacter();\n              if (result3 !== null) {\n                result2 = [result2, result3];\n              } else {\n                result2 = null;\n                pos = pos1;\n              }\n            } else {\n              result2 = null;\n              pos = pos1;\n            }\n          }\n          if (result1 !== null) {\n            if (input.substr(pos, 2) === \"*/\") {\n              result2 = \"*/\";\n              pos += 2;\n            } else {\n              result2 = null;\n              if (reportFailures === 0) {\n                matchFailed(\"\\\"*/\\\"\");\n              }\n            }\n            if (result2 !== null) {\n              result0 = [result0, result1, result2];\n            } else {\n              result0 = null;\n              pos = pos0;\n            }\n          } else {\n            result0 = null;\n            pos = pos0;\n          }\n        } else {\n          result0 = null;\n          pos = pos0;\n        }\n        return result0;\n      }\n      \n      \n      function cleanupExpected(expected) {\n        expected.sort();\n        \n        var lastExpected = null;\n        var cleanExpected = [];\n        for (var i = 0; i < expected.length; i++) {\n          if (expected[i] !== lastExpected) {\n            cleanExpected.push(expected[i]);\n            lastExpected = expected[i];\n          }\n        }\n        return cleanExpected;\n      }\n      \n      function computeErrorPosition() {\n        /*\n         * The first idea was to use |String.split| to break the input up to the\n         * error position along newlines and derive the line and column from\n         * there. However IE's |split| implementation is so broken that it was\n         * enough to prevent it.\n         */\n        \n        var line = 1;\n        var column = 1;\n        var seenCR = false;\n        \n        for (var i = 0; i < Math.max(pos, rightmostFailuresPos); i++) {\n          var ch = input.charAt(i);\n          if (ch === \"\\n\") {\n            if (!seenCR) { line++; }\n            column = 1;\n            seenCR = false;\n          } else if (ch === \"\\r\" || ch === \"\\u2028\" || ch === \"\\u2029\") {\n            line++;\n            column = 1;\n            seenCR = true;\n          } else {\n            column++;\n            seenCR = false;\n          }\n        }\n        \n        return { line: line, column: column };\n      }\n      \n      \n        var ALLOY_EXPR = '__ALLOY_EXPR__--';\n        function processValue(o) {\n          if (Object.prototype.toString.call(o) === '[object String]') {\n            var str = o.replace(ALLOY_EXPR,'');\n            if (str.length === o.length) {\n              return '\"' + str.replace(/\"/g, \"\\\\\\\"\") + '\"';\n            } else {\n              return str;\n            }\n          } else {\n            return o;\n          }\n        }\n      \n      \n      var result = parseFunctions[startRule]();\n      \n      /*\n       * The parser is now in one of the following three states:\n       *\n       * 1. The parser successfully parsed the whole input.\n       *\n       *    - |result !== null|\n       *    - |pos === input.length|\n       *    - |rightmostFailuresExpected| may or may not contain something\n       *\n       * 2. The parser successfully parsed only a part of the input.\n       *\n       *    - |result !== null|\n       *    - |pos < input.length|\n       *    - |rightmostFailuresExpected| may or may not contain something\n       *\n       * 3. The parser did not successfully parse any part of the input.\n       *\n       *   - |result === null|\n       *   - |pos === 0|\n       *   - |rightmostFailuresExpected| contains at least one failure\n       *\n       * All code following this comment (including called functions) must\n       * handle these states.\n       */\n      if (result === null || pos !== input.length) {\n        var offset = Math.max(pos, rightmostFailuresPos);\n        var found = offset < input.length ? input.charAt(offset) : null;\n        var errorPosition = computeErrorPosition();\n        \n        throw new this.SyntaxError(\n          cleanupExpected(rightmostFailuresExpected),\n          found,\n          offset,\n          errorPosition.line,\n          errorPosition.column\n        );\n      }\n      \n      return result;\n    },\n    \n    /* Returns the parser source code. */\n    toSource: function() { return this._source; }\n  };\n  \n  /* Thrown when a parser encounters a syntax error. */\n  \n  result.SyntaxError = function(expected, found, offset, line, column) {\n    function buildMessage(expected, found) {\n      var expectedHumanized, foundHumanized;\n      \n      switch (expected.length) {\n        case 0:\n          expectedHumanized = \"end of input\";\n          break;\n        case 1:\n          expectedHumanized = expected[0];\n          break;\n        default:\n          expectedHumanized = expected.slice(0, expected.length - 1).join(\", \")\n            + \" or \"\n            + expected[expected.length - 1];\n      }\n      \n      foundHumanized = found ? quote(found) : \"end of input\";\n      \n      return \"Expected \" + expectedHumanized + \" but \" + foundHumanized + \" found.\";\n    }\n    \n    this.name = \"SyntaxError\";\n    this.expected = expected;\n    this.found = found;\n    this.message = buildMessage(expected, found);\n    this.offset = offset;\n    this.line = line;\n    this.column = column;\n  };\n  \n  result.SyntaxError.prototype = Error.prototype;\n  \n  return result;\n})();\n","/home/travis/build/npmtest/node-npmtest-alloy/node_modules/alloy/Alloy/template/app.js":"/**\n * Alloy for Titanium by Appcelerator\n * This is generated code, DO NOT MODIFY - changes will be lost!\n * Copyright (c) 2012 by Appcelerator, Inc.\n */\nvar Alloy = require('/alloy'),\n\t_ = Alloy._,\n\tBackbone = Alloy.Backbone;\n\n__MAPMARKER_ALLOY_JS__\nAlloy.createController('index');","/home/travis/build/npmtest/node-npmtest-alloy/node_modules/alloy/Alloy/template/component.js":"var Alloy = require('/alloy'),\n\tBackbone = Alloy.Backbone,\n\t_ = Alloy._;\n\n<%= WPATH %>\n\nfunction __processArg(obj, key) {\n\tvar arg = null;\n\tif (obj) {\n\t\targ = obj[key] || null;\n\t\tdelete obj[key];\n\t}\n\treturn arg;\n}\n\nfunction Controller() {\n\t<%= Widget %>\n\trequire('/alloy/controllers/' + <%= parentController %>).apply(this, Array.prototype.slice.call(arguments));\n\tthis.__controllerPath = '<%= controllerPath %>';\n\tthis.args = arguments[0] || {};\n\n\tif (arguments[0]) {\n\t\tvar <%= parentVariable %> = __processArg(arguments[0], '<%= parentVariable %>');\n\t\tvar <%= modelVariable %> = __processArg(arguments[0], '<%= modelVariable %>');\n\t\tvar <%= itemTemplateVariable %> = __processArg(arguments[0], '<%= itemTemplateVariable %>');\n\t}\n\tvar $ = this;\n\tvar exports = {};\n\tvar __defers = {};\n\n\t// Generated code that must be executed before all UI and/or\n\t// controller code. One example is all model and collection\n\t// declarations from markup.\n\t<%= preCode %>\n\n\t// Generated UI code\n\t<%= viewCode %>\n\n\t// make all IDed elements in $.__views available right on the $ in a\n\t// controller's internal code. Externally the IDed elements will\n\t// be accessed with getView().\n\t_.extend($, $.__views);\n\n\t// Controller code directly from the developer's controller file\n\t__MAPMARKER_CONTROLLER_CODE__\n\n\t// Generated code that must be executed after all UI and\n\t// controller code. One example deferred event handlers whose\n\t// functions are not defined until after the controller code\n\t// is executed.\n\t<%= postCode %>\n\n\t// Extend the $ instance with all functions and properties\n\t// defined on the exports object.\n\t_.extend($, exports);\n}\n\nmodule.exports = Controller;","/home/travis/build/npmtest/node-npmtest-alloy/node_modules/alloy/Alloy/template/controller.js":"// Arguments passed into this controller can be accessed via the `$.args` object directly or:\nvar args = $.args;\n","/home/travis/build/npmtest/node-npmtest-alloy/node_modules/alloy/Alloy/template/migration.js":"migration.up = function(migrator) {\n<%= up %>\n};\n\nmigration.down = function(migrator) {\n<%= down %>\n};\n","/home/travis/build/npmtest/node-npmtest-alloy/node_modules/alloy/Alloy/template/modelcode.js":"exports.definition = {\n\tconfig: {\n<%= schema %>\n\t\tadapter: {\n\t\t\ttype: \"<%= adapter %>\",\n\t\t\tcollection_name: \"<%= name %>\"\n\t\t}\n\t},\n\textendModel: function(Model) {\n\t\t_.extend(Model.prototype, {\n\t\t\t// extended functions and properties go here\n\t\t});\n\n\t\treturn Model;\n\t},\n\textendCollection: function(Collection) {\n\t\t_.extend(Collection.prototype, {\n\t\t\t// extended functions and properties go here\n\n\t\t\t// For Backbone v1.1.2, uncomment the following to override the\n\t\t\t// fetch method to account for a breaking change in Backbone.\n\t\t\t/*\n\t\t\tfetch: function(options) {\n\t\t\t\toptions = options ? _.clone(options) : {};\n\t\t\t\toptions.reset = true;\n\t\t\t\treturn Backbone.Collection.prototype.fetch.call(this, options);\n\t\t\t}\n\t\t\t*/\n\t\t});\n\n\t\treturn Collection;\n\t}\n};","/home/travis/build/npmtest/node-npmtest-alloy/node_modules/alloy/Alloy/template/model.js":"var Alloy = require('/alloy'),\n    _ = require(\"/alloy/underscore\")._,\n\tmodel, collection;\n\n<%= modelJs %>\n\nmodel = Alloy.M('<%= basename %>',\n\texports.definition,\n\t[<%= migrations %>]\n);\n\ncollection = Alloy.C('<%= basename %>',\n\texports.definition,\n\tmodel\n);\n\nexports.Model = model;\nexports.Collection = collection;\n","/home/travis/build/npmtest/node-npmtest-alloy/node_modules/alloy/Alloy/template/Ti.Android.ActionBar.js":"function <%= openFunc %>() {\n\t<%= parent %>.removeEventListener('open', <%= openFunc %>);\n\tif (<%= parent %>.activity) {\n\t\t<%= code %>\n\t} else {\n\t\tTi.API.warn('You attempted to access an Activity on a lightweight Window or other');\n\t\tTi.API.warn('UI component which does not have an Android activity. Android Activities');\n\t\tTi.API.warn('are valid with only windows in TabGroups or heavyweight Windows.');\n\t}\n}\n<%= parent %>.addEventListener('open', <%= openFunc %>);\n","/home/travis/build/npmtest/node-npmtest-alloy/node_modules/alloy/Alloy/template/Ti.Android.MenuItem.js":"var <%= style %> = <%= styleCode %>;\nif(<%= actionView %>) {\n\t<%= style %>.actionView = <%= actionView %>;\n}\n<%= item %> = <%= parent %>.add(_.pick(<%= style %>,Alloy.Android.menuItemCreateArgs));\n<%= item %>.applyProperties(_.omit(<%= style %>,Alloy.Android.menuItemCreateArgs));\n$.<%= argsId %> = <%= item %>;\n","/home/travis/build/npmtest/node-npmtest-alloy/node_modules/alloy/Alloy/template/Ti.Android.Menu.js":"function <%= openFunc %>() {\n\t<%= parent %>.removeEventListener('open', <%= openFunc %>);\n\tif (<%= parent %>.activity) {\n\t\t<%= parent %>.activity.onCreateOptionsMenu = function(<%= eventObject %>) {\n\t\t\t<%= code %>\n\t\t};\n\t} else {\n\t\tTi.API.warn('You attempted to attach an Android Menu to a lightweight Window');\n\t\tTi.API.warn('or other UI component which does not have an Android activity.');\n\t\tTi.API.warn('Android Menus can only be opened on TabGroups and heavyweight Windows.');\n\t}\n}\n<%= parent %>.addEventListener('open', <%= openFunc %>);","/home/travis/build/npmtest/node-npmtest-alloy/node_modules/alloy/Alloy/template/wpath.js":"function WPATH(s) {\n\tvar index = s.lastIndexOf('/');\n\tvar path = index === -1 ?\n\t\t'<%= WIDGETID %>/' + s :\n\t\ts.substring(0, index) + '/<%= WIDGETID %>/' + s.substring(index + 1);\n\n\t// TODO: http://jira.appcelerator.org/browse/ALOY-296\n\treturn OS_ANDROID && path.indexOf('/') !== 0 ? '/' + path : path;\n}","/home/travis/build/npmtest/node-npmtest-alloy/node_modules/alloy/samples/lib/colors.js":"/*\ncolors.js\n\nCopyright (c) 2010\n\nMarak Squires\nAlexis Sellier (cloudhead)\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.\n\n*/\n\nvar isHeadless = false;\n\nif (typeof module !== 'undefined') {\n  isHeadless = true;\n}\n\nif (!isHeadless) {\n  var exports = {};\n  var module = {};\n  var colors = exports;\n  exports.mode = \"browser\";\n} else {\n  exports.mode = \"console\";\n}\n\n//\n// Prototypes the string object to have additional method calls that add terminal colors\n//\nvar addProperty = function (color, func) {\n  exports[color] = function (str) {\n    return func.apply(str);\n  };\n  String.prototype.__defineGetter__(color, func);\n};\n\n\n\nfunction stylize(str, style) {\n\n  var styles;\n\n  if (exports.mode === 'console') {\n    styles = {\n      //styles\n      'bold'      : ['\\x1B[1m',  '\\x1B[22m'],\n      'italic'    : ['\\x1B[3m',  '\\x1B[23m'],\n      'underline' : ['\\x1B[4m',  '\\x1B[24m'],\n      'inverse'   : ['\\x1B[7m',  '\\x1B[27m'],\n      'strikethrough' : ['\\x1B[9m',  '\\x1B[29m'],\n      //grayscale\n      'white'     : ['\\x1B[37m', '\\x1B[39m'],\n      'grey'      : ['\\x1B[90m', '\\x1B[39m'],\n      'black'     : ['\\x1B[30m', '\\x1B[39m'],\n      //colors\n      'blue'      : ['\\x1B[34m', '\\x1B[39m'],\n      'cyan'      : ['\\x1B[36m', '\\x1B[39m'],\n      'green'     : ['\\x1B[32m', '\\x1B[39m'],\n      'magenta'   : ['\\x1B[35m', '\\x1B[39m'],\n      'red'       : ['\\x1B[31m', '\\x1B[39m'],\n      'yellow'    : ['\\x1B[33m', '\\x1B[39m']\n    };\n  } else if (exports.mode === 'browser') {\n    styles = {\n      //styles\n      'bold'      : ['<b>',  '</b>'],\n      'italic'    : ['<i>',  '</i>'],\n      'underline' : ['<u>',  '</u>'],\n      'inverse'   : ['<span style=\"background-color:black;color:white;\">',  '</span>'],\n      'strikethrough' : ['<del>',  '</del>'],\n      //grayscale\n      'white'     : ['<span style=\"color:white;\">',   '</span>'],\n      'grey'      : ['<span style=\"color:gray;\">',    '</span>'],\n      'black'     : ['<span style=\"color:black;\">',   '</span>'],\n      //colors\n      'blue'      : ['<span style=\"color:blue;\">',    '</span>'],\n      'cyan'      : ['<span style=\"color:cyan;\">',    '</span>'],\n      'green'     : ['<span style=\"color:green;\">',   '</span>'],\n      'magenta'   : ['<span style=\"color:magenta;\">', '</span>'],\n      'red'       : ['<span style=\"color:red;\">',     '</span>'],\n      'yellow'    : ['<span style=\"color:yellow;\">',  '</span>']\n    };\n  } else if (exports.mode === 'none') {\n    return str+'';\n  } else {\n    console.log('unsupported mode, try \"browser\", \"console\" or \"none\"');\n  }\n  return styles[style][0] + str + styles[style][1];\n}\n\nfunction applyTheme(theme) {\n\n  //\n  // Remark: This is a list of methods that exist\n  // on String that you should not overwrite.\n  //\n  var stringPrototypeBlacklist = [\n    '__defineGetter__', '__defineSetter__', '__lookupGetter__', '__lookupSetter__', 'charAt', 'constructor',\n    'hasOwnProperty', 'isPrototypeOf', 'propertyIsEnumerable', 'toLocaleString', 'toString', 'valueOf', 'charCodeAt',\n    'indexOf', 'lastIndexof', 'length', 'localeCompare', 'match', 'replace', 'search', 'slice', 'split', 'substring',\n    'toLocaleLowerCase', 'toLocaleUpperCase', 'toLowerCase', 'toUpperCase', 'trim', 'trimLeft', 'trimRight'\n  ];\n\n  Object.keys(theme).forEach(function (prop) {\n    if (stringPrototypeBlacklist.indexOf(prop) !== -1) {\n      console.log('warn: '.red + ('String.prototype' + prop).magenta + ' is probably something you don\\'t want to override. Ignoring style name');\n    }\n    else {\n      if (typeof(theme[prop]) === 'string') {\n        addProperty(prop, function () {\n            return exports[theme[prop]](this);\n        });\n      }\n      else {\n        addProperty(prop, function () {\n          var ret = this;\n          for (var t = 0; t < theme[prop].length; t++) {\n              ret = exports[theme[prop][t]](ret);\n          }\n          return ret;\n        });\n      }\n    }\n  });\n}\n\n\n//\n// Iterate through all default styles and colors\n//\nvar x = ['bold', 'underline', 'strikethrough', 'italic', 'inverse', 'grey', 'black', 'yellow', 'red', 'green', 'blue', 'white', 'cyan', 'magenta'];\nx.forEach(function (style) {\n\n  // __defineGetter__ at the least works in more browsers\n  // http://robertnyman.com/javascript/javascript-getters-setters.html\n  // Object.defineProperty only works in Chrome\n  addProperty(style, function () {\n    return stylize(this, style);\n  });\n});\n\nfunction sequencer(map) {\n  return function () {\n    if (!isHeadless) {\n      return this.replace(/( )/, '$1');\n    }\n    var exploded = this.split(\"\"), i = 0;\n    exploded = exploded.map(map);\n    return exploded.join(\"\");\n  };\n}\n\nvar rainbowMap = (function () {\n  var rainbowColors = ['red', 'yellow', 'green', 'blue', 'magenta']; //RoY G BiV\n  return function (letter, i, exploded) {\n    if (letter === \" \") {\n      return letter;\n    } else {\n      return stylize(letter, rainbowColors[i++ % rainbowColors.length]);\n    }\n  };\n})();\n\nexports.themes = {};\n\nexports.addSequencer = function (name, map) {\n  addProperty(name, sequencer(map));\n};\n\nexports.addSequencer('rainbow', rainbowMap);\nexports.addSequencer('zebra', function (letter, i, exploded) {\n  return i % 2 === 0 ? letter : letter.inverse;\n});\n\nexports.setTheme = function (theme) {\n  if (typeof theme === 'string') {\n    try {\n      exports.themes[theme] = require(theme);\n      applyTheme(exports.themes[theme]);\n      return exports.themes[theme];\n    } catch (err) {\n      console.log(err);\n      return err;\n    }\n  } else {\n    applyTheme(theme);\n  }\n};\n\n\naddProperty('stripColors', function () {\n  return (\"\" + this).replace(/\\x1B\\[\\d+m/g, '');\n});","/home/travis/build/npmtest/node-npmtest-alloy/node_modules/alloy/samples/lib/ConsoleReporter.js":"var colors = require('colors');\n\n//Based on Console Reporter, taken from https://github.com/pivotal/jasmine/blob/master/src/console/ConsoleReporter.js\nmodule.exports = function(opts) {\n\t//inspired by mhevery's jasmine-node reporter\n\t//https://github.com/mhevery/jasmine-node\n\topts = opts || {};\n\n\tvar doneCallback = opts.doneCallback || function(r) {\n\t\tif (r && r.results() && r.results().failedCount > 0 ) {\n\t\t\tprocess.exit(1);\n\t\t}\n\t};\n\tvar print, showColors;\n\tif (typeof Ti !== 'undefined') {\n\t\tprint = Ti.Platform.osname === 'android' ?\n\t\t\tfunction(s) { Ti.API.info(s); } :\n\t\t\tTi.API.info;\n\t\tshowColors = false;\n\t} else {\n\t\tprint = console.log;\n\t\tshowColors = true;\n\t}\n\tprint = opts.print || print;\n\tshowColors = opts.showColors || showColors;\n\n\tvar language = {\n\t\tspec: 'spec',\n\t\tfailure: 'failure'\n\t};\n\n\tvar plainPrint = function(str) { return str; };\n\tvar greenStr = showColors ? function(str) { return str.green; } : plainPrint;\n\tvar redStr = showColors ? function(str) { return str.red; } : plainPrint;\n\tvar yellowStr = showColors ? function(str) { return str.yellow; } : plainPrint;\n\n\tfunction started() {\n\t\tprint('Begin Alloy Test Suite');\n\t}\n\n\tfunction greenDot() {\n\t\tprint(greenStr('\\\\(^o^)/'));\n\t}\n\n\tfunction redF() {\n\t\tprint(redStr('(>_<)*'));\n\t}\n\n\tfunction yellowStar() {\n\t\tprint(yellowStr('(・_・)'));\n\t}\n\n\tfunction plural(str, count) {\n\t\treturn count == 1 ? str : str + 's';\n\t}\n\n\tfunction repeat(thing, times) {\n\t\tvar arr = [];\n\t\tfor (var i = 0; i < times; i++) {\n\t\t\tarr.push(thing);\n\t\t}\n\t\treturn arr;\n\t}\n\n\tfunction indent(str, spaces) {\n\t\tvar lines = (str || '').split('\\n');\n\t\tvar newArr = [];\n\t\tfor (var i = 0; i < lines.length; i++) {\n\t\t\tnewArr.push(repeat(' ', spaces).join('') + lines[i]);\n\t\t}\n\t\treturn newArr.join('\\n');\n\t}\n\n\tfunction specFailureDetails(suiteDescription, specDescription, stackTraces, messages) {\n\t\tprint(' ');\n\t\tprint(suiteDescription + ' ' + specDescription);\n\n\t\tvar i;\n\t\tfor (i = 0; i < messages.length; i++) {\n\t\t\tprint(indent(messages[i], 2));\n\t\t}\n\t\tfor (i = 0; i < stackTraces.length; i++) {\n\t\t\tprint(indent(stackTraces[i], 2));\n\t\t}\n\t}\n\n\tfunction finished(elapsed) {\n\t\tprint('Finished in ' + elapsed / 1000 + ' seconds');\n\t}\n\n\tfunction summary(colorF, specs, failed) {\n\t\tprint(colorF(specs + ' ' + plural(language.spec, specs) + ', ' +\n\t\tfailed + ' ' + plural(language.failure, failed)));\n\t}\n\n\tfunction greenSummary(specs, failed) {\n\t\tsummary(greenStr, specs, failed);\n\t}\n\n\tfunction redSummary(specs, failed) {\n\t\tsummary(redStr, specs, failed);\n\t}\n\n\tfunction fullSuiteDescription(suite) {\n\t\tvar fullDescription = suite.description;\n\t\tif (suite.parentSuite) fullDescription = fullSuiteDescription(suite.parentSuite) + ' ' + fullDescription;\n\t\treturn fullDescription;\n\t}\n\n\tthis.now = function() {\n\t\treturn new Date().getTime();\n\t};\n\n\tthis.reportRunnerStarting = function() {\n\t\tthis.runnerStartTime = this.now();\n\t\tstarted();\n\t};\n\n\tthis.reportSpecStarting = function() { /* do nothing */\n\t};\n\n\tthis.reportSpecResults = function(spec) {\n\t\tvar results = spec.results();\n\t\tvar desc = '';\n\n\t\tfunction getDescription(suite) {\n\t\t\tif (!suite) { return; }\n\t\t\tdesc = suite.description + ' ' + desc;\n\t\t\tgetDescription(suite.parentSuite);\n\t\t}\n\t\tgetDescription(spec.suite);\n\t\tvar testName = desc + '--> ' + results.description;\n\n\t\tif (results.skipped) {\n\t\t\tyellowStar();\n\t\t} else if (results.passed()) {\n\t\t\tprint(greenStr('[PASS] ') + testName);\n\t\t} else {\n\t\t\tprint(redStr('[FAIL] ') + testName);\n\t\t}\n\t};\n\n\tthis.suiteResults = [];\n\n\tthis.reportSuiteResults = function(suite) {\n\t\tvar suiteResult = {\n\t\t\tdescription: fullSuiteDescription(suite),\n\t\t\tfailedSpecResults: []\n\t\t};\n\n\t\tsuite.results().items_.forEach(function(spec) {\n\t\t\tif (spec.failedCount > 0 && spec.description) suiteResult.failedSpecResults.push(spec);\n\t\t});\n\n\t\tthis.suiteResults.push(suiteResult);\n\t};\n\n\tfunction eachSpecFailure(suiteResults, callback) {\n\t\tfor (var i = 0; i < suiteResults.length; i++) {\n\t\t\tvar suiteResult = suiteResults[i];\n\t\t\tfor (var j = 0; j < suiteResult.failedSpecResults.length; j++) {\n\t\t\t\tvar failedSpecResult = suiteResult.failedSpecResults[j];\n\t\t\t\tvar stackTraces = [];\n\t\t\t\tvar messages = [];\n\t\t\t\tfor (var k = 0; k < failedSpecResult.items_.length; k++) {\n\t\t\t\t\tstackTraces.push(failedSpecResult.items_[k].trace.stack);\n\t\t\t\t\tmessages.push(failedSpecResult.items_[k].message);\n\t\t\t\t}\n\t\t\t\tcallback(suiteResult.description, failedSpecResult.description, stackTraces, messages);\n\t\t\t}\n\t\t}\n\t}\n\n\tthis.reportRunnerResults = function(runner) {\n\t\teachSpecFailure(this.suiteResults, function(suiteDescription, specDescription, stackTraces, messages) {\n\t\t\tspecFailureDetails(suiteDescription, specDescription, stackTraces, messages);\n\t\t});\n\n\t\tfinished(this.now() - this.runnerStartTime);\n\n\t\tvar results = runner.results();\n\t\tvar summaryFunction = results.failedCount === 0 ? greenSummary : redSummary;\n\t\tsummaryFunction(runner.specs().length, results.failedCount);\n\t\tdoneCallback(runner);\n\t};\n};","/home/travis/build/npmtest/node-npmtest-alloy/node_modules/alloy/samples/lib/jasmine.js":"var isCommonJS = typeof window == \"undefined\" || typeof Titanium !== 'undefined';\n\n/**\n * Top level namespace for Jasmine, a lightweight JavaScript BDD/spec/testing framework.\n *\n * @namespace\n */\nvar jasmine = {};\nif (isCommonJS) exports.jasmine = jasmine;\n/**\n * @private\n */\njasmine.unimplementedMethod_ = function() {\n  throw new Error(\"unimplemented method\");\n};\n\n/**\n * Use <code>jasmine.undefined</code> instead of <code>undefined</code>, since <code>undefined</code> is just\n * a plain old variable and may be redefined by somebody else.\n *\n * @private\n */\njasmine.undefined = jasmine.___undefined___;\n\n/**\n * Show diagnostic messages in the console if set to true\n *\n */\njasmine.VERBOSE = false;\n\n/**\n * Default interval in milliseconds for event loop yields (e.g. to allow network activity or to refresh the screen with the HTML-based runner). Small values here may result in slow test running. Zero means no updates until all tests have completed.\n *\n */\njasmine.DEFAULT_UPDATE_INTERVAL = 250;\n\n/**\n * Default timeout interval in milliseconds for waitsFor() blocks.\n */\njasmine.DEFAULT_TIMEOUT_INTERVAL = 5000;\n\njasmine.getGlobal = function() {\n  function getGlobal() {\n    return this;\n  }\n\n  return getGlobal();\n};\n\n/**\n * Allows for bound functions to be compared.  Internal use only.\n *\n * @ignore\n * @private\n * @param base {Object} bound 'this' for the function\n * @param name {Function} function to find\n */\njasmine.bindOriginal_ = function(base, name) {\n  var original = base[name];\n  if (original.apply) {\n    return function() {\n      return original.apply(base, arguments);\n    };\n  } else {\n    // IE support\n    return jasmine.getGlobal()[name];\n  }\n};\n\njasmine.setTimeout = jasmine.bindOriginal_(jasmine.getGlobal(), 'setTimeout');\njasmine.clearTimeout = jasmine.bindOriginal_(jasmine.getGlobal(), 'clearTimeout');\njasmine.setInterval = jasmine.bindOriginal_(jasmine.getGlobal(), 'setInterval');\njasmine.clearInterval = jasmine.bindOriginal_(jasmine.getGlobal(), 'clearInterval');\n\njasmine.MessageResult = function(values) {\n  this.type = 'log';\n  this.values = values;\n  this.trace = new Error(); // todo: test better\n};\n\njasmine.MessageResult.prototype.toString = function() {\n  var text = \"\";\n  for (var i = 0; i < this.values.length; i++) {\n    if (i > 0) text += \" \";\n    if (jasmine.isString_(this.values[i])) {\n      text += this.values[i];\n    } else {\n      text += jasmine.pp(this.values[i]);\n    }\n  }\n  return text;\n};\n\njasmine.ExpectationResult = function(params) {\n  this.type = 'expect';\n  this.matcherName = params.matcherName;\n  this.passed_ = params.passed;\n  this.expected = params.expected;\n  this.actual = params.actual;\n  this.message = this.passed_ ? 'Passed.' : params.message;\n\n  var trace = (params.trace || new Error(this.message));\n  this.trace = this.passed_ ? '' : trace;\n};\n\njasmine.ExpectationResult.prototype.toString = function () {\n  return this.message;\n};\n\njasmine.ExpectationResult.prototype.passed = function () {\n  return this.passed_;\n};\n\n/**\n * Getter for the Jasmine environment. Ensures one gets created\n */\njasmine.getEnv = function() {\n  var env = jasmine.currentEnv_ = jasmine.currentEnv_ || new jasmine.Env();\n  return env;\n};\n\n/**\n * @ignore\n * @private\n * @param value\n * @returns {Boolean}\n */\njasmine.isArray_ = function(value) {\n  return jasmine.isA_(\"Array\", value);\n};\n\n/**\n * @ignore\n * @private\n * @param value\n * @returns {Boolean}\n */\njasmine.isString_ = function(value) {\n  return jasmine.isA_(\"String\", value);\n};\n\n/**\n * @ignore\n * @private\n * @param value\n * @returns {Boolean}\n */\njasmine.isNumber_ = function(value) {\n  return jasmine.isA_(\"Number\", value);\n};\n\n/**\n * @ignore\n * @private\n * @param {String} typeName\n * @param value\n * @returns {Boolean}\n */\njasmine.isA_ = function(typeName, value) {\n  return Object.prototype.toString.apply(value) === '[object ' + typeName + ']';\n};\n\n/**\n * Pretty printer for expecations.  Takes any object and turns it into a human-readable string.\n *\n * @param value {Object} an object to be outputted\n * @returns {String}\n */\njasmine.pp = function(value) {\n  var stringPrettyPrinter = new jasmine.StringPrettyPrinter();\n  stringPrettyPrinter.format(value);\n  return stringPrettyPrinter.string;\n};\n\n/**\n * Returns true if the object is a DOM Node.\n *\n * @param {Object} obj object to check\n * @returns {Boolean}\n */\njasmine.isDomNode = function(obj) {\n  return obj.nodeType > 0;\n};\n\n/**\n * Returns a matchable 'generic' object of the class type.  For use in expecations of type when values don't matter.\n *\n * @example\n * // don't care about which function is passed in, as long as it's a function\n * expect(mySpy).toHaveBeenCalledWith(jasmine.any(Function));\n *\n * @param {Class} clazz\n * @returns matchable object of the type clazz\n */\njasmine.any = function(clazz) {\n  return new jasmine.Matchers.Any(clazz);\n};\n\n/**\n * Returns a matchable subset of a JSON object. For use in expectations when you don't care about all of the\n * attributes on the object.\n *\n * @example\n * // don't care about any other attributes than foo.\n * expect(mySpy).toHaveBeenCalledWith(jasmine.objectContaining({foo: \"bar\"});\n *\n * @param sample {Object} sample\n * @returns matchable object for the sample\n */\njasmine.objectContaining = function (sample) {\n    return new jasmine.Matchers.ObjectContaining(sample);\n};\n\n/**\n * Jasmine Spies are test doubles that can act as stubs, spies, fakes or when used in an expecation, mocks.\n *\n * Spies should be created in test setup, before expectations.  They can then be checked, using the standard Jasmine\n * expectation syntax. Spies can be checked if they were called or not and what the calling params were.\n *\n * A Spy has the following fields: wasCalled, callCount, mostRecentCall, and argsForCall (see docs).\n *\n * Spies are torn down at the end of every spec.\n *\n * Note: Do <b>not</b> call new jasmine.Spy() directly - a spy must be created using spyOn, jasmine.createSpy or jasmine.createSpyObj.\n *\n * @example\n * // a stub\n * var myStub = jasmine.createSpy('myStub');  // can be used anywhere\n *\n * // spy example\n * var foo = {\n *   not: function(bool) { return !bool; }\n * }\n *\n * // actual foo.not will not be called, execution stops\n * spyOn(foo, 'not');\n\n // foo.not spied upon, execution will continue to implementation\n * spyOn(foo, 'not').andCallThrough();\n *\n * // fake example\n * var foo = {\n *   not: function(bool) { return !bool; }\n * }\n *\n * // foo.not(val) will return val\n * spyOn(foo, 'not').andCallFake(function(value) {return value;});\n *\n * // mock example\n * foo.not(7 == 7);\n * expect(foo.not).toHaveBeenCalled();\n * expect(foo.not).toHaveBeenCalledWith(true);\n *\n * @constructor\n * @see spyOn, jasmine.createSpy, jasmine.createSpyObj\n * @param {String} name\n */\njasmine.Spy = function(name) {\n  /**\n   * The name of the spy, if provided.\n   */\n  this.identity = name || 'unknown';\n  /**\n   *  Is this Object a spy?\n   */\n  this.isSpy = true;\n  /**\n   * The actual function this spy stubs.\n   */\n  this.plan = function() {\n  };\n  /**\n   * Tracking of the most recent call to the spy.\n   * @example\n   * var mySpy = jasmine.createSpy('foo');\n   * mySpy(1, 2);\n   * mySpy.mostRecentCall.args = [1, 2];\n   */\n  this.mostRecentCall = {};\n\n  /**\n   * Holds arguments for each call to the spy, indexed by call count\n   * @example\n   * var mySpy = jasmine.createSpy('foo');\n   * mySpy(1, 2);\n   * mySpy(7, 8);\n   * mySpy.mostRecentCall.args = [7, 8];\n   * mySpy.argsForCall[0] = [1, 2];\n   * mySpy.argsForCall[1] = [7, 8];\n   */\n  this.argsForCall = [];\n  this.calls = [];\n};\n\n/**\n * Tells a spy to call through to the actual implemenatation.\n *\n * @example\n * var foo = {\n *   bar: function() { // do some stuff }\n * }\n *\n * // defining a spy on an existing property: foo.bar\n * spyOn(foo, 'bar').andCallThrough();\n */\njasmine.Spy.prototype.andCallThrough = function() {\n  this.plan = this.originalValue;\n  return this;\n};\n\n/**\n * For setting the return value of a spy.\n *\n * @example\n * // defining a spy from scratch: foo() returns 'baz'\n * var foo = jasmine.createSpy('spy on foo').andReturn('baz');\n *\n * // defining a spy on an existing property: foo.bar() returns 'baz'\n * spyOn(foo, 'bar').andReturn('baz');\n *\n * @param {Object} value\n */\njasmine.Spy.prototype.andReturn = function(value) {\n  this.plan = function() {\n    return value;\n  };\n  return this;\n};\n\n/**\n * For throwing an exception when a spy is called.\n *\n * @example\n * // defining a spy from scratch: foo() throws an exception w/ message 'ouch'\n * var foo = jasmine.createSpy('spy on foo').andThrow('baz');\n *\n * // defining a spy on an existing property: foo.bar() throws an exception w/ message 'ouch'\n * spyOn(foo, 'bar').andThrow('baz');\n *\n * @param {String} exceptionMsg\n */\njasmine.Spy.prototype.andThrow = function(exceptionMsg) {\n  this.plan = function() {\n    throw exceptionMsg;\n  };\n  return this;\n};\n\n/**\n * Calls an alternate implementation when a spy is called.\n *\n * @example\n * var baz = function() {\n *   // do some stuff, return something\n * }\n * // defining a spy from scratch: foo() calls the function baz\n * var foo = jasmine.createSpy('spy on foo').andCall(baz);\n *\n * // defining a spy on an existing property: foo.bar() calls an anonymnous function\n * spyOn(foo, 'bar').andCall(function() { return 'baz';} );\n *\n * @param {Function} fakeFunc\n */\njasmine.Spy.prototype.andCallFake = function(fakeFunc) {\n  this.plan = fakeFunc;\n  return this;\n};\n\n/**\n * Resets all of a spy's the tracking variables so that it can be used again.\n *\n * @example\n * spyOn(foo, 'bar');\n *\n * foo.bar();\n *\n * expect(foo.bar.callCount).toEqual(1);\n *\n * foo.bar.reset();\n *\n * expect(foo.bar.callCount).toEqual(0);\n */\njasmine.Spy.prototype.reset = function() {\n  this.wasCalled = false;\n  this.callCount = 0;\n  this.argsForCall = [];\n  this.calls = [];\n  this.mostRecentCall = {};\n};\n\njasmine.createSpy = function(name) {\n\n  var spyObj = function() {\n    spyObj.wasCalled = true;\n    spyObj.callCount++;\n    var args = jasmine.util.argsToArray(arguments);\n    spyObj.mostRecentCall.object = this;\n    spyObj.mostRecentCall.args = args;\n    spyObj.argsForCall.push(args);\n    spyObj.calls.push({object: this, args: args});\n    return spyObj.plan.apply(this, arguments);\n  };\n\n  var spy = new jasmine.Spy(name);\n\n  for (var prop in spy) {\n    spyObj[prop] = spy[prop];\n  }\n\n  spyObj.reset();\n\n  return spyObj;\n};\n\n/**\n * Determines whether an object is a spy.\n *\n * @param {jasmine.Spy|Object} putativeSpy\n * @returns {Boolean}\n */\njasmine.isSpy = function(putativeSpy) {\n  return putativeSpy && putativeSpy.isSpy;\n};\n\n/**\n * Creates a more complicated spy: an Object that has every property a function that is a spy.  Used for stubbing something\n * large in one call.\n *\n * @param {String} baseName name of spy class\n * @param {Array} methodNames array of names of methods to make spies\n */\njasmine.createSpyObj = function(baseName, methodNames) {\n  if (!jasmine.isArray_(methodNames) || methodNames.length === 0) {\n    throw new Error('createSpyObj requires a non-empty array of method names to create spies for');\n  }\n  var obj = {};\n  for (var i = 0; i < methodNames.length; i++) {\n    obj[methodNames[i]] = jasmine.createSpy(baseName + '.' + methodNames[i]);\n  }\n  return obj;\n};\n\n/**\n * All parameters are pretty-printed and concatenated together, then written to the current spec's output.\n *\n * Be careful not to leave calls to <code>jasmine.log</code> in production code.\n */\njasmine.log = function() {\n  var spec = jasmine.getEnv().currentSpec;\n  spec.log.apply(spec, arguments);\n};\n\n/**\n * Function that installs a spy on an existing object's method name.  Used within a Spec to create a spy.\n *\n * @example\n * // spy example\n * var foo = {\n *   not: function(bool) { return !bool; }\n * }\n * spyOn(foo, 'not'); // actual foo.not will not be called, execution stops\n *\n * @see jasmine.createSpy\n * @param obj\n * @param methodName\n * @returns a Jasmine spy that can be chained with all spy methods\n */\nvar spyOn = function(obj, methodName) {\n  return jasmine.getEnv().currentSpec.spyOn(obj, methodName);\n};\nif (isCommonJS) exports.spyOn = spyOn;\n\n/**\n * Creates a Jasmine spec that will be added to the current suite.\n *\n * // TODO: pending tests\n *\n * @example\n * it('should be true', function() {\n *   expect(true).toEqual(true);\n * });\n *\n * @param {String} desc description of this specification\n * @param {Function} func defines the preconditions and expectations of the spec\n */\nvar it = function(desc, func) {\n  return jasmine.getEnv().it(desc, func);\n};\nif (isCommonJS) exports.it = it;\n\n/**\n * Creates a <em>disabled</em> Jasmine spec.\n *\n * A convenience method that allows existing specs to be disabled temporarily during development.\n *\n * @param {String} desc description of this specification\n * @param {Function} func defines the preconditions and expectations of the spec\n */\nvar xit = function(desc, func) {\n  return jasmine.getEnv().xit(desc, func);\n};\nif (isCommonJS) exports.xit = xit;\n\n/**\n * Starts a chain for a Jasmine expectation.\n *\n * It is passed an Object that is the actual value and should chain to one of the many\n * jasmine.Matchers functions.\n *\n * @param {Object} actual Actual value to test against and expected value\n */\nvar expect = function(actual) {\n  return jasmine.getEnv().currentSpec.expect(actual);\n};\nif (isCommonJS) exports.expect = expect;\n\n/**\n * Defines part of a jasmine spec.  Used in cominbination with waits or waitsFor in asynchrnous specs.\n *\n * @param {Function} func Function that defines part of a jasmine spec.\n */\nvar runs = function(func) {\n  jasmine.getEnv().currentSpec.runs(func);\n};\nif (isCommonJS) exports.runs = runs;\n\n/**\n * Waits a fixed time period before moving to the next block.\n *\n * @deprecated Use waitsFor() instead\n * @param {Number} timeout milliseconds to wait\n */\nvar waits = function(timeout) {\n  jasmine.getEnv().currentSpec.waits(timeout);\n};\nif (isCommonJS) exports.waits = waits;\n\n/**\n * Waits for the latchFunction to return true before proceeding to the next block.\n *\n * @param {Function} latchFunction\n * @param {String} optional_timeoutMessage\n * @param {Number} optional_timeout\n */\nvar waitsFor = function(latchFunction, optional_timeoutMessage, optional_timeout) {\n  jasmine.getEnv().currentSpec.waitsFor.apply(jasmine.getEnv().currentSpec, arguments);\n};\nif (isCommonJS) exports.waitsFor = waitsFor;\n\n/**\n * A function that is called before each spec in a suite.\n *\n * Used for spec setup, including validating assumptions.\n *\n * @param {Function} beforeEachFunction\n */\nvar beforeEach = function(beforeEachFunction) {\n  jasmine.getEnv().beforeEach(beforeEachFunction);\n};\nif (isCommonJS) exports.beforeEach = beforeEach;\n\n/**\n * A function that is called after each spec in a suite.\n *\n * Used for restoring any state that is hijacked during spec execution.\n *\n * @param {Function} afterEachFunction\n */\nvar afterEach = function(afterEachFunction) {\n  jasmine.getEnv().afterEach(afterEachFunction);\n};\nif (isCommonJS) exports.afterEach = afterEach;\n\n/**\n * Defines a suite of specifications.\n *\n * Stores the description and all defined specs in the Jasmine environment as one suite of specs. Variables declared\n * are accessible by calls to beforeEach, it, and afterEach. Describe blocks can be nested, allowing for specialization\n * of setup in some tests.\n *\n * @example\n * // TODO: a simple suite\n *\n * // TODO: a simple suite with a nested describe block\n *\n * @param {String} description A string, usually the class under test.\n * @param {Function} specDefinitions function that defines several specs.\n */\nvar describe = function(description, specDefinitions) {\n  return jasmine.getEnv().describe(description, specDefinitions);\n};\nif (isCommonJS) exports.describe = describe;\n\n/**\n * Disables a suite of specifications.  Used to disable some suites in a file, or files, temporarily during development.\n *\n * @param {String} description A string, usually the class under test.\n * @param {Function} specDefinitions function that defines several specs.\n */\nvar xdescribe = function(description, specDefinitions) {\n  return jasmine.getEnv().xdescribe(description, specDefinitions);\n};\nif (isCommonJS) exports.xdescribe = xdescribe;\n\n\n// Provide the XMLHttpRequest class for IE 5.x-6.x:\njasmine.XmlHttpRequest = (typeof XMLHttpRequest == \"undefined\") ? function() {\n  function tryIt(f) {\n    try {\n      return f();\n    } catch(e) {\n    }\n    return null;\n  }\n\n  var xhr = tryIt(function() {\n    return new ActiveXObject(\"Msxml2.XMLHTTP.6.0\");\n  }) ||\n    tryIt(function() {\n      return new ActiveXObject(\"Msxml2.XMLHTTP.3.0\");\n    }) ||\n    tryIt(function() {\n      return new ActiveXObject(\"Msxml2.XMLHTTP\");\n    }) ||\n    tryIt(function() {\n      return new ActiveXObject(\"Microsoft.XMLHTTP\");\n    });\n\n  if (!xhr) throw new Error(\"This browser does not support XMLHttpRequest.\");\n\n  return xhr;\n} : XMLHttpRequest;\n/**\n * @namespace\n */\njasmine.util = {};\n\n/**\n * Declare that a child class inherit it's prototype from the parent class.\n *\n * @private\n * @param {Function} childClass\n * @param {Function} parentClass\n */\njasmine.util.inherit = function(childClass, parentClass) {\n  /**\n   * @private\n   */\n  var subclass = function() {\n  };\n  subclass.prototype = parentClass.prototype;\n  childClass.prototype = new subclass();\n};\n\njasmine.util.formatException = function(e) {\n  var lineNumber;\n  if (e.line) {\n    lineNumber = e.line;\n  }\n  else if (e.lineNumber) {\n    lineNumber = e.lineNumber;\n  }\n\n  var file;\n\n  if (e.sourceURL) {\n    file = e.sourceURL;\n  }\n  else if (e.fileName) {\n    file = e.fileName;\n  }\n\n  var message = (e.name && e.message) ? (e.name + ': ' + e.message) : e.toString();\n\n  if (file && lineNumber) {\n    message += ' in ' + file + ' (line ' + lineNumber + ')';\n  }\n\n  return message;\n};\n\njasmine.util.htmlEscape = function(str) {\n  if (!str) return str;\n  return str.replace(/&/g, '&amp;')\n    .replace(/</g, '&lt;')\n    .replace(/>/g, '&gt;');\n};\n\njasmine.util.argsToArray = function(args) {\n  var arrayOfArgs = [];\n  for (var i = 0; i < args.length; i++) arrayOfArgs.push(args[i]);\n  return arrayOfArgs;\n};\n\njasmine.util.extend = function(destination, source) {\n  for (var property in source) destination[property] = source[property];\n  return destination;\n};\n\n/**\n * Environment for Jasmine\n *\n * @constructor\n */\njasmine.Env = function() {\n  this.currentSpec = null;\n  this.currentSuite = null;\n  this.currentRunner_ = new jasmine.Runner(this);\n\n  this.reporter = new jasmine.MultiReporter();\n\n  this.updateInterval = jasmine.DEFAULT_UPDATE_INTERVAL;\n  this.defaultTimeoutInterval = jasmine.DEFAULT_TIMEOUT_INTERVAL;\n  this.lastUpdate = 0;\n  this.specFilter = function() {\n    return true;\n  };\n\n  this.nextSpecId_ = 0;\n  this.nextSuiteId_ = 0;\n  this.equalityTesters_ = [];\n\n  // wrap matchers\n  this.matchersClass = function() {\n    jasmine.Matchers.apply(this, arguments);\n  };\n  jasmine.util.inherit(this.matchersClass, jasmine.Matchers);\n\n  jasmine.Matchers.wrapInto_(jasmine.Matchers.prototype, this.matchersClass);\n};\n\n\njasmine.Env.prototype.setTimeout = jasmine.setTimeout;\njasmine.Env.prototype.clearTimeout = jasmine.clearTimeout;\njasmine.Env.prototype.setInterval = jasmine.setInterval;\njasmine.Env.prototype.clearInterval = jasmine.clearInterval;\n\n/**\n * @returns an object containing jasmine version build info, if set.\n */\njasmine.Env.prototype.version = function () {\n  if (jasmine.version_) {\n    return jasmine.version_;\n  } else {\n    throw new Error('Version not set');\n  }\n};\n\n/**\n * @returns string containing jasmine version build info, if set.\n */\njasmine.Env.prototype.versionString = function() {\n  if (!jasmine.version_) {\n    return \"version unknown\";\n  }\n\n  var version = this.version();\n  var versionString = version.major + \".\" + version.minor + \".\" + version.build;\n  if (version.release_candidate) {\n    versionString += \".rc\" + version.release_candidate;\n  }\n  versionString += \" revision \" + version.revision;\n  return versionString;\n};\n\n/**\n * @returns a sequential integer starting at 0\n */\njasmine.Env.prototype.nextSpecId = function () {\n  return this.nextSpecId_++;\n};\n\n/**\n * @returns a sequential integer starting at 0\n */\njasmine.Env.prototype.nextSuiteId = function () {\n  return this.nextSuiteId_++;\n};\n\n/**\n * Register a reporter to receive status updates from Jasmine.\n * @param {jasmine.Reporter} reporter An object which will receive status updates.\n */\njasmine.Env.prototype.addReporter = function(reporter) {\n  this.reporter.addReporter(reporter);\n};\n\njasmine.Env.prototype.execute = function() {\n  this.currentRunner_.execute();\n};\n\njasmine.Env.prototype.describe = function(description, specDefinitions) {\n  var suite = new jasmine.Suite(this, description, specDefinitions, this.currentSuite);\n\n  var parentSuite = this.currentSuite;\n  if (parentSuite) {\n    parentSuite.add(suite);\n  } else {\n    this.currentRunner_.add(suite);\n  }\n\n  this.currentSuite = suite;\n\n  var declarationError = null;\n  try {\n    specDefinitions.call(suite);\n  } catch(e) {\n    declarationError = e;\n  }\n\n  if (declarationError) {\n    this.it(\"encountered a declaration exception\", function() {\n      throw declarationError;\n    });\n  }\n\n  this.currentSuite = parentSuite;\n\n  return suite;\n};\n\njasmine.Env.prototype.beforeEach = function(beforeEachFunction) {\n  if (this.currentSuite) {\n    this.currentSuite.beforeEach(beforeEachFunction);\n  } else {\n    this.currentRunner_.beforeEach(beforeEachFunction);\n  }\n};\n\njasmine.Env.prototype.currentRunner = function () {\n  return this.currentRunner_;\n};\n\njasmine.Env.prototype.afterEach = function(afterEachFunction) {\n  if (this.currentSuite) {\n    this.currentSuite.afterEach(afterEachFunction);\n  } else {\n    this.currentRunner_.afterEach(afterEachFunction);\n  }\n\n};\n\njasmine.Env.prototype.xdescribe = function(desc, specDefinitions) {\n  return {\n    execute: function() {\n    }\n  };\n};\n\njasmine.Env.prototype.it = function(description, func) {\n  var spec = new jasmine.Spec(this, this.currentSuite, description);\n  this.currentSuite.add(spec);\n  this.currentSpec = spec;\n\n  if (func) {\n    spec.runs(func);\n  }\n\n  return spec;\n};\n\njasmine.Env.prototype.xit = function(desc, func) {\n  return {\n    id: this.nextSpecId(),\n    runs: function() {\n    }\n  };\n};\n\njasmine.Env.prototype.compareObjects_ = function(a, b, mismatchKeys, mismatchValues) {\n  if (a.__Jasmine_been_here_before__ === b && b.__Jasmine_been_here_before__ === a) {\n    return true;\n  }\n\n  a.__Jasmine_been_here_before__ = b;\n  b.__Jasmine_been_here_before__ = a;\n\n  var hasKey = function(obj, keyName) {\n    return obj !== null && obj[keyName] !== jasmine.undefined;\n  };\n\n  for (var property in b) {\n    if (!hasKey(a, property) && hasKey(b, property)) {\n      mismatchKeys.push(\"expected has key '\" + property + \"', but missing from actual.\");\n    }\n  }\n  for (property in a) {\n    if (!hasKey(b, property) && hasKey(a, property)) {\n      mismatchKeys.push(\"expected missing key '\" + property + \"', but present in actual.\");\n    }\n  }\n  for (property in b) {\n    if (property == '__Jasmine_been_here_before__') continue;\n    if (!this.equals_(a[property], b[property], mismatchKeys, mismatchValues)) {\n      mismatchValues.push(\"'\" + property + \"' was '\" + (b[property] ? jasmine.util.htmlEscape(b[property].toString()) : b[property]) + \"' in expected, but was '\" + (a[property] ? jasmine.util.htmlEscape(a[property].toString()) : a[property]) + \"' in actual.\");\n    }\n  }\n\n  if (jasmine.isArray_(a) && jasmine.isArray_(b) && a.length != b.length) {\n    mismatchValues.push(\"arrays were not the same length\");\n  }\n\n  delete a.__Jasmine_been_here_before__;\n  delete b.__Jasmine_been_here_before__;\n  return (mismatchKeys.length === 0 && mismatchValues.length === 0);\n};\n\njasmine.Env.prototype.equals_ = function(a, b, mismatchKeys, mismatchValues) {\n  mismatchKeys = mismatchKeys || [];\n  mismatchValues = mismatchValues || [];\n\n  for (var i = 0; i < this.equalityTesters_.length; i++) {\n    var equalityTester = this.equalityTesters_[i];\n    var result = equalityTester(a, b, this, mismatchKeys, mismatchValues);\n    if (result !== jasmine.undefined) return result;\n  }\n\n  if (a === b) return true;\n\n  if (a === jasmine.undefined || a === null || b === jasmine.undefined || b === null) {\n    return (a == jasmine.undefined && b == jasmine.undefined);\n  }\n\n  if (jasmine.isDomNode(a) && jasmine.isDomNode(b)) {\n    return a === b;\n  }\n\n  if (a instanceof Date && b instanceof Date) {\n    return a.getTime() == b.getTime();\n  }\n\n  if (a.jasmineMatches) {\n    return a.jasmineMatches(b);\n  }\n\n  if (b.jasmineMatches) {\n    return b.jasmineMatches(a);\n  }\n\n  if (a instanceof jasmine.Matchers.ObjectContaining) {\n    return a.matches(b);\n  }\n\n  if (b instanceof jasmine.Matchers.ObjectContaining) {\n    return b.matches(a);\n  }\n\n  if (jasmine.isString_(a) && jasmine.isString_(b)) {\n    return (a == b);\n  }\n\n  if (jasmine.isNumber_(a) && jasmine.isNumber_(b)) {\n    return (a == b);\n  }\n\n  if (typeof a === \"object\" && typeof b === \"object\") {\n    return this.compareObjects_(a, b, mismatchKeys, mismatchValues);\n  }\n\n  //Straight check\n  return (a === b);\n};\n\njasmine.Env.prototype.contains_ = function(haystack, needle) {\n  if (jasmine.isArray_(haystack)) {\n    for (var i = 0; i < haystack.length; i++) {\n      if (this.equals_(haystack[i], needle)) return true;\n    }\n    return false;\n  }\n  return haystack.indexOf(needle) >= 0;\n};\n\njasmine.Env.prototype.addEqualityTester = function(equalityTester) {\n  this.equalityTesters_.push(equalityTester);\n};\n/** No-op base class for Jasmine reporters.\n *\n * @constructor\n */\njasmine.Reporter = function() {\n};\n\n//noinspection JSUnusedLocalSymbols\njasmine.Reporter.prototype.reportRunnerStarting = function(runner) {\n};\n\n//noinspection JSUnusedLocalSymbols\njasmine.Reporter.prototype.reportRunnerResults = function(runner) {\n};\n\n//noinspection JSUnusedLocalSymbols\njasmine.Reporter.prototype.reportSuiteResults = function(suite) {\n};\n\n//noinspection JSUnusedLocalSymbols\njasmine.Reporter.prototype.reportSpecStarting = function(spec) {\n};\n\n//noinspection JSUnusedLocalSymbols\njasmine.Reporter.prototype.reportSpecResults = function(spec) {\n};\n\n//noinspection JSUnusedLocalSymbols\njasmine.Reporter.prototype.log = function(str) {\n};\n\n/**\n * Blocks are functions with executable code that make up a spec.\n *\n * @constructor\n * @param {jasmine.Env} env\n * @param {Function} func\n * @param {jasmine.Spec} spec\n */\njasmine.Block = function(env, func, spec) {\n  this.env = env;\n  this.func = func;\n  this.spec = spec;\n};\n\njasmine.Block.prototype.execute = function(onComplete) {\n  try {\n    this.func.apply(this.spec);\n  } catch (e) {\n    this.spec.fail(e);\n  }\n  onComplete();\n};\n/** JavaScript API reporter.\n *\n * @constructor\n */\njasmine.JsApiReporter = function() {\n  this.started = false;\n  this.finished = false;\n  this.suites_ = [];\n  this.results_ = {};\n};\n\njasmine.JsApiReporter.prototype.reportRunnerStarting = function(runner) {\n  this.started = true;\n  var suites = runner.topLevelSuites();\n  for (var i = 0; i < suites.length; i++) {\n    var suite = suites[i];\n    this.suites_.push(this.summarize_(suite));\n  }\n};\n\njasmine.JsApiReporter.prototype.suites = function() {\n  return this.suites_;\n};\n\njasmine.JsApiReporter.prototype.summarize_ = function(suiteOrSpec) {\n  var isSuite = suiteOrSpec instanceof jasmine.Suite;\n  var summary = {\n    id: suiteOrSpec.id,\n    name: suiteOrSpec.description,\n    type: isSuite ? 'suite' : 'spec',\n    children: []\n  };\n\n  if (isSuite) {\n    var children = suiteOrSpec.children();\n    for (var i = 0; i < children.length; i++) {\n      summary.children.push(this.summarize_(children[i]));\n    }\n  }\n  return summary;\n};\n\njasmine.JsApiReporter.prototype.results = function() {\n  return this.results_;\n};\n\njasmine.JsApiReporter.prototype.resultsForSpec = function(specId) {\n  return this.results_[specId];\n};\n\n//noinspection JSUnusedLocalSymbols\njasmine.JsApiReporter.prototype.reportRunnerResults = function(runner) {\n  this.finished = true;\n};\n\n//noinspection JSUnusedLocalSymbols\njasmine.JsApiReporter.prototype.reportSuiteResults = function(suite) {\n};\n\n//noinspection JSUnusedLocalSymbols\njasmine.JsApiReporter.prototype.reportSpecResults = function(spec) {\n  this.results_[spec.id] = {\n    messages: spec.results().getItems(),\n    result: spec.results().failedCount > 0 ? \"failed\" : \"passed\"\n  };\n};\n\n//noinspection JSUnusedLocalSymbols\njasmine.JsApiReporter.prototype.log = function(str) {\n};\n\njasmine.JsApiReporter.prototype.resultsForSpecs = function(specIds){\n  var results = {};\n  for (var i = 0; i < specIds.length; i++) {\n    var specId = specIds[i];\n    results[specId] = this.summarizeResult_(this.results_[specId]);\n  }\n  return results;\n};\n\njasmine.JsApiReporter.prototype.summarizeResult_ = function(result){\n  var summaryMessages = [];\n  var messagesLength = result.messages.length;\n  for (var messageIndex = 0; messageIndex < messagesLength; messageIndex++) {\n    var resultMessage = result.messages[messageIndex];\n    summaryMessages.push({\n      text: resultMessage.type == 'log' ? resultMessage.toString() : jasmine.undefined,\n      passed: resultMessage.passed ? resultMessage.passed() : true,\n      type: resultMessage.type,\n      message: resultMessage.message,\n      trace: {\n        stack: resultMessage.passed && !resultMessage.passed() ? resultMessage.trace.stack : jasmine.undefined\n      }\n    });\n  }\n\n  return {\n    result : result.result,\n    messages : summaryMessages\n  };\n};\n\n/**\n * @constructor\n * @param {jasmine.Env} env\n * @param actual\n * @param {jasmine.Spec} spec\n */\njasmine.Matchers = function(env, actual, spec, opt_isNot) {\n  this.env = env;\n  this.actual = actual;\n  this.spec = spec;\n  this.isNot = opt_isNot || false;\n  this.reportWasCalled_ = false;\n};\n\n// todo: @deprecated as of Jasmine 0.11, remove soon [xw]\njasmine.Matchers.pp = function(str) {\n  throw new Error(\"jasmine.Matchers.pp() is no longer supported, please use jasmine.pp() instead!\");\n};\n\n// todo: @deprecated Deprecated as of Jasmine 0.10. Rewrite your custom matchers to return true or false. [xw]\njasmine.Matchers.prototype.report = function(result, failing_message, details) {\n  throw new Error(\"As of jasmine 0.11, custom matchers must be implemented differently -- please see jasmine docs\");\n};\n\njasmine.Matchers.wrapInto_ = function(prototype, matchersClass) {\n  for (var methodName in prototype) {\n    if (methodName == 'report') continue;\n    var orig = prototype[methodName];\n    matchersClass.prototype[methodName] = jasmine.Matchers.matcherFn_(methodName, orig);\n  }\n};\n\njasmine.Matchers.matcherFn_ = function(matcherName, matcherFunction) {\n  return function() {\n    var matcherArgs = jasmine.util.argsToArray(arguments);\n    var result = matcherFunction.apply(this, arguments);\n\n    if (this.isNot) {\n      result = !result;\n    }\n\n    if (this.reportWasCalled_) return result;\n\n    var message;\n    if (!result) {\n      if (this.message) {\n        message = this.message.apply(this, arguments);\n        if (jasmine.isArray_(message)) {\n          message = message[this.isNot ? 1 : 0];\n        }\n      } else {\n        var englishyPredicate = matcherName.replace(/[A-Z]/g, function(s) { return ' ' + s.toLowerCase(); });\n        message = \"Expected \" + jasmine.pp(this.actual) + (this.isNot ? \" not \" : \" \") + englishyPredicate;\n        if (matcherArgs.length > 0) {\n          for (var i = 0; i < matcherArgs.length; i++) {\n            if (i > 0) message += \",\";\n            message += \" \" + jasmine.pp(matcherArgs[i]);\n          }\n        }\n        message += \".\";\n      }\n    }\n    var expectationResult = new jasmine.ExpectationResult({\n      matcherName: matcherName,\n      passed: result,\n      expected: matcherArgs.length > 1 ? matcherArgs : matcherArgs[0],\n      actual: this.actual,\n      message: message\n    });\n    this.spec.addMatcherResult(expectationResult);\n    return jasmine.undefined;\n  };\n};\n\n\n\n\n/**\n * toBe: compares the actual to the expected using ===\n * @param expected\n */\njasmine.Matchers.prototype.toBe = function(expected) {\n  return this.actual === expected;\n};\n\n/**\n * toNotBe: compares the actual to the expected using !==\n * @param expected\n * @deprecated as of 1.0. Use not.toBe() instead.\n */\njasmine.Matchers.prototype.toNotBe = function(expected) {\n  return this.actual !== expected;\n};\n\n/**\n * toEqual: compares the actual to the expected using common sense equality. Handles Objects, Arrays, etc.\n *\n * @param expected\n */\njasmine.Matchers.prototype.toEqual = function(expected) {\n  return this.env.equals_(this.actual, expected);\n};\n\n/**\n * toNotEqual: compares the actual to the expected using the ! of jasmine.Matchers.toEqual\n * @param expected\n * @deprecated as of 1.0. Use not.toEqual() instead.\n */\njasmine.Matchers.prototype.toNotEqual = function(expected) {\n  return !this.env.equals_(this.actual, expected);\n};\n\n/**\n * Matcher that compares the actual to the expected using a regular expression.  Constructs a RegExp, so takes\n * a pattern or a String.\n *\n * @param expected\n */\njasmine.Matchers.prototype.toMatch = function(expected) {\n  return new RegExp(expected).test(this.actual);\n};\n\n/**\n * Matcher that compares the actual to the expected using the boolean inverse of jasmine.Matchers.toMatch\n * @param expected\n * @deprecated as of 1.0. Use not.toMatch() instead.\n */\njasmine.Matchers.prototype.toNotMatch = function(expected) {\n  return !(new RegExp(expected).test(this.actual));\n};\n\n/**\n * Matcher that compares the actual to jasmine.undefined.\n */\njasmine.Matchers.prototype.toBeDefined = function() {\n  return (this.actual !== jasmine.undefined);\n};\n\n/**\n * Matcher that compares the actual to jasmine.undefined.\n */\njasmine.Matchers.prototype.toBeUndefined = function() {\n  return (this.actual === jasmine.undefined);\n};\n\n/**\n * Matcher that compares the actual to null.\n */\njasmine.Matchers.prototype.toBeNull = function() {\n  return (this.actual === null);\n};\n\n/**\n * Matcher that boolean not-nots the actual.\n */\njasmine.Matchers.prototype.toBeTruthy = function() {\n  return !!this.actual;\n};\n\n\n/**\n * Matcher that boolean nots the actual.\n */\njasmine.Matchers.prototype.toBeFalsy = function() {\n  return !this.actual;\n};\n\n\n/**\n * Matcher that checks to see if the actual, a Jasmine spy, was called.\n */\njasmine.Matchers.prototype.toHaveBeenCalled = function() {\n  if (arguments.length > 0) {\n    throw new Error('toHaveBeenCalled does not take arguments, use toHaveBeenCalledWith');\n  }\n\n  if (!jasmine.isSpy(this.actual)) {\n    throw new Error('Expected a spy, but got ' + jasmine.pp(this.actual) + '.');\n  }\n\n  this.message = function() {\n    return [\n      \"Expected spy \" + this.actual.identity + \" to have been called.\",\n      \"Expected spy \" + this.actual.identity + \" not to have been called.\"\n    ];\n  };\n\n  return this.actual.wasCalled;\n};\n\n/** @deprecated Use expect(xxx).toHaveBeenCalled() instead */\njasmine.Matchers.prototype.wasCalled = jasmine.Matchers.prototype.toHaveBeenCalled;\n\n/**\n * Matcher that checks to see if the actual, a Jasmine spy, was not called.\n *\n * @deprecated Use expect(xxx).not.toHaveBeenCalled() instead\n */\njasmine.Matchers.prototype.wasNotCalled = function() {\n  if (arguments.length > 0) {\n    throw new Error('wasNotCalled does not take arguments');\n  }\n\n  if (!jasmine.isSpy(this.actual)) {\n    throw new Error('Expected a spy, but got ' + jasmine.pp(this.actual) + '.');\n  }\n\n  this.message = function() {\n    return [\n      \"Expected spy \" + this.actual.identity + \" to not have been called.\",\n      \"Expected spy \" + this.actual.identity + \" to have been called.\"\n    ];\n  };\n\n  return !this.actual.wasCalled;\n};\n\n/**\n * Matcher that checks to see if the actual, a Jasmine spy, was called with a set of parameters.\n *\n * @example\n *\n */\njasmine.Matchers.prototype.toHaveBeenCalledWith = function() {\n  var expectedArgs = jasmine.util.argsToArray(arguments);\n  if (!jasmine.isSpy(this.actual)) {\n    throw new Error('Expected a spy, but got ' + jasmine.pp(this.actual) + '.');\n  }\n  this.message = function() {\n    if (this.actual.callCount === 0) {\n      // todo: what should the failure message for .not.toHaveBeenCalledWith() be? is this right? test better. [xw]\n      return [\n        \"Expected spy \" + this.actual.identity + \" to have been called with \" + jasmine.pp(expectedArgs) + \" but it was never called.\",\n        \"Expected spy \" + this.actual.identity + \" not to have been called with \" + jasmine.pp(expectedArgs) + \" but it was.\"\n      ];\n    } else {\n      return [\n        \"Expected spy \" + this.actual.identity + \" to have been called with \" + jasmine.pp(expectedArgs) + \" but was called with \" + jasmine.pp(this.actual.argsForCall),\n        \"Expected spy \" + this.actual.identity + \" not to have been called with \" + jasmine.pp(expectedArgs) + \" but was called with \" + jasmine.pp(this.actual.argsForCall)\n      ];\n    }\n  };\n\n  return this.env.contains_(this.actual.argsForCall, expectedArgs);\n};\n\n/** @deprecated Use expect(xxx).toHaveBeenCalledWith() instead */\njasmine.Matchers.prototype.wasCalledWith = jasmine.Matchers.prototype.toHaveBeenCalledWith;\n\n/** @deprecated Use expect(xxx).not.toHaveBeenCalledWith() instead */\njasmine.Matchers.prototype.wasNotCalledWith = function() {\n  var expectedArgs = jasmine.util.argsToArray(arguments);\n  if (!jasmine.isSpy(this.actual)) {\n    throw new Error('Expected a spy, but got ' + jasmine.pp(this.actual) + '.');\n  }\n\n  this.message = function() {\n    return [\n      \"Expected spy not to have been called with \" + jasmine.pp(expectedArgs) + \" but it was\",\n      \"Expected spy to have been called with \" + jasmine.pp(expectedArgs) + \" but it was\"\n    ];\n  };\n\n  return !this.env.contains_(this.actual.argsForCall, expectedArgs);\n};\n\n/**\n * Matcher that checks that the expected item is an element in the actual Array.\n *\n * @param {Object} expected\n */\njasmine.Matchers.prototype.toContain = function(expected) {\n  return this.env.contains_(this.actual, expected);\n};\n\n/**\n * Matcher that checks that the expected item is NOT an element in the actual Array.\n *\n * @param {Object} expected\n * @deprecated as of 1.0. Use not.toContain() instead.\n */\njasmine.Matchers.prototype.toNotContain = function(expected) {\n  return !this.env.contains_(this.actual, expected);\n};\n\njasmine.Matchers.prototype.toBeLessThan = function(expected) {\n  return this.actual < expected;\n};\n\njasmine.Matchers.prototype.toBeGreaterThan = function(expected) {\n  return this.actual > expected;\n};\n\n/**\n * Matcher that checks that the expected item is equal to the actual item\n * up to a given level of decimal precision (default 2).\n *\n * @param {Number} expected\n * @param {Number} precision\n */\njasmine.Matchers.prototype.toBeCloseTo = function(expected, precision) {\n  if (!(precision === 0)) {\n    precision = precision || 2;\n  }\n  var multiplier = Math.pow(10, precision);\n  var actual = Math.round(this.actual * multiplier);\n  expected = Math.round(expected * multiplier);\n  return expected == actual;\n};\n\n/**\n * Matcher that checks that the expected exception was thrown by the actual.\n *\n * @param {String} expected\n */\njasmine.Matchers.prototype.toThrow = function(expected) {\n  var result = false;\n  var exception;\n  if (typeof this.actual != 'function') {\n    throw new Error('Actual is not a function');\n  }\n  try {\n    this.actual();\n  } catch (e) {\n    exception = e;\n  }\n  if (exception) {\n    result = (expected === jasmine.undefined || this.env.equals_(exception.message || exception, expected.message || expected));\n  }\n\n  var not = this.isNot ? \"not \" : \"\";\n\n  this.message = function() {\n    if (exception && (expected === jasmine.undefined || !this.env.equals_(exception.message || exception, expected.message || expected))) {\n      return [\"Expected function \" + not + \"to throw\", expected ? expected.message || expected : \"an exception\", \", but it threw\", exception.message || exception].join(' ');\n    } else {\n      return \"Expected function to throw an exception.\";\n    }\n  };\n\n  return result;\n};\n\njasmine.Matchers.Any = function(expectedClass) {\n  this.expectedClass = expectedClass;\n};\n\njasmine.Matchers.Any.prototype.jasmineMatches = function(other) {\n  if (this.expectedClass == String) {\n    return typeof other == 'string' || other instanceof String;\n  }\n\n  if (this.expectedClass == Number) {\n    return typeof other == 'number' || other instanceof Number;\n  }\n\n  if (this.expectedClass == Function) {\n    return typeof other == 'function' || other instanceof Function;\n  }\n\n  if (this.expectedClass == Object) {\n    return typeof other == 'object';\n  }\n\n  return other instanceof this.expectedClass;\n};\n\njasmine.Matchers.Any.prototype.jasmineToString = function() {\n  return '<jasmine.any(' + this.expectedClass + ')>';\n};\n\njasmine.Matchers.ObjectContaining = function (sample) {\n  this.sample = sample;\n};\n\njasmine.Matchers.ObjectContaining.prototype.jasmineMatches = function(other, mismatchKeys, mismatchValues) {\n  mismatchKeys = mismatchKeys || [];\n  mismatchValues = mismatchValues || [];\n\n  var env = jasmine.getEnv();\n\n  var hasKey = function(obj, keyName) {\n    return obj != null && obj[keyName] !== jasmine.undefined;\n  };\n\n  for (var property in this.sample) {\n    if (!hasKey(other, property) && hasKey(this.sample, property)) {\n      mismatchKeys.push(\"expected has key '\" + property + \"', but missing from actual.\");\n    }\n    else if (!env.equals_(this.sample[property], other[property], mismatchKeys, mismatchValues)) {\n      mismatchValues.push(\"'\" + property + \"' was '\" + (other[property] ? jasmine.util.htmlEscape(other[property].toString()) : other[property]) + \"' in expected, but was '\" + (this.sample[property] ? jasmine.util.htmlEscape(this.sample[property].toString()) : this.sample[property]) + \"' in actual.\");\n    }\n  }\n\n  return (mismatchKeys.length === 0 && mismatchValues.length === 0);\n};\n\njasmine.Matchers.ObjectContaining.prototype.jasmineToString = function () {\n  return \"<jasmine.objectContaining(\" + jasmine.pp(this.sample) + \")>\";\n};\n// Mock setTimeout, clearTimeout\n// Contributed by Pivotal Computer Systems, www.pivotalsf.com\n\njasmine.FakeTimer = function() {\n  this.reset();\n\n  var self = this;\n  self.setTimeout = function(funcToCall, millis) {\n    self.timeoutsMade++;\n    self.scheduleFunction(self.timeoutsMade, funcToCall, millis, false);\n    return self.timeoutsMade;\n  };\n\n  self.setInterval = function(funcToCall, millis) {\n    self.timeoutsMade++;\n    self.scheduleFunction(self.timeoutsMade, funcToCall, millis, true);\n    return self.timeoutsMade;\n  };\n\n  self.clearTimeout = function(timeoutKey) {\n    self.scheduledFunctions[timeoutKey] = jasmine.undefined;\n  };\n\n  self.clearInterval = function(timeoutKey) {\n    self.scheduledFunctions[timeoutKey] = jasmine.undefined;\n  };\n\n};\n\njasmine.FakeTimer.prototype.reset = function() {\n  this.timeoutsMade = 0;\n  this.scheduledFunctions = {};\n  this.nowMillis = 0;\n};\n\njasmine.FakeTimer.prototype.tick = function(millis) {\n  var oldMillis = this.nowMillis;\n  var newMillis = oldMillis + millis;\n  this.runFunctionsWithinRange(oldMillis, newMillis);\n  this.nowMillis = newMillis;\n};\n\njasmine.FakeTimer.prototype.runFunctionsWithinRange = function(oldMillis, nowMillis) {\n  var scheduledFunc;\n  var funcsToRun = [];\n  for (var timeoutKey in this.scheduledFunctions) {\n    scheduledFunc = this.scheduledFunctions[timeoutKey];\n    if (scheduledFunc != jasmine.undefined &&\n        scheduledFunc.runAtMillis >= oldMillis &&\n        scheduledFunc.runAtMillis <= nowMillis) {\n      funcsToRun.push(scheduledFunc);\n      this.scheduledFunctions[timeoutKey] = jasmine.undefined;\n    }\n  }\n\n  if (funcsToRun.length > 0) {\n    funcsToRun.sort(function(a, b) {\n      return a.runAtMillis - b.runAtMillis;\n    });\n    for (var i = 0; i < funcsToRun.length; ++i) {\n      try {\n        var funcToRun = funcsToRun[i];\n        this.nowMillis = funcToRun.runAtMillis;\n        funcToRun.funcToCall();\n        if (funcToRun.recurring) {\n          this.scheduleFunction(funcToRun.timeoutKey,\n              funcToRun.funcToCall,\n              funcToRun.millis,\n              true);\n        }\n      } catch(e) {\n      }\n    }\n    this.runFunctionsWithinRange(oldMillis, nowMillis);\n  }\n};\n\njasmine.FakeTimer.prototype.scheduleFunction = function(timeoutKey, funcToCall, millis, recurring) {\n  this.scheduledFunctions[timeoutKey] = {\n    runAtMillis: this.nowMillis + millis,\n    funcToCall: funcToCall,\n    recurring: recurring,\n    timeoutKey: timeoutKey,\n    millis: millis\n  };\n};\n\n/**\n * @namespace\n */\njasmine.Clock = {\n  defaultFakeTimer: new jasmine.FakeTimer(),\n\n  reset: function() {\n    jasmine.Clock.assertInstalled();\n    jasmine.Clock.defaultFakeTimer.reset();\n  },\n\n  tick: function(millis) {\n    jasmine.Clock.assertInstalled();\n    jasmine.Clock.defaultFakeTimer.tick(millis);\n  },\n\n  runFunctionsWithinRange: function(oldMillis, nowMillis) {\n    jasmine.Clock.defaultFakeTimer.runFunctionsWithinRange(oldMillis, nowMillis);\n  },\n\n  scheduleFunction: function(timeoutKey, funcToCall, millis, recurring) {\n    jasmine.Clock.defaultFakeTimer.scheduleFunction(timeoutKey, funcToCall, millis, recurring);\n  },\n\n  useMock: function() {\n    if (!jasmine.Clock.isInstalled()) {\n      var spec = jasmine.getEnv().currentSpec;\n      spec.after(jasmine.Clock.uninstallMock);\n\n      jasmine.Clock.installMock();\n    }\n  },\n\n  installMock: function() {\n    jasmine.Clock.installed = jasmine.Clock.defaultFakeTimer;\n  },\n\n  uninstallMock: function() {\n    jasmine.Clock.assertInstalled();\n    jasmine.Clock.installed = jasmine.Clock.real;\n  },\n\n  real: {\n    setTimeout: jasmine.getGlobal().setTimeout,\n    clearTimeout: jasmine.getGlobal().clearTimeout,\n    setInterval: jasmine.getGlobal().setInterval,\n    clearInterval: jasmine.getGlobal().clearInterval\n  },\n\n  assertInstalled: function() {\n    if (!jasmine.Clock.isInstalled()) {\n      throw new Error(\"Mock clock is not installed, use jasmine.Clock.useMock()\");\n    }\n  },\n\n  isInstalled: function() {\n    return jasmine.Clock.installed == jasmine.Clock.defaultFakeTimer;\n  },\n\n  installed: null\n};\njasmine.Clock.installed = jasmine.Clock.real;\n\n//else for IE support\njasmine.getGlobal().setTimeout = function(funcToCall, millis) {\n  if (jasmine.Clock.installed.setTimeout.apply) {\n    return jasmine.Clock.installed.setTimeout.apply(this, arguments);\n  } else {\n    return jasmine.Clock.installed.setTimeout(funcToCall, millis);\n  }\n};\n\njasmine.getGlobal().setInterval = function(funcToCall, millis) {\n  if (jasmine.Clock.installed.setInterval.apply) {\n    return jasmine.Clock.installed.setInterval.apply(this, arguments);\n  } else {\n    return jasmine.Clock.installed.setInterval(funcToCall, millis);\n  }\n};\n\njasmine.getGlobal().clearTimeout = function(timeoutKey) {\n  if (jasmine.Clock.installed.clearTimeout.apply) {\n    return jasmine.Clock.installed.clearTimeout.apply(this, arguments);\n  } else {\n    return jasmine.Clock.installed.clearTimeout(timeoutKey);\n  }\n};\n\njasmine.getGlobal().clearInterval = function(timeoutKey) {\n  if (jasmine.Clock.installed.clearTimeout.apply) {\n    return jasmine.Clock.installed.clearInterval.apply(this, arguments);\n  } else {\n    return jasmine.Clock.installed.clearInterval(timeoutKey);\n  }\n};\n\n/**\n * @constructor\n */\njasmine.MultiReporter = function() {\n  this.subReporters_ = [];\n};\njasmine.util.inherit(jasmine.MultiReporter, jasmine.Reporter);\n\njasmine.MultiReporter.prototype.addReporter = function(reporter) {\n  this.subReporters_.push(reporter);\n};\n\n(function() {\n  var functionNames = [\n    \"reportRunnerStarting\",\n    \"reportRunnerResults\",\n    \"reportSuiteResults\",\n    \"reportSpecStarting\",\n    \"reportSpecResults\",\n    \"log\"\n  ];\n  for (var i = 0; i < functionNames.length; i++) {\n    var functionName = functionNames[i];\n    jasmine.MultiReporter.prototype[functionName] = (function(functionName) {\n      return function() {\n        for (var j = 0; j < this.subReporters_.length; j++) {\n          var subReporter = this.subReporters_[j];\n          if (subReporter[functionName]) {\n            subReporter[functionName].apply(subReporter, arguments);\n          }\n        }\n      };\n    })(functionName);\n  }\n})();\n/**\n * Holds results for a set of Jasmine spec. Allows for the results array to hold another jasmine.NestedResults\n *\n * @constructor\n */\njasmine.NestedResults = function() {\n  /**\n   * The total count of results\n   */\n  this.totalCount = 0;\n  /**\n   * Number of passed results\n   */\n  this.passedCount = 0;\n  /**\n   * Number of failed results\n   */\n  this.failedCount = 0;\n  /**\n   * Was this suite/spec skipped?\n   */\n  this.skipped = false;\n  /**\n   * @ignore\n   */\n  this.items_ = [];\n};\n\n/**\n * Roll up the result counts.\n *\n * @param result\n */\njasmine.NestedResults.prototype.rollupCounts = function(result) {\n  this.totalCount += result.totalCount;\n  this.passedCount += result.passedCount;\n  this.failedCount += result.failedCount;\n};\n\n/**\n * Adds a log message.\n * @param values Array of message parts which will be concatenated later.\n */\njasmine.NestedResults.prototype.log = function(values) {\n  this.items_.push(new jasmine.MessageResult(values));\n};\n\n/**\n * Getter for the results: message & results.\n */\njasmine.NestedResults.prototype.getItems = function() {\n  return this.items_;\n};\n\n/**\n * Adds a result, tracking counts (total, passed, & failed)\n * @param {jasmine.ExpectationResult|jasmine.NestedResults} result\n */\njasmine.NestedResults.prototype.addResult = function(result) {\n  if (result.type != 'log') {\n    if (result.items_) {\n      this.rollupCounts(result);\n    } else {\n      this.totalCount++;\n      if (result.passed()) {\n        this.passedCount++;\n      } else {\n        this.failedCount++;\n      }\n    }\n  }\n  this.items_.push(result);\n};\n\n/**\n * @returns {Boolean} True if <b>everything</b> below passed\n */\njasmine.NestedResults.prototype.passed = function() {\n  return this.passedCount === this.totalCount;\n};\n/**\n * Base class for pretty printing for expectation results.\n */\njasmine.PrettyPrinter = function() {\n  this.ppNestLevel_ = 0;\n};\n\n/**\n * Formats a value in a nice, human-readable string.\n *\n * @param value\n */\njasmine.PrettyPrinter.prototype.format = function(value) {\n  if (this.ppNestLevel_ > 40) {\n    throw new Error('jasmine.PrettyPrinter: format() nested too deeply!');\n  }\n\n  this.ppNestLevel_++;\n  try {\n    if (value === jasmine.undefined) {\n      this.emitScalar('undefined');\n    } else if (value === null) {\n      this.emitScalar('null');\n    } else if (value === jasmine.getGlobal()) {\n      this.emitScalar('<global>');\n    } else if (value.jasmineToString) {\n      this.emitScalar(value.jasmineToString());\n    } else if (typeof value === 'string') {\n      this.emitString(value);\n    } else if (jasmine.isSpy(value)) {\n      this.emitScalar(\"spy on \" + value.identity);\n    } else if (value instanceof RegExp) {\n      this.emitScalar(value.toString());\n    } else if (typeof value === 'function') {\n      this.emitScalar('Function');\n    } else if (typeof value.nodeType === 'number') {\n      this.emitScalar('HTMLNode');\n    } else if (value instanceof Date) {\n      this.emitScalar('Date(' + value + ')');\n    } else if (value.__Jasmine_been_here_before__) {\n      this.emitScalar('<circular reference: ' + (jasmine.isArray_(value) ? 'Array' : 'Object') + '>');\n    } else if (jasmine.isArray_(value) || typeof value == 'object') {\n      value.__Jasmine_been_here_before__ = true;\n      if (jasmine.isArray_(value)) {\n        this.emitArray(value);\n      } else {\n        this.emitObject(value);\n      }\n      delete value.__Jasmine_been_here_before__;\n    } else {\n      this.emitScalar(value.toString());\n    }\n  } finally {\n    this.ppNestLevel_--;\n  }\n};\n\njasmine.PrettyPrinter.prototype.iterateObject = function(obj, fn) {\n  for (var property in obj) {\n    if (property == '__Jasmine_been_here_before__') continue;\n    fn(property, obj.__lookupGetter__ ? (obj.__lookupGetter__(property) !== jasmine.undefined &&\n                                         obj.__lookupGetter__(property) !== null) : false);\n  }\n};\n\njasmine.PrettyPrinter.prototype.emitArray = jasmine.unimplementedMethod_;\njasmine.PrettyPrinter.prototype.emitObject = jasmine.unimplementedMethod_;\njasmine.PrettyPrinter.prototype.emitScalar = jasmine.unimplementedMethod_;\njasmine.PrettyPrinter.prototype.emitString = jasmine.unimplementedMethod_;\n\njasmine.StringPrettyPrinter = function() {\n  jasmine.PrettyPrinter.call(this);\n\n  this.string = '';\n};\njasmine.util.inherit(jasmine.StringPrettyPrinter, jasmine.PrettyPrinter);\n\njasmine.StringPrettyPrinter.prototype.emitScalar = function(value) {\n  this.append(value);\n};\n\njasmine.StringPrettyPrinter.prototype.emitString = function(value) {\n  this.append(\"'\" + value + \"'\");\n};\n\njasmine.StringPrettyPrinter.prototype.emitArray = function(array) {\n  this.append('[ ');\n  for (var i = 0; i < array.length; i++) {\n    if (i > 0) {\n      this.append(', ');\n    }\n    this.format(array[i]);\n  }\n  this.append(' ]');\n};\n\njasmine.StringPrettyPrinter.prototype.emitObject = function(obj) {\n  var self = this;\n  this.append('{ ');\n  var first = true;\n\n  this.iterateObject(obj, function(property, isGetter) {\n    if (first) {\n      first = false;\n    } else {\n      self.append(', ');\n    }\n\n    self.append(property);\n    self.append(' : ');\n    if (isGetter) {\n      self.append('<getter>');\n    } else {\n      self.format(obj[property]);\n    }\n  });\n\n  this.append(' }');\n};\n\njasmine.StringPrettyPrinter.prototype.append = function(value) {\n  this.string += value;\n};\njasmine.Queue = function(env) {\n  this.env = env;\n  this.blocks = [];\n  this.running = false;\n  this.index = 0;\n  this.offset = 0;\n  this.abort = false;\n};\n\njasmine.Queue.prototype.addBefore = function(block) {\n  this.blocks.unshift(block);\n};\n\njasmine.Queue.prototype.add = function(block) {\n  this.blocks.push(block);\n};\n\njasmine.Queue.prototype.insertNext = function(block) {\n  this.blocks.splice((this.index + this.offset + 1), 0, block);\n  this.offset++;\n};\n\njasmine.Queue.prototype.start = function(onComplete) {\n  this.running = true;\n  this.onComplete = onComplete;\n  this.next_();\n};\n\njasmine.Queue.prototype.isRunning = function() {\n  return this.running;\n};\n\njasmine.Queue.LOOP_DONT_RECURSE = true;\n\njasmine.Queue.prototype.next_ = function() {\n  var self = this;\n  var goAgain = true;\n\n  while (goAgain) {\n    goAgain = false;\n\n    if (self.index < self.blocks.length && !this.abort) {\n      var calledSynchronously = true;\n      var completedSynchronously = false;\n\n      var onComplete = function () {\n        if (jasmine.Queue.LOOP_DONT_RECURSE && calledSynchronously) {\n          completedSynchronously = true;\n          return;\n        }\n\n        if (self.blocks[self.index].abort) {\n          self.abort = true;\n        }\n\n        self.offset = 0;\n        self.index++;\n\n        var now = new Date().getTime();\n        if (self.env.updateInterval && now - self.env.lastUpdate > self.env.updateInterval) {\n          self.env.lastUpdate = now;\n          self.env.setTimeout(function() {\n            self.next_();\n          }, 0);\n        } else {\n          if (jasmine.Queue.LOOP_DONT_RECURSE && completedSynchronously) {\n            goAgain = true;\n          } else {\n            self.next_();\n          }\n        }\n      };\n      self.blocks[self.index].execute(onComplete);\n\n      calledSynchronously = false;\n      if (completedSynchronously) {\n        onComplete();\n      }\n\n    } else {\n      self.running = false;\n      if (self.onComplete) {\n        self.onComplete();\n      }\n    }\n  }\n};\n\njasmine.Queue.prototype.results = function() {\n  var results = new jasmine.NestedResults();\n  for (var i = 0; i < this.blocks.length; i++) {\n    if (this.blocks[i].results) {\n      results.addResult(this.blocks[i].results());\n    }\n  }\n  return results;\n};\n\n\n/**\n * Runner\n *\n * @constructor\n * @param {jasmine.Env} env\n */\njasmine.Runner = function(env) {\n  var self = this;\n  self.env = env;\n  self.queue = new jasmine.Queue(env);\n  self.before_ = [];\n  self.after_ = [];\n  self.suites_ = [];\n};\n\njasmine.Runner.prototype.execute = function() {\n  var self = this;\n  if (self.env.reporter.reportRunnerStarting) {\n    self.env.reporter.reportRunnerStarting(this);\n  }\n  self.queue.start(function () {\n    self.finishCallback();\n  });\n};\n\njasmine.Runner.prototype.beforeEach = function(beforeEachFunction) {\n  beforeEachFunction.typeName = 'beforeEach';\n  this.before_.splice(0,0,beforeEachFunction);\n};\n\njasmine.Runner.prototype.afterEach = function(afterEachFunction) {\n  afterEachFunction.typeName = 'afterEach';\n  this.after_.splice(0,0,afterEachFunction);\n};\n\n\njasmine.Runner.prototype.finishCallback = function() {\n  this.env.reporter.reportRunnerResults(this);\n};\n\njasmine.Runner.prototype.addSuite = function(suite) {\n  this.suites_.push(suite);\n};\n\njasmine.Runner.prototype.add = function(block) {\n  if (block instanceof jasmine.Suite) {\n    this.addSuite(block);\n  }\n  this.queue.add(block);\n};\n\njasmine.Runner.prototype.specs = function () {\n  var suites = this.suites();\n  var specs = [];\n  for (var i = 0; i < suites.length; i++) {\n    specs = specs.concat(suites[i].specs());\n  }\n  return specs;\n};\n\njasmine.Runner.prototype.suites = function() {\n  return this.suites_;\n};\n\njasmine.Runner.prototype.topLevelSuites = function() {\n  var topLevelSuites = [];\n  for (var i = 0; i < this.suites_.length; i++) {\n    if (!this.suites_[i].parentSuite) {\n      topLevelSuites.push(this.suites_[i]);\n    }\n  }\n  return topLevelSuites;\n};\n\njasmine.Runner.prototype.results = function() {\n  return this.queue.results();\n};\n/**\n * Internal representation of a Jasmine specification, or test.\n *\n * @constructor\n * @param {jasmine.Env} env\n * @param {jasmine.Suite} suite\n * @param {String} description\n */\njasmine.Spec = function(env, suite, description) {\n  if (!env) {\n    throw new Error('jasmine.Env() required');\n  }\n  if (!suite) {\n    throw new Error('jasmine.Suite() required');\n  }\n  var spec = this;\n  spec.id = env.nextSpecId ? env.nextSpecId() : null;\n  spec.env = env;\n  spec.suite = suite;\n  spec.description = description;\n  spec.queue = new jasmine.Queue(env);\n\n  spec.afterCallbacks = [];\n  spec.spies_ = [];\n\n  spec.results_ = new jasmine.NestedResults();\n  spec.results_.description = description;\n  spec.matchersClass = null;\n};\n\njasmine.Spec.prototype.getFullName = function() {\n  return this.suite.getFullName() + ' ' + this.description + '.';\n};\n\n\njasmine.Spec.prototype.results = function() {\n  return this.results_;\n};\n\n/**\n * All parameters are pretty-printed and concatenated together, then written to the spec's output.\n *\n * Be careful not to leave calls to <code>jasmine.log</code> in production code.\n */\njasmine.Spec.prototype.log = function() {\n  return this.results_.log(arguments);\n};\n\njasmine.Spec.prototype.runs = function (func) {\n  var block = new jasmine.Block(this.env, func, this);\n  this.addToQueue(block);\n  return this;\n};\n\njasmine.Spec.prototype.addToQueue = function (block) {\n  if (this.queue.isRunning()) {\n    this.queue.insertNext(block);\n  } else {\n    this.queue.add(block);\n  }\n};\n\n/**\n * @param {jasmine.ExpectationResult} result\n */\njasmine.Spec.prototype.addMatcherResult = function(result) {\n  this.results_.addResult(result);\n};\n\njasmine.Spec.prototype.expect = function(actual) {\n  var positive = new (this.getMatchersClass_())(this.env, actual, this);\n  positive.not = new (this.getMatchersClass_())(this.env, actual, this, true);\n  return positive;\n};\n\n/**\n * Waits a fixed time period before moving to the next block.\n *\n * @deprecated Use waitsFor() instead\n * @param {Number} timeout milliseconds to wait\n */\njasmine.Spec.prototype.waits = function(timeout) {\n  var waitsFunc = new jasmine.WaitsBlock(this.env, timeout, this);\n  this.addToQueue(waitsFunc);\n  return this;\n};\n\n/**\n * Waits for the latchFunction to return true before proceeding to the next block.\n *\n * @param {Function} latchFunction\n * @param {String} optional_timeoutMessage\n * @param {Number} optional_timeout\n */\njasmine.Spec.prototype.waitsFor = function(latchFunction, optional_timeoutMessage, optional_timeout) {\n  var latchFunction_ = null;\n  var optional_timeoutMessage_ = null;\n  var optional_timeout_ = null;\n\n  for (var i = 0; i < arguments.length; i++) {\n    var arg = arguments[i];\n    switch (typeof arg) {\n      case 'function':\n        latchFunction_ = arg;\n        break;\n      case 'string':\n        optional_timeoutMessage_ = arg;\n        break;\n      case 'number':\n        optional_timeout_ = arg;\n        break;\n    }\n  }\n\n  var waitsForFunc = new jasmine.WaitsForBlock(this.env, optional_timeout_, latchFunction_, optional_timeoutMessage_, this);\n  this.addToQueue(waitsForFunc);\n  return this;\n};\n\njasmine.Spec.prototype.fail = function (e) {\n  var expectationResult = new jasmine.ExpectationResult({\n    passed: false,\n    message: e ? jasmine.util.formatException(e) : 'Exception',\n    trace: { stack: e.stack }\n  });\n  this.results_.addResult(expectationResult);\n};\n\njasmine.Spec.prototype.getMatchersClass_ = function() {\n  return this.matchersClass || this.env.matchersClass;\n};\n\njasmine.Spec.prototype.addMatchers = function(matchersPrototype) {\n  var parent = this.getMatchersClass_();\n  var newMatchersClass = function() {\n    parent.apply(this, arguments);\n  };\n  jasmine.util.inherit(newMatchersClass, parent);\n  jasmine.Matchers.wrapInto_(matchersPrototype, newMatchersClass);\n  this.matchersClass = newMatchersClass;\n};\n\njasmine.Spec.prototype.finishCallback = function() {\n  this.env.reporter.reportSpecResults(this);\n};\n\njasmine.Spec.prototype.finish = function(onComplete) {\n  this.removeAllSpies();\n  this.finishCallback();\n  if (onComplete) {\n    onComplete();\n  }\n};\n\njasmine.Spec.prototype.after = function(doAfter) {\n  if (this.queue.isRunning()) {\n    this.queue.add(new jasmine.Block(this.env, doAfter, this));\n  } else {\n    this.afterCallbacks.unshift(doAfter);\n  }\n};\n\njasmine.Spec.prototype.execute = function(onComplete) {\n  var spec = this;\n  if (!spec.env.specFilter(spec)) {\n    spec.results_.skipped = true;\n    spec.finish(onComplete);\n    return;\n  }\n\n  this.env.reporter.reportSpecStarting(this);\n\n  spec.env.currentSpec = spec;\n\n  spec.addBeforesAndAftersToQueue();\n\n  spec.queue.start(function () {\n    spec.finish(onComplete);\n  });\n};\n\njasmine.Spec.prototype.addBeforesAndAftersToQueue = function() {\n  var runner = this.env.currentRunner();\n  var i;\n\n  for (var suite = this.suite; suite; suite = suite.parentSuite) {\n    for (i = 0; i < suite.before_.length; i++) {\n      this.queue.addBefore(new jasmine.Block(this.env, suite.before_[i], this));\n    }\n  }\n  for (i = 0; i < runner.before_.length; i++) {\n    this.queue.addBefore(new jasmine.Block(this.env, runner.before_[i], this));\n  }\n  for (i = 0; i < this.afterCallbacks.length; i++) {\n    this.queue.add(new jasmine.Block(this.env, this.afterCallbacks[i], this));\n  }\n  for (suite = this.suite; suite; suite = suite.parentSuite) {\n    for (i = 0; i < suite.after_.length; i++) {\n      this.queue.add(new jasmine.Block(this.env, suite.after_[i], this));\n    }\n  }\n  for (i = 0; i < runner.after_.length; i++) {\n    this.queue.add(new jasmine.Block(this.env, runner.after_[i], this));\n  }\n};\n\njasmine.Spec.prototype.explodes = function() {\n  throw 'explodes function should not have been called';\n};\n\njasmine.Spec.prototype.spyOn = function(obj, methodName, ignoreMethodDoesntExist) {\n  if (obj == jasmine.undefined) {\n    throw \"spyOn could not find an object to spy upon for \" + methodName + \"()\";\n  }\n\n  if (!ignoreMethodDoesntExist && obj[methodName] === jasmine.undefined) {\n    throw methodName + '() method does not exist';\n  }\n\n  if (!ignoreMethodDoesntExist && obj[methodName] && obj[methodName].isSpy) {\n    throw new Error(methodName + ' has already been spied upon');\n  }\n\n  var spyObj = jasmine.createSpy(methodName);\n\n  this.spies_.push(spyObj);\n  spyObj.baseObj = obj;\n  spyObj.methodName = methodName;\n  spyObj.originalValue = obj[methodName];\n\n  obj[methodName] = spyObj;\n\n  return spyObj;\n};\n\njasmine.Spec.prototype.removeAllSpies = function() {\n  for (var i = 0; i < this.spies_.length; i++) {\n    var spy = this.spies_[i];\n    spy.baseObj[spy.methodName] = spy.originalValue;\n  }\n  this.spies_ = [];\n};\n\n/**\n * Internal representation of a Jasmine suite.\n *\n * @constructor\n * @param {jasmine.Env} env\n * @param {String} description\n * @param {Function} specDefinitions\n * @param {jasmine.Suite} parentSuite\n */\njasmine.Suite = function(env, description, specDefinitions, parentSuite) {\n  var self = this;\n  self.id = env.nextSuiteId ? env.nextSuiteId() : null;\n  self.description = description;\n  self.queue = new jasmine.Queue(env);\n  self.parentSuite = parentSuite;\n  self.env = env;\n  self.before_ = [];\n  self.after_ = [];\n  self.children_ = [];\n  self.suites_ = [];\n  self.specs_ = [];\n};\n\njasmine.Suite.prototype.getFullName = function() {\n  var fullName = this.description;\n  for (var parentSuite = this.parentSuite; parentSuite; parentSuite = parentSuite.parentSuite) {\n    fullName = parentSuite.description + ' ' + fullName;\n  }\n  return fullName;\n};\n\njasmine.Suite.prototype.finish = function(onComplete) {\n  this.env.reporter.reportSuiteResults(this);\n  this.finished = true;\n  if (typeof(onComplete) == 'function') {\n    onComplete();\n  }\n};\n\njasmine.Suite.prototype.beforeEach = function(beforeEachFunction) {\n  beforeEachFunction.typeName = 'beforeEach';\n  this.before_.unshift(beforeEachFunction);\n};\n\njasmine.Suite.prototype.afterEach = function(afterEachFunction) {\n  afterEachFunction.typeName = 'afterEach';\n  this.after_.unshift(afterEachFunction);\n};\n\njasmine.Suite.prototype.results = function() {\n  return this.queue.results();\n};\n\njasmine.Suite.prototype.add = function(suiteOrSpec) {\n  this.children_.push(suiteOrSpec);\n  if (suiteOrSpec instanceof jasmine.Suite) {\n    this.suites_.push(suiteOrSpec);\n    this.env.currentRunner().addSuite(suiteOrSpec);\n  } else {\n    this.specs_.push(suiteOrSpec);\n  }\n  this.queue.add(suiteOrSpec);\n};\n\njasmine.Suite.prototype.specs = function() {\n  return this.specs_;\n};\n\njasmine.Suite.prototype.suites = function() {\n  return this.suites_;\n};\n\njasmine.Suite.prototype.children = function() {\n  return this.children_;\n};\n\njasmine.Suite.prototype.execute = function(onComplete) {\n  var self = this;\n  this.queue.start(function () {\n    self.finish(onComplete);\n  });\n};\njasmine.WaitsBlock = function(env, timeout, spec) {\n  this.timeout = timeout;\n  jasmine.Block.call(this, env, null, spec);\n};\n\njasmine.util.inherit(jasmine.WaitsBlock, jasmine.Block);\n\njasmine.WaitsBlock.prototype.execute = function (onComplete) {\n  if (jasmine.VERBOSE) {\n    this.env.reporter.log('>> Jasmine waiting for ' + this.timeout + ' ms...');\n  }\n  this.env.setTimeout(function () {\n    onComplete();\n  }, this.timeout);\n};\n/**\n * A block which waits for some condition to become true, with timeout.\n *\n * @constructor\n * @extends jasmine.Block\n * @param {jasmine.Env} env The Jasmine environment.\n * @param {Number} timeout The maximum time in milliseconds to wait for the condition to become true.\n * @param {Function} latchFunction A function which returns true when the desired condition has been met.\n * @param {String} message The message to display if the desired condition hasn't been met within the given time period.\n * @param {jasmine.Spec} spec The Jasmine spec.\n */\njasmine.WaitsForBlock = function(env, timeout, latchFunction, message, spec) {\n  this.timeout = timeout || env.defaultTimeoutInterval;\n  this.latchFunction = latchFunction;\n  this.message = message;\n  this.totalTimeSpentWaitingForLatch = 0;\n  jasmine.Block.call(this, env, null, spec);\n};\njasmine.util.inherit(jasmine.WaitsForBlock, jasmine.Block);\n\njasmine.WaitsForBlock.TIMEOUT_INCREMENT = 10;\n\njasmine.WaitsForBlock.prototype.execute = function(onComplete) {\n  if (jasmine.VERBOSE) {\n    this.env.reporter.log('>> Jasmine waiting for ' + (this.message || 'something to happen'));\n  }\n  var latchFunctionResult;\n  try {\n    latchFunctionResult = this.latchFunction.apply(this.spec);\n  } catch (e) {\n    this.spec.fail(e);\n    onComplete();\n    return;\n  }\n\n  if (latchFunctionResult) {\n    onComplete();\n  } else if (this.totalTimeSpentWaitingForLatch >= this.timeout) {\n    var message = 'timed out after ' + this.timeout + ' msec waiting for ' + (this.message || 'something to happen');\n    this.spec.fail({\n      name: 'timeout',\n      message: message\n    });\n\n    this.abort = true;\n    onComplete();\n  } else {\n    this.totalTimeSpentWaitingForLatch += jasmine.WaitsForBlock.TIMEOUT_INCREMENT;\n    var self = this;\n    this.env.setTimeout(function() {\n      self.execute(onComplete);\n    }, jasmine.WaitsForBlock.TIMEOUT_INCREMENT);\n  }\n};\n\njasmine.version_= {\n  \"major\": 1,\n  \"minor\": 2,\n  \"build\": 0,\n  \"revision\": 1337005947\n};\n","/home/travis/build/npmtest/node-npmtest-alloy/node_modules/alloy/samples/lib/runtimeTester.js":"var _ = require('alloy/underscore')._,\n\t__j = require('jasmine'),\n\tCR = require('ConsoleReporter'),\n\tdescribe = __j.describe,\n\tit = __j.it,\n\texpect = __j.expect,\n\tjasmine = __j.jasmine,\n\tbeforeEach = __j.beforeEach;\n\n// These are in alphabetical order. It's not an accident. Keep it that way.\nvar apiChecks = {\n\t'Ti.UI.Button': function(o) {\n\t\texpect(o).toHaveFunction('setTitle');\n\t},\n\t'Ti.UI.ImageView': function(o) {\n\t\texpect(o).toHaveFunction('pause');\n\t},\n\t'Ti.UI.iOS.CoverFlowView': function(o) {\n\t\texpect(o).toHaveFunction('getImages');\n\t},\n\t'Ti.UI.iPhone.NavigationGroup': function(o) {\n\t\tapiChecks['Ti.UI.Window'](o.window);\n\t},\n\t'Ti.UI.Label': function(o) {\n\t\texpect(o).toHaveFunction('setText');\n\t},\n\t'Ti.UI.ScrollView': function(o) {\n\t\texpect(o).toHaveFunction('scrollTo');\n\t},\n\t'Ti.UI.Slider': function(o) {\n\t\tif (OS_IOS) {\n\t\t\texpect(o).toHaveFunction('getThumbImage');\n\t\t} else {\n\t\t\texpect(o).toHaveFunction('getMinRange');\n\t\t}\n\t},\n\t'Ti.UI.Tab': function(o) {\n\t\tapiChecks['Ti.UI.Window'](o.window);\n\t},\n\t'Ti.UI.TabGroup': function(o) {\n\t\texpect(o).toHaveFunction('addTab');\n\t},\n\t'Ti.UI.TableView': function(o) {\n\t\texpect(o).toHaveFunction('appendRow');\n\t},\n\t'Ti.UI.TableViewRow': function(o) {\n\t\texpect(o).toHaveFunction('getClassName');\n\t},\n\t'Ti.UI.Window': function(o) {\n\t\texpect(o).toHaveFunction('open');\n\t}\n};\n\nfunction sortAndStringify(obj) {\n\treturn JSON.stringify(obj, function(k, v) {\n\t\tif (_.isObject(v) && !_.isArray(v) && !_.isFunction(v)) {\n\t\t\treturn sortObject(v);\n\t\t}\n\t\treturn v;\n\t});\n}\n\nfunction sortObject(o) {\n\tvar sorted = {},\n\t\tkey, a = [];\n\n\tfor (key in o) {\n\t\tif (o.hasOwnProperty(key)) {\n\t\t\ta.push(key);\n\t\t}\n\t}\n\n\ta.sort();\n\n\tfor (key = 0; key < a.length; key++) {\n\t\tsorted[a[key]] = o[a[key]];\n\t}\n\treturn sorted;\n}\n\nfunction addMatchers() {\n\tbeforeEach(function() {\n\t\tthis.addMatchers({\n\t\t\ttoBeTiProxy: function() {\n\t\t\t\treturn _.isFunction(this.actual.addEventListener);\n\t\t\t},\n\t\t\ttoBeController: function() {\n\t\t\t\treturn this.actual.__iamalloy === true;\n\t\t\t},\n\t\t\ttoBeWidget: function() {\n\t\t\t\treturn this.actual.__iamalloy === true;\n\t\t\t},\n\t\t\ttoContainSameAs: function(array) {\n\t\t\t\tvar actual = this.actual;\n\t\t\t\tthis.message = function() {\n\t\t\t\t\treturn 'expected ' + sortAndStringify(actual) + ' to contain ' +\n\t\t\t\t\t\t'same elements as ' + sortAndStringify(array);\n\t\t\t\t};\n\n\t\t\t\treturn sortAndStringify(actual) === sortAndStringify(array);\n\t\t\t},\n\t\t\ttoHaveStyle: function(style) {\n\t\t\t\tvar component = this.actual;\n\t\t\t\tvar obj = {};\n\t\t\t\t_.each(style, function(v, k) {\n\t\t\t\t\tobj[k] = component[k];\n\t\t\t\t});\n\n\t\t\t\tthis.message = function() {\n\t\t\t\t\treturn 'expected ' + this.actual.toString() + ' to have style:\\n' +\n\t\t\t\t\t\tsortAndStringify(style) + '\\nbut found this instead:\\n' +\n\t\t\t\t\t\tsortAndStringify(obj);\n\t\t\t\t};\n\n\t\t\t\treturn sortAndStringify(obj) === sortAndStringify(style);\n\t\t\t},\n\t\t\ttoHaveFunction: function(func) {\n\t\t\t\treturn _.isFunction(this.actual[func]);\n\t\t\t},\n\t\t\ttoBeFile: function() {\n\t\t\t\tvar file = _.isString(this.actual) ? Ti.Filesystem.getFile(Ti.Filesystem.resourcesDirectory, this.actual) : this.actual;\n\t\t\t\treturn file.exists() && file.isFile();\n\t\t\t}\n\t\t});\n\t});\n}\n\nfunction validateUiComponent($, id, opts) {\n\tif (!id) { throw 'validateUiComponent exception: No id given'; }\n\n\tvar comp = $[id];\n\tit('#' + id + ' is defined', function() {\n\t\texpect(comp).toBeDefined();\n\t\texpect(comp).not.toBeNull();\n\t});\n\n\tit('#' + id + ' is a Titanium proxy object', function() {\n\t\texpect(comp).toBeTiProxy();\n\t});\n\n\tif (opts.api && apiChecks[opts.api]) {\n\t\tit('#' + id + ' component is a ' + opts.api, function() {\n\t\t\tapiChecks[opts.api](comp);\n\t\t});\n\t}\n\n\tif (opts.style) {\n\t\tif ($.__styler && $.__styler[id] && !_.isEmpty($.__styler[id])) {\n\t\t\topts.style = _.extend(opts.style, $.__styler[id]);\n\t\t}\n\t\tit('#' + id + ' component has correct style', function() {\n\t\t\texpect(comp).toHaveStyle(opts.style);\n\t\t});\n\t}\n}\n\nfunction launchTests() {\n\tjasmine.getEnv().addReporter(new CR({\n\t\tdoneCallback: function(runner) {\n\t\t\talert(runner.specs().length + ' specs, ' + runner.results().failedCount + ' failed');\n\t\t}\n\t}));\n\tjasmine.getEnv().execute();\n}","/home/travis/build/npmtest/node-npmtest-alloy/node_modules/alloy/samples/lib/testUtils.js":"var exec = require('child_process').exec,\n\tfs = require('fs'),\n\tos = require('os'),\n\twrench = require('wrench'),\n\tpath = require('path'),\n\t_ = require('../../Alloy/lib/alloy/underscore')._,\n\tuglifyjs = require('uglify-js'),\n\tU = require('../../Alloy/utils'),\n\tstyler = require('../../Alloy/commands/compile/styler');\n\nvar alloyRoot = path.join(__dirname, '..', '..');\nvar IS_WIN = /^win/i.test(os.platform());\n\nexports.TIMEOUT_DEFAULT = IS_WIN ? 5000 : 2000;\nexports.paths = {\n\ttemplates: path.join(alloyRoot, 'Alloy', 'template'),\n\tharnessTemplate: path.join(alloyRoot, 'test', 'projects', 'HarnessTemplate'),\n\tharness: path.join(alloyRoot, 'test', 'projects', 'Harness')\n};\n\n// Recreate the test app harness\n//\n// Params:\n// * callback: the callback function to be executed when the harness\n//\t\t\t is successfully recreated.\nfunction resetTestApp(callback) {\n\tvar paths = exports.paths;\n\twrench.rmdirSyncRecursive(paths.harness, true);\n\twrench.mkdirSyncRecursive(paths.harness, 0777);\n\twrench.copyDirSyncRecursive(paths.harnessTemplate, paths.harness);\n\texec('alloy new \"' + paths.harness + '\"', function(error, stdout, stderr) {\n\t\tif (error) {\n\t\t\tconsole.error('Failed to create new alloy project at ' + paths.harness);\n\t\t\tprocess.exit();\n\t\t}\n\t\tcallback();\n\t});\n}\n\n// Turns the arguments given to the callback of the exec() function\n// into an object literal.\n//\n// Params:\n// * args: The \"arguments\" object from the callback of an exec() call\n//\n// Return: An object literal with the error, stdout, and stderr\nfunction getExecObject(args) {\n\targs = Array.prototype.slice.call(args, 0);\n\treturn {\n\t\terror: args[0],\n\t\tstdout: args[1],\n\t\tstderr: args[2]\n\t};\n}\n\n// Convenience function for handling asynchronous tests that rely on the\n// exec() function. The output values from the first runs() block will\n// be available as this.output in the second runs() block where the\n// actual tests are evaluated.\n//\n// Params:\n// * cmd:  The command to run through exec()\n// * opts: An object that can contain the following parameters:\n//\t * timeout: How long to wait for the command to execute before declaring\n//\t\t\t\tthe test failed\n//\t * test:\tThe actual test function to execute on output returned from exec()\n//\t * reset: If truthy, recreate the default test harness before executing\n//\n// Return: none\nexports.asyncExecTest = function(cmd, opts) {\n\topts = opts || {};\n\n\truns(function() {\n\t\tvar self = this;\n\t\tself.done = false;\n\n\t\tvar asyncFunc = function() {\n\t\t\texec(cmd, function() {\n\t\t\t\tself.done = true;\n\t\t\t\tself.output = getExecObject(arguments);\n\t\t\t});\n\t\t};\n\n\t\tif (opts.reset) {\n\t\t\tresetTestApp(function() {\n\t\t\t\tasyncFunc();\n\t\t\t});\n\t\t} else {\n\t\t\tasyncFunc();\n\t\t}\n\t});\n\twaitsFor(\n\t\tfunction() { return this.done; },\n\t\t'exec(\"' + cmd + '\") timed out', opts.timeout || exports.TIMEOUT_DEFAULT\n\t);\n\truns(opts.test || function() {\n\t\texpect(this.output.error).toBeNull();\n\t});\n};\n\n// Matchers for Jasmine\n\nfunction toBeTssFile(expected) {\n\tvar actual = this.actual;\n\tvar style;\n\n\ttry {\n\t\tvar die = U.die;\n\t\tU.die = function(msg, e) {\n\t\t\tU.die = die;\n\t\t\tthrow U.createErrorOutput(msg, e);\n\t\t};\n\t\tstyle = styler.loadStyle(actual);\n\t\tU.die = die;\n\t} catch (e) {\n\t\tU.die = die || U.die;\n\t\treturn false;\n\t}\n\n\tif (_.isObject(style)) {\n\t\treturn true;\n\t}\n\treturn false;\n}\n\nfunction toBeJavascript(expected) {\n\ttry {\n\t\treturn uglifyjs.parse(this.actual);\n\t} catch (e) {\n\t\treturn false;\n\t}\n}\n\nfunction toBeJavascriptFile(expected) {\n\tvar actual = this.actual;\n\tvar notText = this.isNot ? ' not' : '';\n\tthis.message = function () {\n\t\treturn 'Expected ' + actual + notText + ' to be a Javascript file';\n\t};\n\n\ttry {\n\t\tvar js = fs.readFileSync(this.actual, 'utf8');\n\t\treturn toBeJavascript.call({actual:js}, expected);\n\t} catch (e) {\n\t\treturn false;\n\t}\n}\n\nexports.addMatchers = function() {\n\tbeforeEach(function() {\n\t\tthis.addMatchers({\n\t\t\ttoBeJavascript: toBeJavascript,\n\t\t\ttoBeJavascriptFile: toBeJavascriptFile,\n\t\t\ttoBeTssFile: toBeTssFile,\n\t\t\ttoHaveNoUndefinedStyles: function() {\n\t\t\t\treturn !_.find(this.actual, function(o) {\n\t\t\t\t\treturn o.key === 'undefined' && o.isApi;\n\t\t\t\t});\n\t\t\t},\n\t\t\ttoHaveSameContentAs: function(expected) {\n\t\t\t\treturn U.normalizeReturns(fs.readFileSync(this.actual, 'utf8')) ===\n\t\t\t\t\tU.normalizeReturns(fs.readFileSync(expected, 'utf8'));\n\t\t\t},\n\t\t\ttoExist: function(expected) {\n\t\t\t\treturn path.existsSync(this.actual);\n\t\t\t},\n\t\t\ttoBeArray: function(expected) {\n\t\t\t\treturn _.isArray(this.actual);\n\t\t\t},\n\t\t\ttoBeObject: function(expected) {\n\t\t\t\treturn _.isObject(this.actual);\n\t\t\t}\n\t\t});\n\t});\n};","/home/travis/build/npmtest/node-npmtest-alloy/node_modules/alloy/Alloy/commands/compile/styler.js":"var fs = require('fs'),\n\tpath = require('path'),\n\t_ = require('../../lib/alloy/underscore')._,\n\tU = require('../../utils'),\n\tCU = require('./compilerUtils'),\n\toptimizer = require('./optimizer'),\n\tgrammar = require('../../grammar/tss'),\n\tlogger = require('../../logger'),\n\tBuildLog = require('./BuildLog'),\n\tCONST = require('../../common/constants'),\n\tdeepExtend = require('node.extend');\n\n// constants\nvar GLOBAL_STYLE_CACHE = 'global_style_cache.json';\nvar STYLE_ALLOY_TYPE = '__ALLOY_TYPE__';\nvar STYLE_EXPR_PREFIX = exports.STYLE_EXPR_PREFIX = '__ALLOY_EXPR__--';\nvar STYLE_REGEX = /^\\s*([\\#\\.]{0,1})([^\\[]+)(?:\\[([^\\]]+)\\])*\\s*$/;\nvar EXPR_REGEX = new RegExp('^' + STYLE_EXPR_PREFIX + '(.+)');\nvar BINDING_SPLIT_REGEX = /(\\{[^:}]+\\}(?!\\}))/;\nvar BINDING_REFERENCE_REGEX = /^\\{([^:}]+)\\}$/;\nvar VALUES = {\n\tID:     100000,\n\tCLASS:   10000,\n\tAPI:      1000,\n\tTSSIF:     500,\n\tPLATFORM:  100,\n\tFORMFACTOR: 10,\n\tSUM:         1,\n\tTHEME:       0.9,\n\tORDER:       0.0001\n};\nvar DATEFIELDS = [\n\t'minDate', 'value', 'maxDate'\n];\nvar KEYBOARD_TYPES = [\n\t'DEFAULT', 'ASCII', 'NUMBERS_PUNCTUATION', 'URL', 'EMAIL', 'DECIMAL_PAD', 'NAMEPHONE_PAD',\n\t'NUMBER_PAD', 'PHONE_PAD'\n];\nvar RETURN_KEY_TYPES = [\n\t'DEFAULT', 'DONE', 'EMERGENCY_CALL', 'GO', 'GOOGLE', 'JOIN', 'NEXT', 'ROUTE',\n\t'SEARCH', 'SEND', 'YAHOO'\n];\nvar AUTOCAPITALIZATION_TYPES = [\n\t'ALL', 'NONE', 'SENTENCES', 'WORDS'\n];\nvar KEYBOARD_PROPERTIES = ['keyboardType', 'returnKeyType', 'autocapitalization'];\n\n// private variables\nvar styleOrderCounter = 1;\nvar platform;\n\nexports.setPlatform = function(p) {\n\tplatform = p;\n};\n\n/*\n * @property {Array} globalStyle\n * The global style array, which contains an merged, ordered list of all\n * applicable global styles. This will serve as the base for all controller-\n * specific styles.\n *\n */\nexports.globalStyle = [];\n\n/*\n * @property {Object} bindingsMap\n * Holds the collection of models/collections data-bound to UI component\n * properties in the Alloy app. This map is used to create the most effecient\n * set of event listeners possible for dynamically updating the UI based on\n * changes to the data model/collections.\n *\n */\nexports.bindingsMap = {};\n\n/*\n * @method loadGlobalStyles\n * Loads all global styles (app.tss) in a project and sorts them appropriately.\n * The order of sorting is as follows:\n *\n * 1. global\n * 2. global theme\n * 3. global platform-specific\n * 4. global theme platform-specific\n *\n * This function updates the global style array that will be used as a base for\n * all controller styling. This is executed before any other styling is\n * performed during the compile phase. If the style is loaded from the cache,\n * it returns true, otherwise it returns false.\n *\n * @param {String} Full path to the \"app\" folder of the target project\n * @param {String} The mobile platform for which to load styles\n * @param {Object} [opts] Additional options\n *\n * @returns {Boolean} true if cache was used, false if not\n */\nexports.loadGlobalStyles = function(appPath, opts) {\n\t// reset the global style array\n\texports.globalStyle = [];\n\n\t// validate/set arguments\n\topts = opts || {};\n\tvar ret = false;\n\tvar theme = opts.theme;\n\tvar apptss = CONST.GLOBAL_STYLE;\n\tvar stylesDir = path.join(appPath, CONST.DIR.STYLE);\n\tvar themesDir;\n\tif (theme) {\n\t\tthemesDir = path.join(appPath, 'themes', theme, CONST.DIR.STYLE);\n\t}\n\tvar buildlog = BuildLog();\n\tvar cacheFile = path.join(appPath, '..', CONST.DIR.BUILD, GLOBAL_STYLE_CACHE);\n\n\t// create array of global styles to load based on arguments\n\tvar loadArray = [];\n\tloadArray.push({\n\t\tpath: path.join(stylesDir, apptss),\n\t\tmsg: apptss\n\t});\n\tif (theme) {\n\t\tloadArray.push({\n\t\t\tpath: path.join(themesDir, apptss),\n\t\t\tmsg: apptss + '(theme:' + theme + ')',\n\t\t\tobj: { theme: true }\n\t\t});\n\t}\n\tloadArray.push({\n\t\tpath: path.join(stylesDir, platform, apptss),\n\t\tmsg: apptss + '(platform:' + platform + ')',\n\t\tobj: { platform: true }\n\t});\n\tif (theme) {\n\t\tloadArray.push({\n\t\t\tpath: path.join(themesDir, platform, apptss),\n\t\t\tmsg: apptss + '(theme:' + theme + ' platform:' + platform + ')',\n\t\t\tobj: { platform: true, theme: true }\n\t\t});\n\t}\n\n\t// get rid of entries that don't exist\n\tvar len = loadArray.length;\n\tfor (var i = len - 1; i >= 0; i--) {\n\t\tif (!path.existsSync(loadArray[i].path)) {\n\t\t\tloadArray.splice(i, 1);\n\t\t}\n\t}\n\n\t// create hash of existing global styles\n\tvar hash = U.createHash(_.pluck(loadArray, 'path'));\n\n\t// see if we can use the cached global style\n\tif (buildlog.data.globalStyleCacheHash === hash && fs.existsSync(cacheFile)) {\n\t\t// load global style object from cache\n\t\tlogger.info('[global style] loading from cache...');\n\t\texports.globalStyle = JSON.parse(fs.readFileSync(cacheFile, 'utf8'));\n\t\tret = true;\n\n\t\t// increment the style order counter with the number of rules in the global style\n\t\tstyleOrderCounter += exports.globalStyle.length;\n\t} else {\n\t\t// add new hash to the buildlog\n\t\tbuildlog.data.globalStyleCacheHash = hash;\n\n\t\t// create the new global style object\n\t\t_.each(loadArray, function(g) {\n\t\t\tif (path.existsSync(g.path)) {\n\t\t\t\tlogger.info('[' + g.msg + '] global style processing...');\n\t\t\t\texports.globalStyle = exports.loadAndSortStyle(g.path, _.extend(\n\t\t\t\t\t{ existingStyle: exports.globalStyle },\n\t\t\t\t\tg.obj || {}\n\t\t\t\t));\n\t\t\t}\n\t\t});\n\n\t\t// write global style object to cache\n\t\tlogger.info('[global style] writing to cache...');\n\t\tfs.writeFileSync(cacheFile, JSON.stringify(exports.globalStyle));\n\n\t\t// simply increment the style order counter\n\t\tstyleOrderCounter++;\n\t}\n\n\treturn ret;\n};\n\n/*\n * @method sortStyles\n * Given a parsed style from loadStyle(), sort all the style entries into an\n * ordered array. This is the final operations to prepare a style for usage with\n * a Titanium UI component in Alloy.\n *\n * @param {Object} Parsed style object from a loadStyle() call\n * @param {Object} [opts] Options for this function\n */\nexports.sortStyles = function(style, opts) {\n\tvar sortedStyles = [];\n\topts = opts || {};\n\n\tif (_.isObject(style) && !_.isEmpty(style)) {\n\t\tfor (var key in style) {\n\t\t\tvar obj = {};\n\t\t\tvar priority = styleOrderCounter++ * VALUES.ORDER;\n\t\t\tvar match = key.match(STYLE_REGEX);\n\t\t\tif (match === null) {\n\t\t\t\tU.die('Invalid style specifier \"' + key + '\"');\n\t\t\t}\n\t\t\tvar newKey = match[2];\n\n\t\t\t// skip any invalid style entries\n\t\t\tif (newKey === 'undefined' && !match[1]) { continue; }\n\n\t\t\t// get the style key type\n\t\t\tswitch (match[1]) {\n\t\t\t\tcase '#':\n\t\t\t\t\tobj.isId = true;\n\t\t\t\t\tpriority += VALUES.ID;\n\t\t\t\t\tbreak;\n\t\t\t\tcase '.':\n\t\t\t\t\tobj.isClass = true;\n\t\t\t\t\tpriority += VALUES.CLASS;\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\tif (match[2]) {\n\t\t\t\t\t\tobj.isApi = true;\n\t\t\t\t\t\tpriority += VALUES.API;\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t}\n\n\t\t\tif (match[3]) {\n\t\t\t\tobj.queries = {};\n\t\t\t\t_.each(match[3].replace(/\\s*,\\s*/g, ',').split(/\\s+/), function(query) {\n\t\t\t\t\tvar parts = query.split('=');\n\t\t\t\t\tvar q = U.trim(parts[0]);\n\t\t\t\t\tvar v = U.trim(parts[1]);\n\t\t\t\t\tif (q === 'platform') {\n\t\t\t\t\t\tpriority += VALUES.PLATFORM + VALUES.SUM;\n\t\t\t\t\t\tv = v.split(',');\n\t\t\t\t\t} else if (q === 'formFactor') {\n\t\t\t\t\t\tpriority += VALUES.FORMFACTOR + VALUES.SUM;\n\t\t\t\t\t} else if (q === 'if') {\n\t\t\t\t\t\tpriority += VALUES.TSSIF + VALUES.SUM;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tpriority += VALUES.SUM;\n\t\t\t\t\t}\n\t\t\t\t\tobj.queries[q] = v;\n\t\t\t\t});\n\t\t\t}\n\n\t\t\t_.extend(obj, {\n\t\t\t\tpriority: priority + (opts.platform ? VALUES.PLATFORM : 0) + (opts.theme ? VALUES.THEME : 0),\n\t\t\t\tkey: newKey,\n\t\t\t\tstyle: style[key]\n\t\t\t});\n\t\t\tsortedStyles.push(obj);\n\t\t}\n\t}\n\n\tvar theArray = opts.existingStyle ? opts.existingStyle.concat(sortedStyles) : sortedStyles;\n\treturn _.sortBy(theArray, 'priority');\n};\n\nexports.loadStyle = function(tssFile) {\n\tif (path.existsSync(tssFile)) {\n\t\t// read the style file\n\t\tvar contents;\n\t\ttry {\n\t\t\tcontents = fs.readFileSync(tssFile, 'utf8');\n\t\t} catch (e) {\n\t\t\tU.die('Failed to read style file \"' + tssFile + '\"', e);\n\t\t}\n\n\t\t// skip if the file is empty\n\t\tif (/^\\s*$/gi.test(contents)) {\n\t\t\treturn {};\n\t\t}\n\n\t\t// Add enclosing curly braces, if necessary\n\t\tcontents = /^\\s*\\{[\\s\\S]+\\}\\s*$/gi.test(contents) ? contents : '{\\n' + contents + '\\n}';\n\t\t// [ALOY-793] double-escape '\\' in tss\n\t\tcontents = contents.replace(/(\\s)(\\\\+)(\\s)/g, '$1$2$2$3');\n\n\t\t// Process tss file then convert to JSON\n\t\tvar json;\n\t\ttry {\n\t\t\tjson = grammar.parse(contents);\n\t\t\toptimizer.optimizeStyle(json);\n\t\t} catch (e) {\n\t\t\tU.die([\n\t\t\t\t'Error processing style \"' + tssFile + '\"',\n\t\t\t\te.message,\n\t\t\t\t/Expected bare word\\, comment\\, end of line\\, string or whitespace but \".+?\" found\\./.test(e.message) ? 'Do you have an extra comma in your style definition?' : '',\n\t\t\t\t'- line:    ' + e.line,\n\t\t\t\t'- column:  ' + e.column,\n\t\t\t\t'- offset:  ' + e.offset\n\t\t\t]);\n\t\t}\n\n\t\treturn json;\n\t}\n\treturn {};\n};\n\nexports.loadAndSortStyle = function(tssFile, opts) {\n\treturn exports.sortStyles(exports.loadStyle(tssFile), opts);\n};\n\nexports.createVariableStyle = function(keyValuePairs, value) {\n\tvar style = {};\n\n\tif (!_.isArray(keyValuePairs)) {\n\t\tkeyValuePairs = [[keyValuePairs, value]];\n\t}\n\t_.each(keyValuePairs, function(pair) {\n\t\tvar k = pair[0];\n\t\tvar v = pair[1];\n\t\tstyle[k] = { value:v };\n\t\tstyle[k][STYLE_ALLOY_TYPE] = 'var';\n\t});\n\treturn style;\n};\n\nexports.processStyle = function(_style, _state) {\n\tvar theState = _state || {};\n\tvar regex = EXPR_REGEX;\n\tvar code = '';\n\n\tfunction processStyle(style, opts) {\n\t\topts = opts || {};\n\t\tstyle = opts.fromArray ? {0:style} : style;\n\t\tvar groups = {}, sn, value;\n\n\t\t// need to add \"properties\" and bindIds for ListItems\n\t\tif (theState && theState.isListItem && opts.firstOrder && !opts.fromArray) {\n\t\t\tfor (sn in style) {\n\t\t\t\tvalue = style[sn];\n\t\t\t\tvar prefixes = sn.split(':');\n\t\t\t\tif (prefixes.length > 1) {\n\t\t\t\t\tvar bindId = prefixes[0];\n\t\t\t\t\tgroups[bindId] = groups[bindId] || {};\n\t\t\t\t\tgroups[bindId][prefixes.slice(1).join(':')] = value;\n\t\t\t\t} else {\n\t\t\t\t\t// allow template to be specified\n\t\t\t\t\tif (sn === 'template') {\n\t\t\t\t\t\tgroups.template = value;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tgroups.properties = groups.properties || {};\n\t\t\t\t\t\tgroups.properties[sn] = value;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tstyle = groups;\n\t\t}\n\n\t\tfor (sn in style) {\n\t\t\tvalue = style[sn];\n\t\t\tvar prefix = opts.fromArray ? '' : sn + ':';\n\n\t\t\tif (_.isString(value)) {\n\t\t\t\tvar matches = value.match(regex);\n\t\t\t\tif (matches !== null) {\n\t\t\t\t\tcode += prefix + matches[1] + ','; // matched a JS expression\n\t\t\t\t} else {\n\t\t\t\t\tif (typeof style.type !== 'undefined' && typeof style.type.indexOf === 'function' && (style.type).indexOf('UI.PICKER') !== -1 && value !== 'picker') {\n\t\t\t\t\t\tif (DATEFIELDS.indexOf(sn) !== -1) {\n\t\t\t\t\t\t\t// ALOY-263, support date/time style pickers\n\t\t\t\t\t\t\tvar d = U.createDate(value);\n\n\t\t\t\t\t\t\tif (U.isValidDate(d, sn)) {\n\t\t\t\t\t\t\t\tcode += prefix + 'new Date(\"' + d.toString() + '\"),';\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tcode += prefix + '\"' + value\n\t\t\t\t\t\t\t\t.replace(/\"/g, '\\\\\"')\n\t\t\t\t\t\t\t\t.replace(/\\n/g, '\\\\n')\n\t\t\t\t\t\t\t\t.replace(/\\r/g, '\\\\r')\n\t\t\t\t\t\t\t\t.replace(/\\u2028/g, '\\\\u2028')\n\t\t\t\t\t\t\t\t.replace(/\\u2029/g, '\\\\u2029') +  '\",'; // just a string\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\tif (KEYBOARD_PROPERTIES.indexOf(sn) === -1) {\n\t\t\t\t\t\t\tcode += prefix + '\"' + value\n\t\t\t\t\t\t\t\t.replace(/\"/g, '\\\\\"')\n\t\t\t\t\t\t\t\t.replace(/\\n/g, '\\\\n')\n\t\t\t\t\t\t\t\t.replace(/\\r/g, '\\\\r')\n\t\t\t\t\t\t\t\t.replace(/\\u2028/g, '\\\\u2028')\n\t\t\t\t\t\t\t\t.replace(/\\u2029/g, '\\\\u2029') +  '\",'; // just a string\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t// keyboard type shortcuts for TextField, TextArea\n\t\t\t\t\t\t\t// support shortcuts for keyboard type, return key type, and autocapitalization\n\t\t\t\t\t\t\tif (sn === KEYBOARD_PROPERTIES[0] && _.contains(KEYBOARD_TYPES, value.toUpperCase())) {\n\t\t\t\t\t\t\t\tcode += prefix + 'Ti.UI.KEYBOARD_' + value.toUpperCase() + ',';\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tif (sn === KEYBOARD_PROPERTIES[1] && _.contains(RETURN_KEY_TYPES, value.toUpperCase())) {\n\t\t\t\t\t\t\t\tcode += prefix + 'Ti.UI.RETURNKEY_' + value.toUpperCase() + ',';\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tif (sn === KEYBOARD_PROPERTIES[2] && _.contains(AUTOCAPITALIZATION_TYPES, value.toUpperCase())) {\n\t\t\t\t\t\t\t\tcode += prefix + 'Ti.UI.TEXT_AUTOCAPITALIZATION_' + value.toUpperCase() + ',';\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else if (_.isArray(value)) {\n\t\t\t\tcode += prefix + '[';\n\t\t\t\t_.each(value, function(v) {\n\t\t\t\t\tprocessStyle(v, {fromArray:true});\n\t\t\t\t});\n\t\t\t\tcode += '],';\n\t\t\t} else if (_.isObject(value)) {\n\t\t\t\tif (value[STYLE_ALLOY_TYPE] === 'var') {\n\t\t\t\t\tcode += prefix + value.value + ','; // dynamic variable value\n\t\t\t\t} else {\n\t\t\t\t\t// recursively process objects\n\t\t\t\t\tcode += prefix + '{';\n\t\t\t\t\tprocessStyle(value);\n\t\t\t\t\tcode += '},';\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tcode += prefix + JSON.stringify(value) + ','; // catch all, just stringify the value\n\t\t\t}\n\t\t}\n\t}\n\tprocessStyle(_style, {firstOrder:true});\n\n\treturn code;\n};\n\nexports.generateStyleParams = function(styles, classes, id, apiName, extraStyle, theState) {\n\tvar styleCollection = [],\n\t\tlastObj = {},\n\t\telementName = apiName.split('.').pop();\n\n\t// don't add an id to the generated style if we are in a local state\n\tif (theState && theState.local) {\n\t\tdelete extraStyle.id;\n\t}\n\n\t// process all style items, in order\n\t_.each(styles, function(style) {\n\t\tif ((style.isId && style.key === id) ||\n\t\t\t(style.isClass && _.contains(classes, style.key)) ||\n\t\t\t(style.isApi && elementName === style.key)) {\n\n\t\t\t// manage potential runtime conditions for the style\n\t\t\tvar conditionals = {\n\t\t\t\tplatform: [],\n\t\t\t\tformFactor: ''\n\t\t\t};\n\n\t\t\tif (style.queries) {\n\t\t\t\t// handle platform device query\n\t\t\t\t// - Make compile time comparison if possible\n\t\t\t\t// - Add runtime conditional if platform is not known\n\t\t\t\tvar q = style.queries;\n\t\t\t\tif (q.platform) {\n\t\t\t\t\tif (platform) {\n\t\t\t\t\t\tvar isForCurrentPlatform = false;\n\t\t\t\t\t\t_.each(q.platform.toString().split(','), function(p) {\n\t\t\t\t\t\t\t// need to account for multiple platforms and negation, such as platform=ios or\n\t\t\t\t\t\t\t// platform=ios,android   or   platform=!ios   or   platform=\"android,!mobileweb\"\n\t\t\t\t\t\t\tif (p === platform || (p.indexOf('!') === 0 && p.substr(1) !== platform)) {\n\t\t\t\t\t\t\t\tisForCurrentPlatform = true;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t});\n\t\t\t\t\t\tif (!isForCurrentPlatform) {\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\t_.each(q.platform, function(p) {\n\t\t\t\t\t\t\tconditionals.platform.push(CU.CONDITION_MAP[p]['runtime']);\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t// handle formFactor device query\n\t\t\t\tif (q.formFactor === 'tablet') {\n\t\t\t\t\tconditionals.formFactor = 'Alloy.isTablet';\n\t\t\t\t} else if (q.formFactor === 'handheld') {\n\t\t\t\t\tconditionals.formFactor = 'Alloy.isHandheld';\n\t\t\t\t}\n\n\t\t\t\t// assemble runtime query\n\t\t\t\tvar pcond = conditionals.platform.length > 0 ? '(' + conditionals.platform.join(' || ') + ')' : '';\n\t\t\t\tvar joinString = (pcond && conditionals.formFactor) ? ' && ' : '';\n\t\t\t\tvar conditional = pcond + joinString + conditionals.formFactor;\n\t\t\t\tif (q.if) {\n\t\t\t\t\t// ALOY-871: handle custom TSS queries with if conditional\n\t\t\t\t\tvar ffcond = conditionals.formFactor.length > 0 ? '(' + conditionals.formFactor + ')' : '';\n\t\t\t\t\tvar ffJoinString = (ffcond) ? ' && ' : '';\n\t\t\t\t\tconditional = pcond + joinString + ffcond + ffJoinString + '(' + q.if.split(',').join(' || ') + ')';\n\t\t\t\t}\n\n\t\t\t\t// push styles if we need to insert a conditional\n\t\t\t\tif (conditional) {\n\t\t\t\t\tif (lastObj) {\n\t\t\t\t\t\tstyleCollection.push({style:lastObj});\n\t\t\t\t\t\tstyleCollection.push({style:style.style, condition:conditional});\n\t\t\t\t\t\tlastObj = {};\n\t\t\t\t\t}\n\t\t\t\t} else if (!q.if) {\n\t\t\t\t\tlastObj = deepExtend(true, lastObj, style.style);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\t// remove old style\n\t\t\t\t_.each(style.style, function(val, key) {\n\t\t\t\t\tif (_.isArray(val) && lastObj.hasOwnProperty(key)) {\n\t\t\t\t\t\tdelete lastObj[key];\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t\tlastObj = deepExtend(true, lastObj, style.style);\n\t\t\t}\n\t\t}\n\t});\n\n\t// add in any final styles\n\t_.extend(lastObj, extraStyle || {});\n\tif (!_.isEmpty(lastObj)) { styleCollection.push({style:lastObj}); }\n\n\t// substitutions for binding\n\t_.each(styleCollection, function(style) {\n\t\t_.each(style.style, function(v, k) {\n\n\t\t\tif (!_.isString(v)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tvar bindingStrParts = v.split(BINDING_SPLIT_REGEX);\n\n\t\t\tif (bindingStrParts.length <= 1) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tvar collectionModelVar = theState && theState.model ? theState.model : CONST.BIND_MODEL_VAR;\n\n\t\t\tvar bindsModels = [];\n\t\t\tvar bindsCollection = false;\n\n\t\t\tvar bindingExpParts = [];\n\n\t\t\tbindingStrParts.forEach(function(part, i) {\n\n\t\t\t\t// empty string\n\t\t\t\tif (part === '') {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tvar partMatch = part.match(BINDING_REFERENCE_REGEX);\n\n\t\t\t\t// regular string\n\t\t\t\tif (!partMatch) {\n\n\t\t\t\t\t// escape single quote: ALOY-1478\n\t\t\t\t\tbindingExpParts.push(\"'\" + part.replace(/'/g, \"\\\\'\") + \"'\");\n\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tvar reference = partMatch[1].trim(); // trim: ALOY-716\n\t\t\t\tvar referencePath = toPath(reference);\n\n\t\t\t\tvar attribute, modelVar;\n\n\t\t\t\t// collection binding\n\t\t\t\tif (referencePath.length === 1) {\n\t\t\t\t\tbindsCollection = true;\n\t\t\t\t} else if (referencePath[0] === '$') {\n\t\t\t\t\t// instance model binding\n\t\t\t\t\tattribute = referencePath.splice(2, referencePath.length);\n\t\t\t\t} else if (_.contains(CU.models, referencePath[0])) {\n\t\t\t\t\t// global model binding\n\t\t\t\t\tattribute = referencePath.splice(1, referencePath.length);\n\t\t\t\t\treferencePath.unshift('Alloy', 'Models');\n\t\t\t\t} else {\n\t\t\t\t\t// collection binding (deep)\n\t\t\t\t\tbindsCollection = true;\n\t\t\t\t}\n\n\t\t\t\t// model binding\n\t\t\t\tif (attribute !== undefined) {\n\t\t\t\t\tmodelVar = fromPath(referencePath);\n\t\t\t\t\treference = fromPath(referencePath.concat(CONST.BIND_TRANSFORM_VAR, attribute));\n\n\t\t\t\t\tif (!_.contains(bindsModels, modelVar)) {\n\t\t\t\t\t\tbindsModels.push(modelVar);\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\t// collection binding\n\t\t\t\t\treference = collectionModelVar + '.' + CONST.BIND_TRANSFORM_VAR + (reference[0] === '[' ? '' : '.') + reference;\n\t\t\t\t}\n\n\t\t\t\tbindingExpParts.push(reference);\n\n\t\t\t});\n\n\t\t\tif (!bindsCollection && bindsModels.length === 0) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (bindsCollection && bindsModels.length > 0) {\n\t\t\t\tU.die('Attempt to mix model (' + bindsModels.join(', ') + ') and collection (' + collectionModelVar + ') binding in: ' + v);\n\t\t\t}\n\n\t\t\tvar bindingExp = bindingExpParts.join(' + ');\n\n\t\t\tif (bindsCollection) {\n\t\t\t\tstyle.style[k] = STYLE_EXPR_PREFIX + bindingExp;\n\t\t\t}\n\n\t\t\tif (bindsModels.length > 0) {\n\n\t\t\t\tbindsModels.forEach(function(modelVar) {\n\n\t\t\t\t\t// ensure that the bindings for this model have been initialized\n\t\t\t\t\tif (!exports.bindingsMap[modelVar]) {\n\t\t\t\t\t\texports.bindingsMap[modelVar] = {\n\t\t\t\t\t\t\tmodels: bindsModels,\n\t\t\t\t\t\t\tbindings: []\n\t\t\t\t\t\t};\n\t\t\t\t\t} else {\n\t\t\t\t\t\t// ensure that mix use of models contains all\n\t\t\t\t\t\texports.bindingsMap[modelVar].models = _.union(exports.bindingsMap[modelVar].models, bindsModels);\n\t\t\t\t\t}\n\n\t\t\t\t\t// create the binding object\n\t\t\t\t\tvar bindingObj = {\n\t\t\t\t\t\tid: id,\n\t\t\t\t\t\tprop: k,\n\t\t\t\t\t\tval: bindingExp\n\t\t\t\t\t};\n\n\t\t\t\t\t// make sure bindings are wrapped in any conditionals\n\t\t\t\t\t// relevant to the curent style\n\t\t\t\t\tif (theState.condition) {\n\t\t\t\t\t\tbindingObj.condition = theState.condition;\n\t\t\t\t\t}\n\n\t\t\t\t\t// add this property to the global bindings map for the\n\t\t\t\t\t// current controller component\n\t\t\t\t\texports.bindingsMap[modelVar].bindings.push(bindingObj);\n\t\t\t\t});\n\n\t\t\t\t// since this property is data bound, don't include it in\n\t\t\t\t// the style statically\n\t\t\t\tdelete style.style[k];\n\t\t\t}\n\t\t});\n\t});\n\n\t// Let's assemble the fastest factory method object possible based on\n\t// what we know about the style we just sorted and assembled\n\tvar code = '';\n\tif (styleCollection.length === 0) {\n\t\tcode += '{}';\n\t} else if (styleCollection.length === 1) {\n\t\tif (styleCollection[0].condition) {\n\t\t\t// check the condition and return the object\n\t\t\tcode += styleCollection[0].condition + ' ? {' + exports.processStyle(styleCollection[0].style, theState) + '} : {}';\n\t\t} else {\n\t\t\t// just return the object\n\t\t\tcode += '{';\n\t\t\tcode += exports.processStyle(styleCollection[0].style, theState);\n\t\t\tcode += '}';\n\t\t}\n\t} else if (styleCollection.length > 1) {\n\t\t// construct self-executing function to merge styles based on runtime conditionals\n\t\tcode += '(function(){\\n';\n\t\tcode += 'var o = {};\\n';\n\n\t\tfor (var i = 0, l = styleCollection.length; i < l; i++) {\n\t\t\tvar tmpStyle = exports.processStyle(styleCollection[i].style, theState);\n\t\t\tif (!_.isEmpty(tmpStyle)) {\n\t\t\t\tif (styleCollection[i].condition) {\n\t\t\t\t\tcode += 'if (' + styleCollection[i].condition + ') ';\n\t\t\t\t}\n\t\t\t\tcode += 'Alloy.deepExtend(true, o, {';\n\t\t\t\tcode += tmpStyle;\n\t\t\t\tcode += '});\\n';\n\t\t\t}\n\t\t}\n\t\tcode += 'return o;\\n';\n\t\tcode += '})()';\n\t}\n\n\treturn code;\n};\n\nfunction getCacheFilePath(appPath, hash) {\n\treturn path.join(appPath, '..', CONST.DIR.BUILD, 'global_style_cache_' + hash + '.json');\n}\n\n// source: https://github.com/lodash/lodash/blob/3.8.1-npm-packages/lodash._topath/index.js\nfunction toPath(value) {\n\tvar result = [];\n\tvalue.replace(/[^.[\\]]+|\\[(?:(-?\\d+(?:\\.\\d+)?)|([\"'])((?:(?!\\2)[^\\n\\\\]|\\\\.)*?)\\2)\\]/g, function(match, number, quote, string) {\n\t\tresult.push(quote ? string.replace(/\\\\(\\\\)?/g, '$1') : (number || match));\n\t});\n\treturn result;\n}\n\nfunction fromPath(path) {\n\tvar result = path[0];\n\n\tif (path.length > 1) {\n\t\tresult += '[' + path.slice(1).map(function(string) {\n\t\t\treturn \"'\" + string.replace(/'/g, \"\\\\'\") + \"'\";\n\t\t}).join('][') + ']';\n\t}\n\n\treturn result;\n}\n","/home/travis/build/npmtest/node-npmtest-alloy/node_modules/alloy/Alloy/commands/compile/compilerUtils.js":"var U = require('../../utils'),\n\tcolors = require('colors'),\n\tpath = require('path'),\n\tos = require('os'),\n\tfs = require('fs'),\n\twrench = require('wrench'),\n\tjsonlint = require('jsonlint'),\n\tlogger = require('../../logger'),\n\tastController = require('./ast/controller'),\n\t_ = require('../../lib/alloy/underscore')._,\n\tstyler = require('./styler'),\n\tXMLSerializer = require('xmldom').XMLSerializer,\n\tCONST = require('../../common/constants');\n\n///////////////////////////////////////\n////////// private variables //////////\n///////////////////////////////////////\nvar alloyRoot = path.join(__dirname, '..', '..'),\n\tplatformsDir = path.join(alloyRoot, '..', 'platforms'),\n\talloyUniqueIdPrefix = '__alloyId',\n\talloyUniqueIdCounter = 0,\n\tJSON_NULL = JSON.parse('null'),\n\tcompilerConfig;\n\n///////////////////////////////\n////////// constants //////////\n///////////////////////////////\nvar RESERVED_ATTRIBUTES = [\n\t\t'platform',\n\t\t'formFactor',\n\t\t'if',\n\t\tCONST.BIND_COLLECTION,\n\t\tCONST.BIND_WHERE,\n\t\tCONST.AUTOSTYLE_PROPERTY,\n\t\t'ns',\n\t\t'method',\n\t\t'module'\n\t],\n\tRESERVED_ATTRIBUTES_REQ_INC = [\n\t\t'platform',\n\t\t'type',\n\t\t'src',\n\t\t'formFactor',\n\t\t'if',\n\t\tCONST.BIND_COLLECTION,\n\t\tCONST.BIND_WHERE,\n\t\tCONST.AUTOSTYLE_PROPERTY,\n\t\t'ns',\n\t\t'method',\n\t\t'module'\n\t],\n\tRESERVED_EVENT_REGEX =  /^on([A-Z].+)/;\n\n// load CONDITION_MAP with platforms\nexports.CONDITION_MAP = {\n\thandheld: {\n\t\truntime: '!Alloy.isTablet'\n\t},\n\ttablet: {\n\t\truntime: 'Alloy.isTablet'\n\t}\n};\n_.each(CONST.PLATFORMS, function(p) {\n\texports.CONDITION_MAP[p] = require(path.join(platformsDir, p, 'index'))['condition'];\n});\n\nexports.bindingsMap = {};\nexports.destroyCode = '';\nexports.postCode = '';\nexports.models = [];\nexports.dataFunctionNames = {};\n\n//////////////////////////////////////\n////////// public interface //////////\n//////////////////////////////////////\nexports.getCompilerConfig = function() {\n\treturn compilerConfig;\n};\n\nexports.generateVarName = function(id, name) {\n\tif (_.contains(CONST.JS_RESERVED_ALL, id)) {\n\t\tU.die([\n\t\t\t'Invalid ID \"' + id + '\" for <' + name + '>.',\n\t\t\t'Can\\'t use reserved Javascript words as IDs.',\n\t\t\t'Reserved words: [' + CONST.JS_RESERVED_ALL.sort().join(',') + ']'\n\t\t]);\n\t}\n\treturn '$.__views.' + id;\n};\n\nexports.generateUniqueId = function() {\n\treturn alloyUniqueIdPrefix + alloyUniqueIdCounter++;\n};\n\nexports.getNodeFullname = function(node) {\n\tvar name = node.nodeName,\n\t\tns = node.getAttribute('ns') || CONST.IMPLICIT_NAMESPACES[name] || CONST.NAMESPACE_DEFAULT,\n\t\tfullname = ns + '.' + name;\n\n\treturn fullname;\n};\n\nexports.isNodeForCurrentPlatform = function(node) {\n\tvar isForCurrentPlatform =  !node.hasAttribute('platform') || !compilerConfig || !compilerConfig.alloyConfig;\n\t_.each(node.getAttribute('platform').split(','), function(p) {\n\t\t// need to account for multiple platforms and negation, such as\n\t\t// platform=ios,android   or   platform=!ios   or   platform=\"android,!mobileweb\"\n\t\tp = p.trim();\n\t\tif (p === compilerConfig.alloyConfig.platform || (p.indexOf('!') === 0 && p.slice(1) !== compilerConfig.alloyConfig.platform)) {\n\t\t\tisForCurrentPlatform = true;\n\t\t}\n\t});\n\treturn isForCurrentPlatform;\n};\nexports.getParserArgs = function(node, state, opts) {\n\tstate = state || {};\n\topts = opts || {};\n\n\tvar defaultId = opts.defaultId || undefined,\n\t\tdoSetId = opts.doSetId === false ? false : true,\n\t\tname = node.nodeName,\n\t\tns = node.getAttribute('ns') || CONST.IMPLICIT_NAMESPACES[name] || CONST.NAMESPACE_DEFAULT,\n\t\tfullname = ns + '.' + name,\n\t\tid = node.getAttribute('id') || defaultId || exports.generateUniqueId(),\n\t\tplatform = node.getAttribute('platform'),\n\t\tformFactor = node.getAttribute('formFactor'),\n\t\ttssIf = node.getAttribute('if'),\n\t\tplatformObj;\n\n\t// make sure we're not reusing the default ID for the first top level element\n\tif (id === exports.currentDefaultId &&\n\t\t(node.parentNode && node.parentNode.nodeName !== 'Alloy') &&\n\t\t!node.__idWarningHandled) {\n\t\tlogger.warn([\n\t\t\t'<' + name + '> at line ' + node.lineNumber +\n\t\t\t' is using this view\\'s default ID \"' + id + '\". ' +\n\t\t\t'Only a top-level element in a view should use the default ID'\n\t\t]);\n\t\tnode.__idWarningHandled = true;\n\t}\n\n\t// handle binding arguments\n\tvar bindObj = {};\n\tbindObj[CONST.BIND_COLLECTION] = node.getAttribute(CONST.BIND_COLLECTION);\n\tbindObj[CONST.BIND_WHERE] = node.getAttribute(CONST.BIND_WHERE);\n\tbindObj[CONST.BIND_TRANSFORM] = node.getAttribute(CONST.BIND_TRANSFORM);\n\tbindObj[CONST.BIND_FUNCTION] = node.getAttribute(CONST.BIND_FUNCTION);\n\n\t// cleanup namespaces and nodes\n\tns = ns.replace(/^Titanium\\./, 'Ti.');\n\tif (doSetId && !_.contains(CONST.MODEL_ELEMENTS, fullname)) {\n\t\tnode.setAttribute('id', id);\n\t}\n\n\t// process the platform attribute\n\tif (platform) {\n\t\tplatformObj = {};\n\t\t_.each((platform).split(','), function(p) {\n\t\t\tvar matches = U.trim(p).match(/^(\\!{0,1})(.+)/);\n\t\t\tif (matches !== null) {\n\t\t\t\tvar negate = matches[1];\n\t\t\t\tvar name = matches[2];\n\t\t\t\tif (_.contains(CONST.PLATFORMS, name)) {\n\t\t\t\t\tif (negate === '!') {\n\t\t\t\t\t\t_.each(_.without(CONST.PLATFORMS, name), function(n) {\n\t\t\t\t\t\t\tplatformObj[n] = true;\n\t\t\t\t\t\t});\n\t\t\t\t\t} else {\n\t\t\t\t\t\tplatformObj[name] = true;\n\t\t\t\t\t}\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t}\n\t\t\tU.die('Invalid platform type found: ' + p);\n\t\t});\n\t}\n\n\t// get create arguments and events from attributes\n\tvar createArgs = {},\n\t\tevents = [];\n\tvar attrs = _.contains(['Alloy.Require'], fullname) ?\n\t\tRESERVED_ATTRIBUTES_REQ_INC :\n\t\tRESERVED_ATTRIBUTES;\n\n\t// determine whether to autoStyle this component\n\t// 1. autoStyle attribute\n\t// 2. autoStyle from <Alloy>\n\t// 3. autoStyle from config.json\n\tvar autoStyle = (function() {\n\t\tvar prop = CONST.AUTOSTYLE_PROPERTY;\n\t\tif (node.hasAttribute(prop)) {\n\t\t\treturn node.getAttribute(prop) === 'true';\n\t\t} else {\n\t\t\treturn exports[prop];\n\t\t}\n\t})();\n\n\t// TODO: Add the apiName until TIMOB-12553 is resolved\n\tif (autoStyle) {\n\t\tcreateArgs[CONST.APINAME_PROPERTY] = fullname;\n\t}\n\n\t_.each(node.attributes, function(attr) {\n\t\tvar attrName = attr.nodeName;\n\t\tif (_.contains(attrs, attrName)) { return; }\n\t\tvar matches = attrName.match(RESERVED_EVENT_REGEX);\n\t\tif (matches !== null && exports.isNodeForCurrentPlatform(node) && !_.contains(CONST.SPECIAL_PROPERTY_NAMES, attrName)) {\n\t\t\tevents.push({\n\t\t\t\tname: U.lcfirst(matches[1]),\n\t\t\t\tvalue: node.getAttribute(attrName)\n\t\t\t});\n\t\t} else {\n\t\t\tvar theValue = node.getAttribute(attrName);\n\t\t\tif (/(^|\\+)\\s*(?:(?:Ti|Titanium|Alloy.Globals|Alloy.CFG)\\.|L\\(.+\\)\\s*$)/.test(theValue)) {\n\t\t\t\tvar match = theValue.match(/^\\s*L\\([^'\"]+\\)\\s*$/);\n\t\t\t\tif (match !== null) {\n\t\t\t\t\ttheValue = theValue.replace(/\\(/g, '(\"').replace(/\\)/g, '\")');\n\t\t\t\t}\n\t\t\t\ttheValue = styler.STYLE_EXPR_PREFIX + theValue;\n\t\t\t}\n\n\n\t\t\tif (attrName === 'class') {\n\t\t\t\tif (autoStyle) {\n\t\t\t\t\tcreateArgs[CONST.CLASS_PROPERTY] = theValue.split(/\\s+/) || [];\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tif (theValue === 'true') {\n\t\t\t\t\ttheValue = true;\n\t\t\t\t} else if (theValue === 'false') {\n\t\t\t\t\ttheValue = false;\n\t\t\t\t} else {\n\t\t\t\t\tvar n = parseInt(theValue);\n\t\t\t\t\tif (!isNaN(n) && String(n) === theValue.trim()) {\n\t\t\t\t\t\ttheValue = n;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tn = parseFloat(theValue);\n\t\t\t\t\t\tif (!isNaN(n) && String(n) === theValue.trim()) {\n\t\t\t\t\t\t\ttheValue = n;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tcreateArgs[attrName] = theValue;\n\t\t\t}\n\t\t}\n\t});\n\n\tif (autoStyle && !createArgs[CONST.CLASS_PROPERTY]) {\n\t\tcreateArgs[CONST.CLASS_PROPERTY] = [];\n\t}\n\n\treturn _.extend({\n\t\tns: ns,\n\t\tname: name,\n\t\tid: id,\n\t\tfullname: fullname,\n\t\tformFactor: node.getAttribute('formFactor'),\n\t\tsymbol: exports.generateVarName(id, name),\n\t\tclasses: node.getAttribute('class').split(' ') || [],\n\t\ttssIf: node.getAttribute('if').split(',') || [],\n\t\tparent: state.parent || {},\n\t\tplatform: platformObj,\n\t\tcreateArgs: createArgs,\n\t\tevents: events\n\t}, bindObj);\n};\n\nexports.generateNodeExtended = function(node, state, newState) {\n\treturn exports.generateNode(node, _.extend(_.clone(state), newState));\n};\n\nexports.generateNode = function(node, state, defaultId, isTopLevel, isModelOrCollection) {\n\tif (node.nodeType != 1) return '';\n\tif (!exports.isNodeForCurrentPlatform(node)) {\n\t\treturn '';\n\t}\n\n\tvar args = exports.getParserArgs(node, state, { defaultId: defaultId }),\n\t\tcodeTemplate = 'if (<%= condition %>) {\\n<%= content %>}\\n',\n\t\tcode = {\n\t\t\tcontent: '',\n\t\t\tpre: ''\n\t\t};\n\n\t// Check for platform specific considerations\n\tvar conditionType = compilerConfig && compilerConfig.alloyConfig && compilerConfig.alloyConfig.platform ? 'compile' : 'runtime';\n\tif (args.platform) {\n\t\tvar conditionArray = [];\n\t\t_.each(args.platform, function(v, k) {\n\t\t\tconditionArray.push(exports.CONDITION_MAP[k][conditionType]);\n\t\t});\n\n\t\tcode.condition = '(' + conditionArray.join(' || ') + ')';\n\t}\n\n\t//Add form factor condition, if application form-factor specific runtime check\n\tif (args.formFactor && exports.CONDITION_MAP[args.formFactor]) {\n\t\tvar check = exports.CONDITION_MAP[args.formFactor].runtime;\n\t\tcode.condition = (code.condition) ? code.condition += ' && ' + check : check;\n\t}\n\n\t// ALOY-871: add the if condition check\n\targs.tssIf = _.compact(args.tssIf);\n\tif (args.tssIf.length > 0) {\n\t\tif (code.condition) {\n\t\t\tcode.condition += (' && (' + args.tssIf.join(' || ') + ')');\n\t\t} else {\n\t\t\tcode.condition = args.tssIf.join(' || ');\n\t\t}\n\t}\n\n\t// pass relevant conditional information in state\n\tif (code.condition) {\n\t\tif (state.condition) {\n\t\t\tstate.condition += '&&' + code.condition;\n\t\t} else {\n\t\t\tstate.condition = code.condition;\n\t\t}\n\t}\n\n\t// Determine which parser to use for this node\n\tvar parsersDir = path.join(alloyRoot, 'commands', 'compile', 'parsers');\n\tvar parserRequire = 'default';\n\tif (_.contains(fs.readdirSync(parsersDir), args.fullname + '.js')) {\n\t\tparserRequire = args.fullname + '.js';\n\t}\n\n\t// Execute the appropriate tag parser and append code\n\tvar isLocal = state.local;\n\t// [ALOY-787] keeping track of widget id\n\tvar widgetId = state.widgetId;\n\tstate = require('./parsers/' + parserRequire).parse(node, state) || { parent: {} };\n\tcode.content += state.code;\n\tstate.widgetId = widgetId;\n\n\t// Use local variable if given\n\tif (isLocal && state.parent) { args.symbol = state.parent.symbol || args.symbol; }\n\n\t// Use manually given args.symbol if present\n\tif (state.args) { args.symbol = state.args.symbol || args.symbol; }\n\n\t// add to list of top level views, if its top level\n\tif (isTopLevel) {\n\t\tif (state.isProxyProperty) {\n\t\t\tdelete state.isProxyProperty;\n\t\t\tcode.content += state.parent.symbol + ' && $.addProxyProperty(\"' + state.propertyName +\n\t\t\t\t'\", ' + state.parent.symbol + ');';\n\t\t} else {\n\t\t\tcode.content += args.symbol + ' && $.addTopLevelView(' + args.symbol + ');';\n\t\t}\n\t}\n\n\t// handle any model/collection code\n\tif (state.modelCode) {\n\t\tcode.pre += state.modelCode;\n\t\tdelete state.modelCode;\n\t}\n\n\t// handle any events from markup\n\tif (args.events && args.events.length > 0 &&\n\t\t!_.contains(CONST.SKIP_EVENT_HANDLING, args.fullname) &&\n\t\t!state.isViewTemplate) {\n\t\t// determine which function name to use for event handling:\n\t\t// * addEventListener() for Titanium proxies\n\t\t// * on() for everything else (controllers, models, collections)\n\t\tvar eventFunc = /^Alloy\\.(?:Collection|Model|Require|Widget)/.test(args.fullname) ?\n\t\t\t'on' : 'addEventListener';\n\n\t\t_.each(args.events, function(ev) {\n\t\t\tvar eventObj = {\n\t\t\t\t\tobj: isModelOrCollection ? state.args.symbol : args.symbol,\n\t\t\t\t\tev: ev.name,\n\t\t\t\t\tcb: ev.value,\n\t\t\t\t\tescapedCb: ev.value.replace(/'/g, \"\\\\'\"),\n\t\t\t\t\tfunc: eventFunc\n\t\t\t\t},\n\t\t\t\tpostCode;\n\n\t\t\tif (args.fullname === 'Alloy.Widget') {\n\t\t\t\teventObj.obj = state.controller;\n\t\t\t}\n\n\t\t\t// create templates for immediate and deferred event handler creation\n\t\t\tvar theDefer = _.template(\"__defers['<%= obj %>!<%= ev %>!<%= escapedCb %>']\", eventObj);\n\t\t\tvar theEvent;\n\t\t\tif (eventFunc === 'addEventListener') {\n\t\t\t\ttheEvent = _.template(\"$.addListener(<%= obj %>,'<%= ev %>',<%= cb %>)\", eventObj);\n\t\t\t} else {\n\t\t\t\ttheEvent = _.template(\"<%= obj %>.<%= func %>('<%= ev %>',<%= cb %>)\", eventObj);\n\t\t\t}\n\t\t\tvar deferTemplate = theDefer + ' && ' + theEvent + ';';\n\t\t\tvar immediateTemplate;\n\t\t\tif (/[\\.\\[]/.test(eventObj.cb)) {\n\t\t\t\timmediateTemplate = 'try{' + theEvent + ';}catch(e){' + theDefer + '=true;}';\n\t\t\t} else {\n\t\t\t\timmediateTemplate = '<%= cb %>?' + theEvent + ':' + theDefer + '=true;';\n\t\t\t}\n\n\t\t\t// add the generated code to the view code and post-controller code respectively\n\t\t\tcode.content += _.template(immediateTemplate, eventObj);\n\t\t\tpostCode = _.template(deferTemplate, eventObj);\n\t\t\texports.postCode += state.condition ? _.template(codeTemplate, {\n\t\t\t\tcondition: state.condition,\n\t\t\t\tcontent: postCode\n\t\t\t}) : postCode;\n\t\t});\n\t}\n\n\t// Continue parsing if necessary\n\tif (state.parent) {\n\t\tvar states = _.isArray(state.parent) ? state.parent : [state.parent];\n\t\t_.each(states, function(p) {\n\t\t\tvar parent = p.node;\n\t\t\tif (!parent) { return; }\n\t\t\tfor (var i = 0, l = parent.childNodes.length; i < l; i++) {\n\t\t\t\tvar newState = _.defaults({ parent: p }, state);\n\t\t\t\tif (node.hasAttribute('formFactor') || state.parentFormFactor) {\n\t\t\t\t\t// propagate the form factor down through the hierarchy\n\t\t\t\t\tnewState.parentFormFactor = (node.getAttribute('formFactor') || state.parentFormFactor);\n\t\t\t\t}\n\t\t\t\tcode.content += exports.generateNode(parent.childNodes.item(i), newState);\n\t\t\t}\n\t\t});\n\t}\n\n\tif (!isModelOrCollection) {\n\t\treturn code.condition ? _.template(codeTemplate, code) : code.content;\n\t} else {\n\t\treturn {\n\t\t\tcontent: code.condition ? _.template(codeTemplate, code) : code.content,\n\t\t\tpre: code.condition ? _.template(codeTemplate, {content:code.pre}) : code.pre\n\t\t};\n\t}\n};\n\nexports.expandRequireNode = function(requireNode, doRecursive) {\n\tvar cloneNode = requireNode.cloneNode(true);\n\n\tfunction getViewRequirePath(node) {\n\t\tvar regex = new RegExp('\\\\.' + CONST.FILE_EXT.VIEW + '$'),\n\t\t\tsrc = node.getAttribute('src'),\n\t\t\tfullname = exports.getNodeFullname(node),\n\t\t\tname = node.getAttribute('name') || CONST.NAME_WIDGET_DEFAULT,\n\t\t\ttype = fullname === 'Alloy.Widget' ? 'widget' : node.getAttribute('type') || CONST.REQUIRE_TYPE_DEFAULT,\n\t\t\tfullpaths = [];\n\n\t\tvar platform;\n\t\tif (compilerConfig && compilerConfig.alloyConfig && compilerConfig.alloyConfig.platform) {\n\t\t\tplatform = compilerConfig.alloyConfig.platform;\n\t\t}\n\n\t\t// Must be a view, with a valid src, in a <Require> element\n\t\tif (!src) {\n\t\t\treturn null;\n\t\t} else if (fullname === 'Alloy.Require' && type === 'view') {\n\t\t\tif (platform) { fullpaths.push(path.join(compilerConfig.dir.views, platform, src)); }\n\t\t\tfullpaths.push(path.join(compilerConfig.dir.views, src));\n\t\t} else if (fullname === 'Alloy.Widget' ||\n\t\t\t(fullname === 'Alloy.Require' && type === 'widget')) {\n\t\t\tU.getWidgetDirectories(compilerConfig.dir.home).forEach(function(wDir) {\n\t\t\t\tif (wDir.manifest.id === src) {\n\t\t\t\t\tif (platform) {\n\t\t\t\t\t\tfullpaths.push(path.join(wDir.dir, CONST.DIR.VIEW, platform, name));\n\t\t\t\t\t}\n\t\t\t\t\tfullpaths.push(path.join(wDir.dir, CONST.DIR.VIEW, name));\n\t\t\t\t}\n\t\t\t});\n\t\t} else {\n\t\t\treturn null;\n\t\t}\n\n\t\t// check the extensions on the paths to check\n\t\tvar found = false;\n\t\tvar fullpath;\n\t\tfor (var i = 0; i < fullpaths.length; i++) {\n\t\t\tfullpath = fullpaths[i];\n\t\t\tfullpath += regex.test(fullpath) ? '' :  '.' + CONST.FILE_EXT.VIEW;\n\t\t\tif (fs.existsSync(fullpath)) {\n\t\t\t\tfound = true;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\n\t\t// abort if there's no view to be found\n\t\tif (!found) {\n\t\t\tU.die([\n\t\t\t\ttype + ' \"' + src + '\" ' + (type === 'widget' ? 'view \"' + name + '\" ' : '') +\n\t\t\t\t\t'does not exist.',\n\t\t\t\t'The following paths were inspected:'\n\t\t\t].concat(fullpaths));\n\t\t}\n\n\t\treturn fullpath;\n\t}\n\n\t//create function, it expects 2 values.\n\tfunction insertAfter(newElement, targetElement) {\n\t\t//target is what you want it to go after. Look for this elements parent.\n\t\tvar parent = targetElement.parentNode;\n\n\t\t//if the parents lastchild is the targetElement...\n\t\tif (parent.lastchild == targetElement) {\n\t\t\t//add the newElement after the target element.\n\t\t\tparent.appendChild(newElement);\n\t\t} else {\n\t\t\t// else the target has siblings, insert the new element between the target and it's next sibling.\n\t\t\tparent.insertBefore(newElement, targetElement.nextSibling);\n\t\t}\n\t}\n\n\tfunction processRequire(node, isFirst) {\n\t\t// make sure we have a valid required view and get its path\n\t\tvar fullpath = getViewRequirePath(node);\n\t\tif (fullpath === null) {\n\t\t\treturn;\n\t\t}\n\n\t\t// re-assemble XML with required elements\n\t\tif (isFirst) {\n\t\t\tcloneNode = U.XML.getAlloyFromFile(fullpath);\n\t\t} else {\n\t\t\tvar newDocRoot = U.XML.getAlloyFromFile(fullpath);\n\t\t\t_.each(U.XML.getElementsFromNodes(newDocRoot.childNodes), function(n) {\n\t\t\t\tinsertAfter(n, node);\n\t\t\t});\n\n\t\t\tnode.parentNode.removeChild(node);\n\t\t}\n\t}\n\n\t// Expand the <Require>, recursively if specified\n\tif (getViewRequirePath(cloneNode) !== null) {\n\t\tprocessRequire(cloneNode, true);\n\t\twhile (doRecursive) {\n\t\t\tvar reqs = cloneNode.getElementsByTagName('Require');\n\t\t\tvar widgets = cloneNode.getElementsByTagName('Widget');\n\t\t\tvar all = [];\n\n\t\t\t// condense node lists into a single array\n\t\t\t_.each(reqs, function(req) {\n\t\t\t\tall.push(req);\n\t\t\t});\n\t\t\t_.each(widgets, function(widget) {\n\t\t\t\tall.push(widget);\n\t\t\t});\n\n\t\t\t// find all the valid widgets/requires\n\t\t\tvar viewRequires = _.filter(reqs, function(req) {\n\t\t\t\treturn getViewRequirePath(req) !== null;\n\t\t\t});\n\n\t\t\tif (viewRequires.length === 0) {\n\t\t\t\tbreak;\n\t\t\t}\n\n\t\t\t// TODO: https://jira.appcelerator.org/browse/ALOY-256\n\t\t\t//_.each(viewRequires, processRequire);\n\t\t\tprocessRequire(viewRequires[0]);\n\t\t}\n\t}\n\n\treturn cloneNode;\n};\n\nexports.inspectRequireNode = function(node) {\n\tvar newNode = exports.expandRequireNode(node, true);\n\tvar children = U.XML.getElementsFromNodes(newNode.childNodes);\n\tvar names = [];\n\n\t_.each(children, function(c) {\n\t\tvar args = exports.getParserArgs(c);\n\n\t\t// skip model elements when inspecting nodes for <Require>\n\t\tif (_.contains(CONST.MODEL_ELEMENTS, args.fullname)) {\n\t\t\tnewNode.removeChild(c);\n\t\t\treturn;\n\t\t}\n\n\t\tnames.push(args.fullname);\n\t});\n\n\treturn {\n\t\tchildren: U.XML.getElementsFromNodes(newNode.childNodes),\n\t\tlength: names.length,\n\t\tnames: names\n\t};\n};\n\nexports.copyWidgetResources = function(resources, resourceDir, widgetId, opts) {\n\n\topts = opts || {};\n\tvar platform;\n\tif (compilerConfig && compilerConfig.alloyConfig && compilerConfig.alloyConfig.platform) {\n\t\tplatform = compilerConfig.alloyConfig.platform;\n\t}\n\n\t_.each(resources, function(dir) {\n\t\tif (!path.existsSync(dir)) { return; }\n\t\tlogger.trace('WIDGET_SRC=' + path.relative(compilerConfig.dir.project, dir));\n\t\tvar files = wrench.readdirSyncRecursive(dir);\n\t\t_.each(files, function(file) {\n\t\t\tvar source = path.join(dir, file);\n\n\t\t\t// make sure the file exists and that it is not filtered\n\t\t\tif (!fs.existsSync(source) ||\n\t\t\t\t(opts.filter && opts.filter.test(file)) ||\n\t\t\t\t(opts.exceptions && _.contains(opts.exceptions, file))) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (fs.statSync(source).isFile()) {\n\t\t\t\tvar dirname = path.dirname(file);\n\t\t\t\tvar parts = dirname.split(/[\\/\\\\]/);\n\t\t\t\tif (opts.titaniumFolder && parts[0] === opts.titaniumFolder) {\n\t\t\t\t\tdirname = parts.slice(1).join('/');\n\t\t\t\t}\n\n\t\t\t\tvar destDir = path.join(resourceDir, dirname, widgetId);\n\t\t\t\tvar dest = path.join(destDir, path.basename(file));\n\t\t\t\tif (!path.existsSync(destDir)) {\n\t\t\t\t\twrench.mkdirSyncRecursive(destDir, 0755);\n\t\t\t\t}\n\n\t\t\t\tlogger.trace('Copying ' + file.yellow + ' --> ' +\n\t\t\t\t\tpath.relative(compilerConfig.dir.project, dest).yellow + '...');\n\t\t\t\tU.copyFileSync(source, dest);\n\t\t\t}\n\t\t});\n\n\t\t// [ALOY-1002] Remove ios folder copied from widget\n\t\tvar iosDir = path.join(resourceDir, 'ios');\n\t\tif (fs.existsSync(iosDir)) {\n\t\t\twrench.rmdirSyncRecursive(iosDir);\n\t\t}\n\t\tlogger.trace(' ');\n\t});\n\n\tif (opts.theme) {\n\t\t// if this widget has been themed, copy its theme assets atop the stock ones\n\t\tvar widgetThemeDir = path.join(compilerConfig.dir.project, 'app', 'themes', opts.theme, 'widgets', widgetId);\n\t\tif (fs.existsSync(widgetThemeDir)) {\n\t\t\tlogger.trace('Processing themed widgets');\n\t\t\tvar widgetAssetSourceDir = path.join(widgetThemeDir, 'assets');\n\t\t\tvar widgetAssetTargetDir = path.join(resourceDir, widgetId);\n\t\t\tif (fs.existsSync(widgetAssetSourceDir)) {\n\t\t\t\twrench.copyDirSyncRecursive(widgetAssetSourceDir, widgetAssetTargetDir, {preserve: true});\n\t\t\t}\n\t\t\t// platform-specific assets from the widget must override those of the theme\n\t\t\tif (platform && path.existsSync(path.join(resources[0], platform))) {\n\t\t\t\twrench.copyDirSyncRecursive(path.join(resources[0], platform), widgetAssetTargetDir, {preserve: true});\n\t\t\t}\n\t\t\t// however platform-specific theme assets must override the platform assets from the widget\n\t\t\tif (platform && path.existsSync(path.join(widgetAssetSourceDir, platform))) {\n\t\t\t\tlogger.trace('Processing platform-specific theme assets for the ' + widgetId + ' widget');\n\t\t\t\twidgetAssetSourceDir = path.join(widgetAssetSourceDir, platform);\n\t\t\t\twrench.copyDirSyncRecursive(widgetAssetSourceDir, widgetAssetTargetDir, {preserve: true});\n\t\t\t}\n\n\t\t\t// [ALOY-1002] Remove platform-specific folders copied from theme\n\t\t\tif (fs.existsSync(widgetAssetTargetDir)) {\n\t\t\t\tvar files = wrench.readdirSyncRecursive(widgetAssetTargetDir);\n\t\t\t\t_.each(files, function(file) {\n\t\t\t\t\tvar source = path.join(widgetAssetTargetDir, file);\n\t\t\t\t\tif (path.existsSync(source) && fs.statSync(source).isDirectory()) {\n\t\t\t\t\t\twrench.rmdirSyncRecursive(source);\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\t}\n};\n\nexports.mergeI18N = function mergeI18N(src, dest, opts) {\n\tvar serializer = new XMLSerializer();\n\topts || (opts = {});\n\n\t(function walk(src, dest) {\n\t\tif (!fs.existsSync(src)) return;\n\n\t\tfs.readdirSync(src).forEach(function (name) {\n\t\t\tvar srcFile = path.join(src, name);\n\t\t\tvar destFile = path.join(dest, name);\n\n\t\t\tif (!fs.existsSync(srcFile)) return;\n\n\t\t\tif (fs.statSync(srcFile).isDirectory()) {\n\t\t\t\tfs.existsSync(destFile) || wrench.mkdirSyncRecursive(destFile, 0755);\n\t\t\t\treturn walk(srcFile, destFile);\n\t\t\t}\n\n\t\t\tif (!fs.existsSync(destFile)) {\n\t\t\t\tlogger.debug('Writing ' + destFile.yellow);\n\t\t\t\treturn U.copyFileSync(srcFile, destFile);\n\t\t\t}\n\n\t\t\tif (!/\\.xml$/.test(srcFile)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// merge!\n\t\t\tvar existing = {};\n\t\t\tvar destXml = U.XML.parseFromFile(destFile);\n\t\t\tvar destDoc = destXml.documentElement;\n\t\t\tvar srcXml = U.XML.parseFromFile(srcFile);\n\t\t\tvar srcDoc = srcXml.documentElement;\n\n\t\t\tif (!destDoc) {\n\t\t\t\tU.die('Error processing \"' + destFile + '\"');\n\t\t\t}\n\n\t\t\tif (!srcDoc) {\n\t\t\t\tU.die('Error processing \"' + srcFile + '\"');\n\t\t\t}\n\n\t\t\t_.each(destDoc.getElementsByTagName('string'), function (node) {\n\t\t\t\tvar name = node.getAttribute('name');\n\t\t\t\texisting[name] = node;\n\t\t\t});\n\n\t\t\t_.each(srcDoc.getElementsByTagName('string'), function (node) {\n\t\t\t\tvar name = node.getAttribute('name');\n\t\t\t\tif (!existing.hasOwnProperty(name)) {\n\t\t\t\t\tdestDoc.appendChild(destXml.createTextNode('\\t'));\n\t\t\t\t\tdestDoc.appendChild(node);\n\t\t\t\t\tdestDoc.appendChild(destXml.createTextNode('\\n'));\n\t\t\t\t} else if (opts.override) {\n\t\t\t\t\tdestDoc.replaceChild(node, existing[name]);\n\t\t\t\t}\n\t\t\t});\n\n\t\t\tlogger.debug('Merging ' + srcFile.yellow + ' --> ' + destFile.yellow);\n\t\t\tfs.writeFileSync(destFile, serializer.serializeToString(destXml), 'utf8');\n\t\t});\n\t}(src, dest));\n};\n\nfunction updateImplicitNamspaces(platform) {\n\tswitch (platform) {\n\t\tcase 'android':\n\t\t\tbreak;\n\t\tcase 'ios':\n\t\t\tbreak;\n\t\tcase 'mobileweb':\n\t\t\tCONST.IMPLICIT_NAMESPACES.NavigationGroup = 'Ti.UI.MobileWeb';\n\t\t\tbreak;\n\t}\n}\n\nexports.createCompileConfig = function(inputPath, outputPath, alloyConfig, buildLog) {\n\tvar dirs = ['assets', 'config', 'controllers', 'lib', 'migrations', 'models', 'styles', 'themes', 'vendor', 'views', 'widgets'];\n\tvar libDirs = ['builtins', 'template'];\n\tvar resources = path.resolve(path.join(outputPath, 'Resources'));\n\n\tvar obj = {\n\t\talloyConfig: alloyConfig,\n\t\tdir: {\n\t\t\thome: path.resolve(inputPath),\n\t\t\tproject: path.resolve(outputPath),\n\t\t\tresources: resources,\n\t\t\tresourcesAlloy: path.join(resources, 'alloy')\n\t\t},\n\t\tbuildLog: buildLog\n\t};\n\n\t// create list of dirs\n\t_.each(dirs, function(dir) {\n\t\tobj.dir[dir] = path.resolve(path.join(inputPath, dir));\n\t});\n\t_.each(libDirs, function(dir) {\n\t\tobj.dir[dir] = path.resolve(path.join(alloyRoot, dir));\n\t});\n\n\t// ensure the generated directories exist\n\tU.ensureDir(obj.dir.resources);\n\n\t// process and normalize the config.json file\n\tvar configs = _.defaults(generateConfig(obj), {\n\t\t// sets the theme\n\t\ttheme: undefined,\n\n\t\t// are we going to generate sourcemaps?\n\t\tsourcemap: true,\n\n\t\t// are we enabling dynamic styling for all generated components?\n\t\tautoStyle: false,\n\n\t\t// the list of widget dependencies\n\t\tdependencies: {},\n\n\t\t// TODO: Include no adapters by default\n\t\tadapters: CONST.ADAPTERS\n\t});\n\n\t// normalize adapters\n\tif (!configs.adapters) {\n\t\tconfigs.adapters = [];\n\t} else if (!_.isArray(configs.adapters)) {\n\t\tconfigs.adapters = [configs.adapters];\n\t}\n\n\tlogger.debug(JSON.stringify(configs, null, '  ').split(os.EOL));\n\n\t// update implicit namespaces, if possible\n\tupdateImplicitNamspaces(alloyConfig.platform);\n\n\t// keep a copy of the config for this module\n\tcompilerConfig = _.extend(obj, configs);\n\n\treturn obj;\n};\n\nfunction generateConfig(obj) {\n\tvar buildLog = obj.buildLog;\n\tvar o = {};\n\tvar alloyConfig = obj.alloyConfig;\n\tvar platform = require('../../../platforms/' + alloyConfig.platform + '/index').titaniumFolder;\n\t//var defaultCfg = 'module.exports=' + JSON.stringify(o) + ';';\n\n\t// get the app and resources locations\n\tvar appCfg = path.join(obj.dir.home, 'config.' + CONST.FILE_EXT.CONFIG);\n\tvar resourcesBase = (function() {\n\t\tvar base = obj.dir.resources;\n\t\tif (platform) { base = path.join(base, platform); }\n\t\treturn path.join(base, 'alloy');\n\t})();\n\tvar resourcesCfg = path.join(resourcesBase, 'CFG.js');\n\n\t// parse config.json, if it exists\n\tif (path.existsSync(appCfg)) {\n\t\to = exports.parseConfig(appCfg, alloyConfig, o);\n\n\t\tif (o.theme) {\n\t\t\tvar themeCfg = path.join(obj.dir.home, 'themes', o.theme, 'config.' + CONST.FILE_EXT.CONFIG);\n\n\t\t\t// parse theme config.json, if it exists\n\t\t\tif (path.existsSync(themeCfg)) {\n\t\t\t\to = exports.parseConfig(themeCfg, alloyConfig, o);\n\t\t\t}\n\t\t}\n\t}\n\n\t// only regenerate the CFG.js when necessary\n\tvar hash = U.createHashFromString(JSON.stringify(o));\n\tif (buildLog.data.cfgHash && buildLog.data.cfgHash === hash && fs.existsSync(path.join(obj.dir.resources, 'alloy', 'CFG.js'))) {\n\t\t// use cached CFG.js file\n\t\tlogger.info(' [config.json] config.json unchanged, using cached config.json...');\n\t} else {\n\t\t// cached CFG.js is out of sync with config.json, regenerate and save\n\t\tlogger.info(' [config.json] regenerating CFG.js from config.json...');\n\t\tbuildLog.data.cfgHash = hash;\n\t\t// write out the config runtime module\n\t\twrench.mkdirSyncRecursive(resourcesBase, 0755);\n\n\t\t//logger.debug('Writing \"Resources/' + (platform ? platform + '/' : '') + 'alloy/CFG.js\"...');\n\t\tvar output = 'module.exports=' + JSON.stringify(o) + ';';\n\t\tfs.writeFileSync(resourcesCfg, output);\n\n\t\t// TODO: deal with TIMOB-14884\n\t\tvar baseFolder = path.join(obj.dir.resources, 'alloy');\n\t\tif (!fs.existsSync(baseFolder)) {\n\t\t\twrench.mkdirSyncRecursive(baseFolder, 0755);\n\t\t}\n\t\tfs.writeFileSync(path.join(baseFolder, 'CFG.js'), output);\n\t}\n\n\treturn o;\n}\n\nexports.parseConfig = function(file, alloyConfig, o) {\n\tvar j, distType;\n\ttry {\n\t\tj = jsonlint.parse(fs.readFileSync(file, 'utf8'));\n\t} catch (e) {\n\t\tU.die('Error processing \"config.' + CONST.FILE_EXT.CONFIG + '\"', e);\n\t}\n\n\t_.each(j, function(v, k) {\n\t\tif (!/^(?:env\\:|os\\:|dist\\:)/.test(k) && k !== 'global') {\n\t\t\tlogger.debug(k + ' = ' + JSON.stringify(v));\n\t\t\to[k] = v;\n\t\t}\n\t});\n\n\tif (alloyConfig) {\n\t\to = _.extend(o, j['global']);\n\t\to = _.extend(o, j['env:' + alloyConfig.deploytype]);\n\t\to = _.extend(o, j['os:' + alloyConfig.platform]);\n\t\to = _.extend(o, j['env:' + alloyConfig.deploytype + ' os:' + alloyConfig.platform]);\n\t\to = _.extend(o, j['os:' + alloyConfig.platform + ' env:' + alloyConfig.deploytype]);\n\n\t\tif (alloyConfig.deploytype === 'production' && alloyConfig.target) {\n\t\t\tdistType = _.find(CONST.DIST_TYPES, function (obj) { return obj.value.indexOf(alloyConfig.target) !== -1; });\n\t\t\tif (distType) {\n\t\t\t\tdistType = distType.key.toLowerCase().replace('_', ':');\n\t\t\t\to = _.extend(o, j[distType]);\n\t\t\t\to = _.extend(o, j['os:' + alloyConfig.platform + ' ' + distType]);\n\t\t\t}\n\t\t}\n\t}\n\n\treturn o;\n};\n\nexports.loadController = function(file) {\n\tvar code = {\n\t\t\tparentControllerName: '',\n\t\t\tcontroller: '',\n\t\t\tpre: ''\n\t\t},\n\t\tcontents;\n\n\t// Read the controller file\n\ttry {\n\t\tif (!path.existsSync(file)) {\n\t\t\treturn code;\n\t\t}\n\t\tcontents = fs.readFileSync(file, 'utf8');\n\t} catch (e) {\n\t\tU.die('Error reading controller file \"' + file + '\".', e);\n\t}\n\n\t// get the base controller for this controller\n\tcode.controller = contents;\n\tcode.parentControllerName = astController.getBaseController(contents, file);\n\n\treturn code;\n};\n\nexports.validateNodeName = function(node, names) {\n\tvar fullname = exports.getNodeFullname(node);\n\tvar ret = null;\n\tif (!_.isArray(names)) { names = [names]; }\n\n\t// Is the node name in the given list of valid names?\n\tret = _.find(names, function(name) { return name === fullname; });\n\tif (ret) { return ret; }\n\n\t// Is it an Alloy.Require?\n\tif (fullname === 'Alloy.Require' || fullname === 'Alloy.Widget') {\n\t\tvar inspect = exports.inspectRequireNode(node);\n\t\tret = _.find(inspect.children, function(n) {\n\t\t\treturn _.contains(names, exports.getNodeFullname(n));\n\t\t});\n\t\tif (ret) {\n\t\t\treturn exports.getNodeFullname(ret);\n\t\t}\n\t}\n\n\treturn null;\n};\n\nexports.generateCollectionBindingTemplate = function(args) {\n\tvar code = '';\n\n\t// Determine the collection variable to use\n\tvar obj = { name: args[CONST.BIND_COLLECTION] };\n\tvar col = _.template((exports.currentManifest ? CONST.WIDGET_OBJECT : 'Alloy') + \".Collections['<%= name %>'] || <%= name %>\", obj);\n\tvar colVar = exports.generateUniqueId();\n\n\t// Create the code for the filter and transform functions\n\tvar where = args[CONST.BIND_WHERE];\n\tvar transform = args[CONST.BIND_TRANSFORM];\n\tvar whereCode = where ? where + '(' + colVar + ')' : colVar + '.models';\n\tvar transformCode = transform ? transform + '(<%= localModel %>)' : '_.isFunction(<%= localModel %>.transform)?<%= localModel %>.transform():<%= localModel %>.toJSON()';\n\tvar handlerFunc = args[CONST.BIND_FUNCTION] || exports.generateUniqueId();\n\tif (args.parentFormFactor) {\n\t\tif (!exports.dataFunctionNames[handlerFunc]) {\n\t\t\texports.dataFunctionNames[handlerFunc] = [];\n\t\t}\n\t\texports.dataFunctionNames[handlerFunc].push(args.parentFormFactor);\n\t\t// append the form factor for the code below\n\t\thandlerFunc += U.ucfirst(args.parentFormFactor);\n\t}\n\t// construct code template\n\tcode += 'var ' + colVar + '=' + col + ';';\n\tcode += 'function ' + handlerFunc + '(e) {';\n\tcode += '   if (e && e.fromAdapter) { return; }';\n\tcode += '   var opts = ' + handlerFunc + '.opts || {};';\n\tcode += '\tvar models = ' + whereCode + ';';\n\tcode += '\tvar len = models.length;';\n\tcode += '<%= pre %>';\n\tcode += '\tfor (var i = 0; i < len; i++) {';\n\tcode += '\t\tvar <%= localModel %> = models[i];';\n\tif (!args.isDataBoundMap) {\n\t\tcode += '\t\t<%= localModel %>.' + CONST.BIND_TRANSFORM_VAR + ' = ' + transformCode + ';';\n\t} else {\n\t\t// because (ti.map).annotations[] doesn't accept an array of anonymous objects\n\t\t// we convert them to actual Annotations before pushing them to the array\n\t\tcode += \"\t\t<%= annotationArray %>.push(require('ti.map').createAnnotation(\" + transformCode + '));';\n\t}\n\tcode += '<%= items %>';\n\tcode += '\t}';\n\tcode += '<%= post %>';\n\tcode += '};';\n\tcode += colVar + \".on('\" + CONST.COLLECTION_BINDING_EVENTS + \"',\" + handlerFunc + ');';\n\n\texports.destroyCode += colVar + ' && ' + ((args.parentFormFactor) ? 'Alloy.is' + U.ucfirst(args.parentFormFactor) + ' && ' : '' ) +\n\t\tcolVar + \".off('\" + CONST.COLLECTION_BINDING_EVENTS + \"',\" + handlerFunc + ');';\n\n\treturn code;\n};\n","/home/travis/build/npmtest/node-npmtest-alloy/node_modules/alloy/Alloy/commands/compile/ast/controller.js":"var U = require('../../../utils'),\n\tuglifyjs = require('uglify-js');\n\nexports.getBaseController = function(code, file) {\n\tvar baseController = '';\n\n\ttry {\n\t\tvar ast = uglifyjs.parse(code);\n\t\tast.walk(new uglifyjs.TreeWalker(function(node) {\n\t\t\tif (node instanceof uglifyjs.AST_Assign) {\n\t\t\t\tvar left = node.left.print_to_string();\n\t\t\t\tif (left === 'exports.baseController' ||\n\t\t\t\t\tleft === 'exports[\"baseController\"]' ||\n\t\t\t\t\tleft === \"exports['baseController']\") {\n\t\t\t\t\tbaseController = node.right.print_to_string();\n\t\t\t\t}\n\t\t\t}\n\t\t}));\n\t} catch (e) {\n\t\tU.die('Error generating AST for \"' + file + '\"', e);\n\t}\n\n\treturn baseController;\n};","/home/travis/build/npmtest/node-npmtest-alloy/node_modules/alloy/Alloy/commands/compile/optimizer.js":"/**\n * Code in this file will attempt to optimize generated code so it's more compact\n * and executes faster, better, etc.\n */\nvar uglifyjs = require('uglify-js'),\n\tpath = require('path'),\n\tfs = require('fs'),\n\t_ = require('../../lib/alloy/underscore')._;\n\nvar JSON_NULL = JSON.parse('null');\n\nfunction dotCheck(node, name) {\n\treturn node instanceof uglifyjs.AST_Dot && node.property === name;\n}\n\nfunction subCheck(node, name) {\n\treturn node instanceof uglifyjs.AST_Sub && node.property.value === name;\n}\n\nfunction dotSubCheck(node, name) {\n\treturn dotCheck(node, name) || subCheck(node, name);\n}\n\n// Optimize Titanium namespaces with static strings where possible\nexports.optimize = function(ast, defines, fn) {\n\t//var platform = {};\n\tvar theKey;\n\t_.find(defines, function(value, key) {\n\t\tvar ret = key.indexOf('OS_') === 0 && value;\n\t\tif (ret) { theKey = key; }\n\t\treturn ret;\n\t});\n\tif (!theKey) { return ast; }\n\n\t// make sure the platform require includes\n\tvar platformString = theKey.substring(3).toLowerCase();\n\tvar platformPath = path.join(__dirname, '..', '..', '..', 'platforms', platformString, 'index');\n\tif (!fs.existsSync(platformPath + '.js')) { return ast; }\n\n\t// create, transform, and validate the platform object\n\tvar platform = require(platformPath);\n\tif (!_.isString(platform.name)) { platform.name = undefined; }\n\tif (!_.isString(platform.osname)) { platform.osname = undefined; }\n\tif (!platform.osname && !platform.name) { return ast; }\n\n\t// Walk tree transformer changing (Ti|Titanium).Platform.(osname|name)\n\t// into static strings where possible. This will allow the following\n\t// compression step to reduce the code further.\n\tvar transformer = new uglifyjs.TreeTransformer(function(node, descend) {\n\t\tvar convert = false;\n\t\tif (dotSubCheck(node, 'name') || dotSubCheck(node, 'osname')) {\n\t\t\tdescend(node, new uglifyjs.TreeTransformer(function(node, descend) {\n\t\t\t\tif (dotSubCheck(node, 'Platform')) {\n\t\t\t\t\tdescend(node, new uglifyjs.TreeTransformer(function(node) {\n\t\t\t\t\t\tif (node instanceof uglifyjs.AST_SymbolRef &&\n\t\t\t\t\t\t\t(node.name === 'Titanium' || node.name === 'Ti')) {\n\t\t\t\t\t\t\tconvert = true;\n\t\t\t\t\t\t}\n\t\t\t\t\t\treturn node;\n\t\t\t\t\t}));\n\t\t\t\t}\n\t\t\t\treturn node;\n\t\t\t}));\n\t\t\tif (convert) {\n\t\t\t\tvar value = node instanceof uglifyjs.AST_Dot ? node.property : node.property.value;\n\t\t\t\tif (platform[value]) {\n\t\t\t\t\treturn new uglifyjs.AST_String({\n\t\t\t\t\t\tstart: node.start,\n\t\t\t\t\t\tend: node.end,\n\t\t\t\t\t\tvalue: platform[value]\n\t\t\t\t\t});\n\t\t\t\t} else {\n\t\t\t\t\treturn node;\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn node;\n\t\t}\n\t});\n\treturn ast.transform(transformer);\n};\n\n// strips null and undefined values out of Alloy styles\nexports.optimizeStyle = function(styleList) {\n\tfor (var style in styleList) {\n\t\tfor (var key in styleList[style]) {\n\t\t\tvar v = styleList[style][key];\n\t\t\tif (v == JSON_NULL || typeof(v) === 'undefined' || typeof(v) === 'null') {\n\t\t\t\tdelete styleList[style][key];\n\t\t\t}\n\t\t}\n\t}\n};\n","/home/travis/build/npmtest/node-npmtest-alloy/node_modules/alloy/Alloy/commands/compile/BuildLog.js":"var fs = require('fs'),\n\tpath = require('path'),\n\twrench = require('wrench'),\n\tCONST = require('../../common/constants'),\n\tlogger = require('../../logger');\n\nvar dir, file, projectPath;\n\nfunction BuildLog(_projectPath) {\n\t// make/reference singleton instance\n\tif (BuildLog.instance) {\n\t\treturn BuildLog.instance;\n\t}\n\tBuildLog.instance = this;\n\n\t// set \"private\" variables\n\tprojectPath = _projectPath;\n\tdir = path.join(projectPath, CONST.DIR.BUILD);\n\tfile = path.join(dir, 'build.json');\n\n\t// expose data object\n\tthis.isNew = true;\n\tthis.data = {};\n\n\t// make sure the alloy build folder exists\n\tif (!fs.existsSync(dir)) {\n\t\twrench.mkdirSyncRecursive(dir, 0755);\n\t}\n\n\t// load it up\n\tthis.read();\n}\n\nBuildLog.prototype.read = function() {\n\tif (!fs.existsSync(file)) {\n\t\tthis.isNew = true;\n\t\tthis.data = {};\n\t} else {\n\t\tthis.isNew = false;\n\t\ttry {\n\t\t\tthis.data = JSON.parse(fs.readFileSync(file, 'utf8'));\n\t\t} catch (e) {\n\t\t\tlogger.warn('Build log at \"' + path.relative(projectPath, file) +\n\t\t\t\t'\" is corrupt, creating a new one...');\n\t\t\tthis.data = {};\n\t\t}\n\t}\n};\n\nBuildLog.prototype.write = function() {\n\ttry {\n\t\tfs.writeFileSync(file, JSON.stringify(this.data));\n\t} catch (e) {\n\t\tlogger.warn('Unable to write build log to \"' + path.relative(projectPath, file) + '\"');\n\t}\n};\n\nmodule.exports = BuildLog;","/home/travis/build/npmtest/node-npmtest-alloy/node_modules/alloy/Alloy/commands/compile/CompilerMakeFile.js":"var logger = require('../../logger'),\n\tcolors = require('colors');\n\nfunction CompilerMakeFile() {\n\tvar handlers = {};\n\n\tthis.require = require;\n\tthis.process = process;\n\n\tthis.task = function(event, fn) {\n\t\tlogger.debug('adding task: ' + event.yellow);\n\t\thandlers[event] = fn;\n\t};\n\n\tthis.trigger = function(event, config) {\n\t\tlogger.debug('compile:trigger-> ' + event.yellow);\n\t\tvar fn = handlers[event];\n\t\tif (fn) {\n\t\t\treturn fn(config, logger);\n\t\t}\n\t\treturn null;\n\t};\n\n\treturn this;\n}\n\nmodule.exports = CompilerMakeFile;","/home/travis/build/npmtest/node-npmtest-alloy/node_modules/alloy/Alloy/commands/compile/Orphanage.js":"/*\n\tSpeeds compilation by not re-copying, re-generating, or deleting some files\n\ton subsequent compiles. For example, the base client-side lib, alloy.js, is\n\tnot deleted and recopied after the initial compile.\n*/\nvar fs = require('fs'),\n\tpath = require('path'),\n\twrench = require('wrench'),\n\tplatforms = require('../../../platforms/index'),\n\tlogger = require('../../logger'),\n\tCONST = require('../../common/constants'),\n\tU = require('../../utils'),\n\t_ = require('../../lib/alloy/underscore');\n\nvar ALLOY_ROOT = path.join(__dirname, '..', '..');\n\nvar dirs, platform, titaniumFolder, theme, adapters;\nvar widgetsInUse = {};\n\nfunction Orphanage(projectDir, _platform, opts) {\n\topts = opts || {};\n\tplatform = _platform;\n\ttitaniumFolder = platforms[platform].titaniumFolder;\n\ttheme = opts.theme;\n\tadapters = opts.adapters || [];\n\n\t// gather directories to be used throughout Orphanage\n\tvar resourcesDir = path.join(projectDir, CONST.RESOURCES_DIR);\n\tdirs = {\n\t\tapp: path.join(projectDir, CONST.ALLOY_DIR),\n\t\tresources: path.join(projectDir, CONST.RESOURCES_DIR),\n\t\truntime: path.join(resourcesDir, platforms[platform].titaniumFolder, CONST.ALLOY_RUNTIME_DIR)\n\t};\n\n\t// get widgets in use\n\t_.each(U.getWidgetDirectories(dirs.app) || [], function(wObj) {\n\t\twidgetsInUse[path.basename(wObj.dir)] = wObj.dir;\n\t});\n}\nmodule.exports = Orphanage;\n\nOrphanage.prototype.clean = function() {\n\tvar that = this;\n\n\t// Clean the base app folder\n\tthis.removeAll();\n\n\t// get rid of unused adapters\n\tlogger.debug('Removing orphaned sync adapters...');\n\tthis.removeAdapters();\n\n\t// Clean out each widget\n\tvar widgets = path.join(dirs.runtime, CONST.DIR.WIDGET);\n\tif (fs.existsSync(widgets)) {\n\t\t_.each(fs.readdirSync(widgets), function(file) {\n\t\t\tif (!widgetsInUse[file]) {\n\t\t\t\tthat.removeAll({ widgetId: file });\n\t\t\t}\n\t\t});\n\t}\n\n\t// assets must be cleaned up last\n\tlogger.debug('Removing orphaned assets and libs...');\n\tthis.removeAssets();\n};\n\n// TODO: handle specs\nOrphanage.prototype.removeAll = function(opts) {\n\topts = opts || {};\n\n\tif (!opts.widgetId) {\n\t\tlogger.debug('Removing orphaned controllers ...');\n\t\tthis.removeControllers(opts);\n\n\t\tlogger.debug('Removing orphaned models ...');\n\t\tthis.removeModels(opts);\n\n\t\tlogger.debug('Removing orphaned styles ...');\n\t\tthis.removeStyles(opts);\n\t} else {\n\t\tthis.removeWidget(opts);\n\t}\n};\n\nOrphanage.prototype.removeAdapters = function(opts) {\n\topts = _.clone(opts || {});\n\tvar paths = [\n\t\tpath.join('alloy', 'sync'),\n\t\tpath.join(titaniumFolder, 'alloy', 'sync')\n\t];\n\n\t_.each(paths, function(p) {\n\t\tvar adapterDir = path.join(dirs.resources, p);\n\t\tif (!fs.existsSync(adapterDir)) {\n\t\t\treturn;\n\t\t}\n\n\t\t_.each(fs.readdirSync(adapterDir), function(adapterFile) {\n\t\t\tvar fullpath = path.join(adapterDir, adapterFile);\n\t\t\tvar adapterName = adapterFile.replace(/\\.js$/, '');\n\t\t\tif (!_.contains(adapters, adapterName) && fs.statSync(fullpath).isFile()) {\n\t\t\t\tlogger.trace('* ' + path.join(p, adapterFile));\n\t\t\t\tfs.unlinkSync(fullpath);\n\t\t\t}\n\t\t});\n\t});\n};\n\nOrphanage.prototype.removeControllers = function(opts) {\n\topts = _.clone(opts || {});\n\tremove(_.extend(opts, {\n\t\tfolder: CONST.DIR.CONTROLLER,\n\t\ttypes: ['CONTROLLER', 'VIEW'],\n\t\texceptions: ['BaseController.js']\n\t}));\n};\n\nOrphanage.prototype.removeModels = function(opts) {\n\topts = _.clone(opts || {});\n\tremove(_.extend(opts, {\n\t\tfolder: CONST.DIR.MODEL,\n\t\ttypes: 'MODEL'\n\t}));\n};\n\nOrphanage.prototype.removeStyles = function(opts) {\n\topts = _.clone(opts || {});\n\tremove(_.extend(opts, {\n\t\tfolder: CONST.DIR.STYLE,\n\t\ttypes: ['CONTROLLER', 'VIEW']\n\t}));\n};\n\nOrphanage.prototype.removeAssets = function() {\n\tvar baseLocations = [\n\t\tCONST.DIR.ASSETS,\n\t\tpath.join(CONST.DIR.ASSETS, platforms[platform].titaniumFolder),\n\t\tCONST.DIR.LIB,\n\t\tCONST.DIR.VENDOR\n\t];\n\tvar locations = [];\n\n\t// Add the base locations\n\t_.each(baseLocations, function(loc) {\n\t\tvar newLoc = path.join(dirs.app, loc);\n\t\tif (fs.existsSync(newLoc)) {\n\t\t\tlocations.push(newLoc);\n\t\t}\n\t});\n\n\t// Make sure we check the widgets paths as well\n\t_.each(widgetsInUse, function(wDir, wId) {\n\t\t_.each(baseLocations, function(loc) {\n\t\t\tvar widgetLoc = path.join(wDir, loc);\n\t\t\tif (fs.existsSync(widgetLoc)) {\n\t\t\t\tlocations.push(widgetLoc);\n\t\t\t}\n\t\t});\n\t});\n\n\t// add theme locations, if necessary\n\tif (theme) {\n\t\tlocations.push(\n\t\t\tpath.join(dirs.app, CONST.DIR.THEME, theme, CONST.DIR.ASSETS),\n\t\t\tpath.join(dirs.app, CONST.DIR.THEME, theme, CONST.DIR.ASSETS, platform)\n\t\t);\n\t}\n\n\t// files to skip\n\tvar exceptions = [\n\t\t'app.js',\n\t\t'alloy.js',\n\t\t'alloy',\n\t\t'alloy/*'\n\t];\n\n\t// check the current platform as well\n\t_.each(_.clone(exceptions), function(ex) {\n\t\texceptions.push(path.join(platforms[platform].titaniumFolder, ex));\n\t});\n\n\t// don't worry about cleaning platforms that aren't the current target\n\t_.each(_.without(_.pluck(platforms, 'titaniumFolder'), platforms[platform].titaniumFolder),\n\t\tfunction(tf) {\n\t\t\texceptions.unshift(tf + '*');\n\t\t}\n\t);\n\n\tremove({\n\t\truntimePath: dirs.resources,\n\t\tlocations: locations,\n\t\texceptions: exceptions\n\t});\n};\n\nOrphanage.prototype.removeWidget = function(opts) {\n\tif (opts.widgetId === '.DS_Store') { return; }\n\topts.runtimePath = path.join(dirs.runtime, CONST.DIR.WIDGET, opts.widgetId);\n\tremove(opts);\n};\n\n// private function\nfunction extension(file, newExt) {\n\treturn file.replace(/[^\\.]+$/, newExt);\n}\n\nfunction getChecks(file, fullpath, opts) {\n\topts = opts || {};\n\tvar isDir = fs.statSync(fullpath).isDirectory();\n\tvar checks = [];\n\n\t// Check all the app folder file types\n\tif (opts.types) {\n\t\t_.each(opts.types, function(type) {\n\t\t\tvar dir = CONST.DIR[type];\n\n\t\t\t// use type-specific extension if it's not a directory\n\t\t\tif (!isDir) {\n\t\t\t\tfile = extension(file, CONST.FILE_EXT[type]);\n\t\t\t}\n\n\t\t\t// use widget path, if it's a widget\n\t\t\tif (opts.widgetId) {\n\t\t\t\tdir = path.join(CONST.DIR.WIDGET, opts.widgetId, dir);\n\t\t\t}\n\n\t\t\t// create the file checks\n\t\t\tchecks.push(\n\t\t\t\tpath.join(dirs.app, dir, file),\n\t\t\t\tpath.join(dirs.app, dir, platform, file)\n\t\t\t);\n\t\t});\n\n\t// use explicit full location paths\n\t} else if (opts.locations) {\n\t\t// strip off the platform if present\n\t\tvar parts = file.split(/[\\\\\\/]/);\n\t\tif (parts[0] === titaniumFolder) {\n\t\t\tparts.shift();\n\t\t}\n\t\tfile = parts.join('/');\n\n\t\t// Is it a widget file?\n\t\tvar keys = _.keys(widgetsInUse);\n\t\tfor (var i = 0; i < keys.length; i++) {\n\t\t\tvar widgetId = keys[i];\n\n\t\t\t// did we find the widget root path?\n\t\t\tif (parts.length === 1 && parts[0] === widgetId) {\n\t\t\t\treturn null;\n\t\t\t}\n\n\t\t\t// is this a widget asset?\n\t\t\tif (_.contains(parts, widgetId)) {\n\t\t\t\tfile = _.without(parts, widgetId).join('/');\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\n\t\t// No widget? Just use the given locations.\n\t\t_.each(opts.locations, function(loc) {\n\t\t\tchecks.push(path.join(loc, file));\n\t\t});\n\t}\n\n\treturn checks;\n}\n\nfunction isException(file, exceptions) {\n\tvar ex, exs = [];\n\texceptions = exceptions || [];\n\n\tfor (var i = 0; i < exceptions.length; i++) {\n\t\tex = exceptions[i];\n\t\texs.push(ex);\n\n\t\t// handle folder wildcards\n\t\tif (ex.charAt(ex.length - 1) === '*') {\n\t\t\tfor (var j = 0; j < exs.length; j++) {\n\t\t\t\tvar newEx = exs[i].substr(0, exs[i].length - 2);\n\n\t\t\t\t// see if the file starts with the wildcard\n\t\t\t\tif (file.length >= newEx.length && file.substr(0, newEx.length) === newEx) {\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t}\n\n\t\t// straight up comparison if there's no wildcards\n\t\t} else if (_.contains(exs, file)) {\n\t\t\treturn true;\n\t\t}\n\t}\n\n\treturn false;\n}\n\nfunction remove(opts) {\n\topts = opts || {};\n\tvar folder = opts.folder;\n\tvar exceptions = opts.exceptions || [];\n\tvar types = _.isString(opts.types) ? [opts.types] : opts.types;\n\tvar locations = _.isString(opts.locations) ? [opts.locations] : opts.locations;\n\tvar runtimePath = opts.runtimePath;\n\n\t// Set the base runtime search path\n\tif (!runtimePath) {\n\t\tif (!folder) {\n\t\t\tU.die([\n\t\t\t\t'You must specify either \"runtimePath\" or \"folder\" when calling Orphanage.remove()',\n\t\t\t\tnew Error().stack\n\t\t\t]);\n\t\t} else {\n\t\t\tif (opts.widgetId) {\n\t\t\t\truntimePath = path.join(dirs.runtime, CONST.DIR.WIDGET, opts.widgetId, folder);\n\t\t\t} else {\n\t\t\t\truntimePath = path.join(dirs.runtime, folder);\n\t\t\t}\n\t\t}\n\t}\n\n\t// skip if the target runtime folder doesn't exist\n\tif (!fs.existsSync(runtimePath)) {\n\t\treturn;\n\t}\n\n\t// Let's see if we need to delete any orphan files...\n\t_.each(wrench.readdirSyncRecursive(runtimePath), function(file) {\n\t\tvar runtimeFullpath = path.join(runtimePath, file);\n\t\tvar found = false;\n\t\tvar checks, i;\n\n\t\t// skip if file no longer exists, or if it's an exception\n\t\tif (!fs.existsSync(runtimeFullpath) ||\n\t\t\t(/*!opts.widgetId && */ isException(file, exceptions))) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Get a list of app folder locations to check for a match against the runtime file\n\t\tchecks = getChecks(file, runtimeFullpath, _.extend({ widgetId: opts.widgetId },\n\t\t\ttypes ? { types: types } : { locations: locations }));\n\n\t\t// if checks is null, we already know we can skip it\n\t\tif (checks === null) {\n\t\t\treturn;\n\t\t}\n\n\t\t// If we find the corresponding app folder file(s), skip this file\n\t\tfor (i = 0; i < checks.length; i++) {\n\t\t\tif (!opts.widgetId && fs.existsSync(checks[i])) {\n\t\t\t\tfound = true;\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\n\t\t// It's an orphan, delete it\n\t\tif (!found) {\n\t\t\t// already deleted, perhaps a file in a deleted directory\n\t\t\tif (!fs.existsSync(runtimeFullpath)) { return; }\n\t\t\tlogger.trace('* ' + file);\n\n\t\t\t// delete the directory or file\n\t\t\tvar targetStat = fs.statSync(runtimeFullpath);\n\t\t\tif (targetStat.isDirectory()) {\n\t\t\t\tif (opts.widgetId) {\n\t\t\t\t\t// remove the widget's folder\n\t\t\t\t\twrench.rmdirSyncRecursive(path.resolve(runtimeFullpath, '..'), true);\n\t\t\t\t} else {\n\t\t\t\t\twrench.rmdirSyncRecursive(runtimeFullpath, true);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tfs.unlinkSync(runtimeFullpath);\n\t\t\t}\n\t\t}\n\t});\n}\n","/home/travis/build/npmtest/node-npmtest-alloy/node_modules/alloy/Alloy/commands/extract-i18n/i18nHandler.js":"var U = require('../../utils'),\n\tlogger = require('../../logger'),\n\tpath = require('path'),\n\t_ = require('../../lib/alloy/underscore')._,\n\tXMLSerializer = require('xmldom').XMLSerializer,\n\tfs = require('fs'),\n\twrench = require('wrench'),\n\tos = require('os');\n\nvar FILE_TEMPLATE = '<?xml version=\"1.0\" encoding=\"UTF-8\"?>' + os.EOL + '<resources>' +\n\tos.EOL + '</resources>';\n\nfunction check(strings) {\n\tif (!strings || strings.length === 0) {\n\t\tlogger.warn('No new i18n strings found. Nothing to do.');\n\t\tprocess.exit(0);\n\t}\n}\n\nmodule.exports = function(projectRoot, language) {\n\tvar i18nDir = path.join(projectRoot, 'app', 'i18n', language);\n\tvar i18nFile = path.join(i18nDir, 'strings.xml');\n\tvar shortPath = path.relative(projectRoot, i18nFile);\n\n\t// create 18n folder if it doesn't exist\n\tif (!fs.existsSync(i18nDir)) {\n\t\twrench.mkdirSyncRecursive(i18nDir, 0755);\n\t}\n\n\t// create i18n file if it doesn't exist\n\tif (!fs.existsSync(i18nFile)) {\n\t\tfs.writeFileSync(i18nFile, FILE_TEMPLATE, 'utf8');\n\t}\n\n\tvar api = {\n\t\tprocess: function(strings) {\n\t\t\tvar doc = U.XML.parseFromFile(i18nFile);\n\t\t\tvar root = doc.documentElement;\n\n\t\t\t// create a <string> node for each new string key\n\t\t\t_.each(strings, function(str) {\n\t\t\t\tvar node = doc.createElement('string');\n\t\t\t\tvar value = doc.createTextNode(str);\n\t\t\t\tnode.setAttribute('name', str);\n\t\t\t\troot.appendChild(doc.createTextNode('  '));\n\t\t\t\tnode.appendChild(value);\n\t\t\t\troot.appendChild(node);\n\t\t\t\troot.appendChild(doc.createTextNode('\\n'));\n\t\t\t});\n\n\t\t\t// serialize the document and write it back to the strings.xml file\n\t\t\tvar serializer = new XMLSerializer();\n\t\t\treturn serializer.serializeToString(doc);\n\t\t},\n\n\t\t// Get an array of all localization string keys not already in the strings.xml file\n\t\tmerge: function(strings) {\n\t\t\tvar doc = U.XML.parseFromFile(i18nFile);\n\t\t\tvar oldStrings = _.map(doc.getElementsByTagName('string'), function(node) {\n\t\t\t\treturn node.attributes.getNamedItem('name').nodeValue;\n\t\t\t});\n\t\t\treturn _.difference(strings, oldStrings);\n\t\t},\n\n\t\t// Print the XML that would be written to your strings.xml file with --apply\n\t\tprint: function(strings) {\n\t\t\tcheck(strings);\n\t\t\tlogger.info('######## BEFORE ########' + os.EOL + api.process([]));\n\t\t\tlogger.info('######## AFTER  ########' + os.EOL + api.process(strings));\n\t\t\tlogger.info(' ');\n\t\t\tlogger.warn('Did not write the \"' + shortPath + '\" file - use \"--apply\" option to write.');\n\t\t},\n\n\t\t// Append any new localization strings to the existing strings.xml file\n\t\twrite: function(strings) {\n\t\t\tcheck(strings);\n\t\t\tfs.writeFileSync(i18nFile, api.process(strings), 'utf8');\n\t\t\tlogger.info(('Wrote strings in the \"' + path.relative(projectRoot, i18nFile) + '\" file.').green);\n\t\t}\n\t};\n\n\treturn api;\n};\n","/home/travis/build/npmtest/node-npmtest-alloy/node_modules/alloy/Alloy/commands/generate/generateUtils.js":"var basePath = '../../';\nvar path = require('path'),\n\tfs = require('fs'),\n\twrench = require('wrench'),\n\txml2tss = require('xml2tss'),\n\talloyRoot = path.join(__dirname, '..', '..'),\n\t_ = require(basePath + 'lib/alloy/underscore')._,\n\tU = require(basePath + 'utils'),\n\tCONST = require(basePath + 'common/constants'),\n\tlogger = require(basePath + 'logger');\n\nfunction pad(x) {\n\tif (x < 10) {\n\t\treturn '0' + x;\n\t}\n\treturn x;\n}\n\nexports.generateMigrationFileName = function(t) {\n\tvar d = new Date();\n\tvar s = String(d.getUTCFullYear()) + String(pad(d.getUTCMonth() + 1)) +\n\t\tString(pad(d.getUTCDate())) + String(pad(d.getUTCHours())) +\n\t\tString(pad(d.getUTCMinutes())) + String(d.getUTCMilliseconds());\n\treturn s + '_' + t;\n};\n\nexports.generate = function(name, type, program, args) {\n\targs = args || {};\n\tvar ext = '.' + CONST.FILE_EXT[type];\n\tvar paths = U.getAndValidateProjectPaths(program.outputPath, {command : CONST.COMMANDS.GENERATE});\n\tvar templatePath = path.join(alloyRoot, 'template', type.toLowerCase() + ext);\n\t// ALOY-372 - Support 'alloy generate' command for widget components\n\tvar widgetPath = (program.widgetname) ? CONST.DIR['WIDGET'] + path.sep + program.widgetname : '';\n\tif (widgetPath && !fs.existsSync(path.join(paths.app, widgetPath))) {\n\t\tU.die('No widget named ' + program.widgetname + ' in this project.');\n\t}\n\tvar dir = path.join(paths.app, widgetPath, CONST.DIR[type]);\n\n\t// add the platform-specific folder to the path, if necessary\n\tif (program.platform) {\n\t\tif (_.contains(['VIEW', 'CONTROLLER', 'STYLE'], type)) {\n\t\t\tdir = path.join(dir, program.platform);\n\t\t} else {\n\t\t\tlogger.warn('platform \"' + program.platform +\n\t\t\t\t'\" ignored, not used with type \"' + type + '\"');\n\t\t}\n\t}\n\n\t// get the final file name\n\tvar file = path.join(dir, name + ext);\n\tvar viewFile = path.join(paths.app, CONST.DIR['VIEW'], name + '.' +\n\t\tCONST.FILE_EXT['VIEW']);\n\n\t// see if the file already exists\n\tif (fs.existsSync(file) && !program.force &&\n\t\t!(type === 'STYLE' && fs.existsSync(viewFile))) {\n\t\tU.die(' file already exists: ' + file);\n\t}\n\n\t// make sure the target folder exists\n\tvar fullDir = path.dirname(file);\n\tif (!fs.existsSync(fullDir)) {\n\t\twrench.mkdirSyncRecursive(fullDir);\n\t}\n\n\t// only use xml2tss to generate style if the partner view exists\n\tif (type === 'STYLE' && fs.existsSync(viewFile)) {\n\t\txml2tss.updateFile(viewFile, file, function(err, ok) {\n\t\t\tif (ok) {\n\t\t\t\tlogger.info('Generated style named ' + name);\n\t\t\t} else {\n\t\t\t\tlogger.warn('Style named ' + name + ' already up-to-date');\n\t\t\t}\n\t\t});\n\t} else {\n\t\t// write the file out based on the given template\n\t\tvar templateContents = fs.readFileSync(templatePath, 'utf8');\n\t\tif (args.templateFunc) {\n\t\t\ttemplateContents = args.templateFunc(templateContents);\n\t\t}\n\t\tvar code = _.template(templateContents, args.template || {});\n\t\tfs.writeFileSync(file, code);\n\n\t\treturn {\n\t\t\tfile: file,\n\t\t\tdir: fullDir,\n\t\t\tcode: code\n\t\t};\n\t}\n};\n","/home/travis/build/npmtest/node-npmtest-alloy/node_modules/alloy/Alloy/lib/alloy/widget.js":"var Alloy = require('/alloy');\n\n// Hold a collection of widget objects instances. These\n// objects are not the widgets themselves, but a set of\n// auto-populated functions and properties that make\n// developing widgets easier.\nvar widgets = {};\n\nfunction ucfirst(text) {\n\tif (!text) { return text; }\n\treturn text[0].toUpperCase() + text.substr(1);\n}\n\nmodule.exports = function(widgetId) {\n\tvar self = this;\n\n\t// return existing widget object, if present\n\tif (widgets[widgetId]) {\n\t\treturn widgets[widgetId];\n\t}\n\n\t// properties\n\tthis.widgetId = widgetId;\n\tthis.Collections = {};\n\tthis.Models = {};\n\tthis.Shared = {};\n\n\t// functions\n\tthis.createController = function(name, args) {\n\t\treturn new (require('/alloy/widgets/' + widgetId + '/controllers/' + name))(args);\n\t};\n\tthis.createCollection = function(name, args) {\n\t\treturn new (require('/alloy/widgets/' + widgetId + '/models/' + ucfirst(name)).Collection)(args);\n\t};\n\tthis.createModel = function(name, args) {\n\t\treturn new (require('/alloy/widgets/' + widgetId + '/models/' + ucfirst(name)).Model)(args);\n\t};\n\tthis.createWidget = Alloy.createWidget; // just to be complete\n\tthis.Collections.instance = function(name) {\n\t\treturn self.Collections[name] || (self.Collections[name] = self.createCollection(name));\n\t};\n\tthis.Models.instance = function(name) {\n\t\treturn self.Models[name] || (self.Models[name] = self.createModel(name));\n\t};\n\n\t// add to widget object instances\n\twidgets[widgetId] = this;\n};","/home/travis/build/npmtest/node-npmtest-alloy/node_modules/alloy/Alloy/template/widget/controller.js":"","/home/travis/build/npmtest/node-npmtest-alloy/node_modules/alloy/samples/todo/controllers/add.js":"function addItem() {\n\tvar todos = Alloy.Collections.todo;\n\n\t// Create a new model for the todo collection\n\tvar task = Alloy.createModel('Todo', {\n\t\titem : $.itemField.value,\n\t\tdone : 0\n\t});\n\n\t// add new model to the global collection\n\ttodos.add(task);\n\n\tif (task.isValid()) {\n\t\t// save the model to persistent storage\n\t\ttask.save();\n\t} else {\n\t\ttask.destroy();\n\t}\n\n\t// reload the tasks\n\ttodos.fetch();\n\n\tcloseWindow();\n}\n\nfunction focusTextField() {\n\t$.itemField.focus();\n}\n\nfunction closeKeyboard(e) {\n\te.source.blur();\n}\n\nfunction closeWindow() {\n\t$.addWin.close();\n}\n","/home/travis/build/npmtest/node-npmtest-alloy/node_modules/alloy/samples/todo/controllers/row.js":"var moment = require('alloy/moment');\nvar todos = Alloy.Collections.todo;\nvar id;\n\n// $model represents the current model accessible to this\n// controller from the markup's model-view binding. $model\n// will be null if there is no binding in place.\n\nif ($model) {\n\tid = $model.id;\n\tif ($model.get('done')) {\n\t\t$.row.backgroundColor = '#eee';\n\t\t$.check.backgroundColor = '#eee';\n\t\t$.task.color = '#ccc';\n\t\t$.check.image = '/tick_64.png';\n\t} else {\n\t\t$.row.backgroundColor = '#fff';\n\t\t$.check.backgroundColor = '#fff';\n\t\t$.task.color = '#000';\n\t\t$.check.image = '/tick_gray_64.png';\n\t}\n}\n\n// toggle the 'done' status of the IDed todo\nfunction toggleStatus(e) {\n\t// find the todo task by id\n\tvar todo = todos.get(id);\n\n\t// set the current 'done' and 'date_completed' fields for the model,\n\t// then save to presistence, and model-view binding will automatically\n\t// reflect this in the tableview\n\ttodo.set({\n\t\t'done': todo.get('done') ? 0 : 1,\n\t\t'date_completed': moment().unix()\n\t}).save();\n}\n\n// delete the IDed todo from the collection\nfunction deleteTask(e) {\n\t// prevent bubbling up to the row\n\te.cancelBubble = true;\n\n\t// find the todo task by id\n\tvar todo = todos.get(id);\n\n\t// destroy the model from persistence, which will in turn remove\n\t// it from the collection, and model-view binding will automatically\n\t// reflect this in the tableview\n\ttodo.destroy();\n}","/home/travis/build/npmtest/node-npmtest-alloy/node_modules/alloy/samples/todo/migrations/201209301904312_todo.js":"migration.up = function(migrator) {\n\tmigrator.createTable({\n\t\t'columns': {\n\t\t\t'item':'text',\n\t\t\t'done':'integer',\n\t\t\t'date_completed':'text'\n\t\t}\n\t});\n};\n\nmigration.down = function(migrator) {\n\tmigrator.dropTable('todo');\n};\n","/home/travis/build/npmtest/node-npmtest-alloy/node_modules/alloy/samples/todo/models/todo.js":"var moment = require('alloy/moment');\n\nexports.definition = {\n\tconfig: {\n\t\t'columns': {\n\t\t\t'item':'text',\n\t\t\t'done':'integer',\n\t\t\t'date_completed':'text'\n\t\t},\n\t\t'adapter': {\n\t\t\t'type': 'sql',\n\t\t\t'collection_name': 'todo'\n\t\t}\n\t},\n\n\textendModel : function(Model) {\n\t\t_.extend(Model.prototype, {\n\t\t\tvalidate : function(attrs) {\n\t\t\t\tfor (var key in attrs) {\n\t\t\t\t\tvar value = attrs[key];\n\t\t\t\t\tif (value) {\n\t\t\t\t\t\tif (key === 'item') {\n\t\t\t\t\t\t\tif ((/^\\s*$/).test(value)) {\n\t\t\t\t\t\t\t\treturn 'Error: No item!';\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (key === 'done') {\n\t\t\t\t\t\t\tif (value.length <= 0) {\n\t\t\t\t\t\t\t\treturn 'Error: No completed flag!';\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\n\t\treturn Model;\n\t},\n\n\textendCollection : function(Collection) {\n\t\t_.extend(Collection.prototype, {\n\n\t\t\t// For Backbone v1.1.2, uncomment this to override the fetch method\n\t\t\t/*\n\t\t\tfetch: function(options) {\n\t\t\t\toptions = options ? _.clone(options) : {};\n\t\t\t\toptions.reset = true;\n\t\t\t\treturn Backbone.Collection.prototype.fetch.call(this, options);\n\t\t\t},\n\t\t\t*/\n\t\t});\n\t\treturn Collection;\n\t}\n};\n"}