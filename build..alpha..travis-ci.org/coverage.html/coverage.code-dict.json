{"/home/travis/build/npmtest/node-npmtest-alloy/test.js":"/* istanbul instrument in package npmtest_alloy */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireExampleJsFromReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-alloy/lib.npmtest_alloy.js":"/* istanbul instrument in package npmtest_alloy */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_alloy = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_alloy = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-alloy/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-alloy && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_alloy */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_alloy\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_alloy.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_alloy.rollup.js'] =\n            local.assetsDict['/assets.npmtest_alloy.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_alloy.__dirname + '/lib.npmtest_alloy.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-alloy/node_modules/alloy/Alloy/alloy.js":"/**\n * Alloy\n * Copyright (c) 2012 by Appcelerator, Inc. All Rights Reserved.\n * See LICENSE for more information on licensing.\n */\nvar program = require('commander'),\n\tlogger = require('./logger'),\n\tos = require('os'),\n\tU = require('./utils'),\n\tcolors = require('colors'),\n\t_ = require('./lib/alloy/underscore')._,\n\tpkginfo = require('pkginfo')(module, 'version'),\n\tpath = require('path'),\n\tfs = require('fs'),\n\tCONST = require('./common/constants');\n\n// patch to remove the warning in node >=0.8\npath.existsSync = fs.existsSync || path.existsSync;\n\n// avoid io issues on Windows in nodejs 0.10.X: https://github.com/joyent/node/issues/3584\nif (process.env.ALLOY_TESTS && /^win/i.test(os.platform())) {\n\tconsole.error = function(m) {\n\t\tfs.writeSync(2, m);\n\t};\n\tconsole.log = console.warn = console.info = function(m) {\n\t\tfs.writeSync(1, m);\n\t};\n}\n\n////////////////////////////////////\n////////// MAIN EXECUTION //////////\n////////////////////////////////////\n\n// Process command line input\nprogram\n\t.version(module.exports.version, '-v, --version')\n\t.description('Alloy command line')\n\t.usage('COMMAND [ARGS] [OPTIONS]')\n\t.option('-a, --app <app>', 'Test app folder for running \"alloy test\"')\n\t.option('-A, --apply', 'Applies command changes [extract-i18n]')\n\t.option('-b, --noBanner', 'Disable the banner')\n\t.option('-c, --config <config>', 'Pass in compiler configuration')\n\t.option('-f, --force', 'Force the command to execute')\n\t.option('-l, --logLevel <logLevel>', 'Log level (default: 3 [DEBUG])')\n\t.option('-n, --no-colors', 'Turn off colors')\n\t.option('-o, --outputPath <outputPath>', 'Output path for generated code')\n\t.option('-p, --project-dir <project-dir>', 'Titanium project directory')\n\t.option('-q, --platform <platform>', 'Target mobile platform [android,ios,mobileweb]')\n\t.option('-s, --spec <spec>', 'test spec to use with \"alloy test\"')\n\t.option('-w, --all', 'require flag for generate styles')\n\t.option('-x, --column <column>', 'Column for source map query', 1)\n\t.option('-y, --line <line>', 'Line for source map query', 1)\n\t.option('-z, --source <source>', 'Source original file for source map query')\n\t.option('--widgetname <name>', 'Widget name, used with generate command')\n\t.option('--testapp <name>', 'Test app name to import, used with new command');\n\nprogram.command('new'.blue + ' <dir>'.white)\n\t\t.description('    create a new alloy project'.grey);\n\nprogram.command('compile'.blue + ' [dir]'.white)\n\t\t.description('    compile into titanium source code'.grey);\n\nprogram.command('extract-i18n'.blue + ' <language>'.white)\n\t\t.description('    extracts i18n strings from the source code (js and tss files)'.grey);\n\nprogram.command('generate'.blue + ' <type> <name>'.white)\n\t\t.description('    generate a new alloy type such as a controller'.grey);\n\nprogram.command('copy'.blue + ' <source> <destination>'.white)\n\t\t.description('    copy the controller, view, and style files from <source> to <destination>'.grey);\n\nprogram.command('move'.blue + ' <source> <destination>'.white)\n\t\t.description('    move the controller, view, and style files from <source> to <destination>'.grey);\n\nprogram.command('remove'.blue + ' <source>'.white)\n\t\t.description('    remove the controller, view, and style files at <source>'.grey);\n\nprogram.parse(process.argv);\n\n\n// Setup up logging output\nError.stackTraceLimit = Infinity;\nlogger.stripColors = program['colors'] === false;\nlogger.logLevel = program['logLevel'] || logger.TRACE;\nif (program.config && program.config.indexOf('logLevel') !== -1) {\n\tlogger.logLevel = -1;\n}\n\nif (!program.noBanner && program.args[0] !== 'info' && (program.config && program.config.indexOf('noBanner') === -1)) {\n\tbanner();\n}\n\nif (program.args.length === 0) {\n\tvar help = program.helpInformation();\n\thelp = help.replace('Usage: alloy COMMAND [ARGS] [OPTIONS]', 'Usage: ' + 'alloy'.blue + ' COMMAND'.white + ' [ARGS] [OPTIONS]'.grey);\n\thelp = logger.stripColors ? colors.stripColors(help) : help;\n\tconsole.log(help);\n\tprocess.exit(0);\n}\n\nif (program.platform && !_.contains(CONST.PLATFORM_FOLDERS_ALLOY, program.platform)) {\n\tU.die('Invalid platform \"' + program.platform + '\" specified, must be [' + CONST.PLATFORM_FOLDERS_ALLOY.join(',') + ']');\n}\n\n// Validate the given command\nvar command = program.args[0];\nif (!_.contains(getCommands(), command)) {\n\tU.die('Unknown command: ' + command.red);\n}\n\n// Launch command with given arguments and options\n(require('./commands/' + command + '/index'))(program.args.slice(1), program);\n\n///////////////////////////////\n////////// FUNCTIONS //////////\n///////////////////////////////\nfunction banner() {\n\tvar str =\n\t'       .__  .__                \\n' +\n\t'_____  |  | |  |   ____ ___.__.\\n' +\n\t'\\\\__  \\\\ |  | |  |  /  _ <   |  |\\n' +\n\t' / __ \\\\|  |_|  |_(  <_> )___  |\\n' +\n\t'(____  /____/____/\\\\____// ____|\\n' +\n\t'     \\\\/                 \\\\/';\n\n\tif (!program.dump) {\n\t\tconsole.log(logger.stripColors ? str : str.blue);\n\t\tvar m = 'Alloy ' + module.exports.version + ' by Appcelerator. The MVC app framework for Titanium.\\n'.white;\n\t\tconsole.log(logger.stripColors ? colors.stripColors(m) : m);\n\t}\n}\n\nfunction getCommands() {\n\ttry {\n\t\tvar commandsPath = path.join(__dirname, 'commands');\n\t\treturn _.filter(fs.readdirSync(commandsPath), function(file) {\n\t\t\treturn path.existsSync(path.join(commandsPath, file, 'index.js'));\n\t\t});\n\t} catch (e) {\n\t\tU.die('Error getting command list', e);\n\t}\n}\n","/home/travis/build/npmtest/node-npmtest-alloy/node_modules/alloy/Alloy/logger.js":"var colors = require('colors'),\n\tU = require('./utils');\n\nexports.TRACE = 4;\nexports.DEBUG = 3;\nexports.INFO = 2;\nexports.WARN = 1;\nexports.ERROR = 0;\nexports.NONE = -1;\nexports.logLevel = exports.TRACE;\nexports.stripColors = false;\nexports.showTimestamp = false;\n\nexports.trace = function(msg) {\n\tif (exports.logLevel >= exports.TRACE) { printMessage(msg, 'trace', 'grey'); }\n};\n\nexports.debug = function(msg) {\n\tif (exports.logLevel >= exports.DEBUG) { printMessage(msg, 'debug', 'cyan'); }\n};\n\nexports.info = function(msg) {\n\tif (exports.logLevel >= exports.INFO) { printMessage(msg, 'info', 'white'); }\n};\n\nexports.warn = function(msg) {\n\tif (exports.logLevel >= exports.WARN) { printMessage(msg, 'warn', 'yellow'); }\n};\n\nexports.error = function(msg) {\n\tif (exports.logLevel >= exports.ERROR) { printMessage(msg, 'error', 'red'); }\n};\n\n// Private functions and members\nvar levels = ['info', 'debug', 'error', 'warn', 'trace'];\nvar has = function(array, item) {\n\tvar len = array.length;\n\tfor (var i = 0; i < len; i++) {\n\t\tif (array[i] === item) {\n\t\t\treturn true;\n\t\t}\n\t}\n\treturn false;\n};\nvar isArray = function(object) {\n\treturn Object.prototype.toString.call(object) === '[object Array]';\n};\n\nvar formattedDate = function() {\n\tvar date = new Date();\n\tvar pad = function(val) {\n\t\tval += '';\n\t\treturn val.length < 2 ? '0' + val : val;\n\t};\n\treturn date.getFullYear() + '-' + pad(date.getMonth() + 1) + '-' + pad(date.getDate()) + ' ' +\n\t\tpad(date.getHours()) + ':' + pad(date.getMinutes()) + ':' + pad(date.getSeconds());\n};\n\nvar printMessage = function(msg, level, color) {\n\t// Validate arguments\n\tmsg = msg || '';\n\tlevel = level || 'info';\n\tlevel = has(levels, level) ? level : 'info';\n\tcolor = color || 'white';\n\n\t// Have to wrap in a function to avoid \"Illegal invocation\" error on android\n\tvar logFunc = function(msg) {\n\t\t(level === 'debug' || level === 'trace' ? console.log : console[level])(msg);\n\t};\n\n\tfunction printLine(line) {\n\t\tif (isArray(line)) {\n\t\t\tfor (var i = 0; i < line.length; i++) {\n\t\t\t\tprintLine(line[i]);\n\t\t\t}\n\t\t} else {\n\t\t\tvar tag = (exports.showTimestamp ? formattedDate() + ' -- ' : '') + '[' +\n\t\t\t\tlevel.toUpperCase() + '] ';\n\t\t\tvar str = tag.grey + (line || '')[color];\n\t\t\tif (exports.stripColors) { str = U.stripColors(str); }\n\t\t\tlogFunc(str);\n\t\t}\n\t}\n\tprintLine(msg);\n};\n","/home/travis/build/npmtest/node-npmtest-alloy/node_modules/alloy/Alloy/utils.js":"// The island of misfit toys... for functions\n\nvar path = require('path'),\n\tfs = require('fs'),\n\tcolors = require('colors'),\n\tcrypto = require('crypto'),\n\tutil = require('util'),\n\twrench = require('wrench'),\n\tjsonlint = require('jsonlint'),\n\tresolve = require('resolve'),\n\tpaths = require('global-paths'),\n\tlogger = require('./logger'),\n\ttiapp = require('./tiapp'),\n\tXMLSerializer = require('xmldom').XMLSerializer,\n\tDOMParser = require('xmldom').DOMParser,\n\t_ = require('./lib/alloy/underscore')._,\n\tCONST = require('./common/constants'),\n\tsourceMapper = require('./commands/compile/sourceMapper');\n\nvar NODE_ACS_REGEX = /^ti\\.cloud\\..+?\\.js$/;\n\nexports.XML = {\n\tgetNodeText: function(node) {\n\t\tif (!node) { return ''; }\n\t\tvar serializer = new XMLSerializer(),\n\t\t\tstr = '';\n\t\tfor (var c = 0; c < node.childNodes.length; c++) {\n\t\t\tif (node.childNodes[c].nodeType === 3) {\n\t\t\t\tstr += serializer.serializeToString(node.childNodes[c]);\n\t\t\t}\n\t\t}\n\t\treturn str.replace(/\\&amp;/g, '&');\n\t},\n\tgetElementsFromNodes: function(nodeList) {\n\t\tvar elems = [];\n\t\tif (nodeList && nodeList.length) {\n\t\t\tfor (var i = 0, l = nodeList.length; i < l; i++) {\n\t\t\t\tvar node = nodeList.item(i);\n\t\t\t\tif (node.nodeType === 1) {\n\t\t\t\t\telems.push(node);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn elems;\n\t},\n\tparseFromString: function(string) {\n\t\tvar doc;\n\t\ttry {\n\t\t\tvar errorHandler = {};\n\t\t\terrorHandler.error = errorHandler.fatalError = function(m) {\n\t\t\t\texports.die(['Error parsing XML file.'].concat((m || '').split(/[\\r\\n]/)));\n\t\t\t};\n\t\t\terrorHandler.warn = errorHandler.warning = function(m) {\n\t\t\t\t// ALOY-840: die on unclosed XML tags\n\t\t\t\t// xmldom hardcodes this as a warning with the string message 'unclosed xml attribute'\n\t\t\t\t// even when it's a tag that's unclosed\n\t\t\t\tif (m.indexOf('unclosed xml attribute') === -1) {\n\t\t\t\t\tlogger.warn((m || '').split(/[\\r\\n]/));\n\t\t\t\t} else {\n\t\t\t\t\tm = m.replace('unclosed xml attribute', 'Unclosed XML tag or attribute');\n\t\t\t\t\texports.die(['Error parsing XML file.'].concat((m || '').split(/[\\r\\n]/)));\n\t\t\t\t}\n\t\t\t};\n\t\t\tdoc = new DOMParser({errorHandler:errorHandler, locator:{}}).parseFromString(string);\n\t\t} catch (e) {\n\t\t\texports.die('Error parsing XML file.', e);\n\t\t}\n\n\t\treturn doc;\n\t},\n\tparseFromFile: function(filename) {\n\t\tvar xml = fs.readFileSync(filename, 'utf8');\n\t\treturn exports.XML.parseFromString(xml);\n\t},\n\tcreateEmptyNode: function(name, ns) {\n\t\tvar str = '<' + name + (ns ? ' ns=\"' + ns + '\"' : '') + '></' + name + '>';\n\t\treturn exports.XML.parseFromString(str).documentElement;\n\t},\n\tgetAlloyFromFile: function(filename) {\n\t\tvar doc = exports.XML.parseFromFile(filename);\n\t\tvar docRoot = doc.documentElement;\n\n\t\t// Make sure the markup has a top-level <Alloy> tag\n\t\tif (docRoot.nodeName !== CONST.ROOT_NODE) {\n\t\t\texports.die([\n\t\t\t\t'Invalid view file \"' + filename + '\".',\n\t\t\t\t'All view markup must have a top-level <Alloy> tag'\n\t\t\t]);\n\t\t}\n\n\t\treturn docRoot;\n\t},\n\ttoString: function(node) {\n\t\treturn (new XMLSerializer()).serializeToString(node);\n\t},\n\tpreviousSiblingElement: function(node) {\n\t\tif (!node || !node.previousSibling || node.previousSibling === null) {\n\t\t\treturn null;\n\t\t} else if (node.previousSibling.nodeType === 1) {\n\t\t\treturn node.previousSibling;\n\t\t} else {\n\t\t\treturn exports.XML.previousSiblingElement(node.previousSibling);\n\t\t}\n\t}\n};\n\nexports.readTemplate = function(name) {\n\treturn fs.readFileSync(path.join(__dirname, 'template', name), 'utf8');\n};\n\nexports.evaluateTemplate = function(name, o) {\n\treturn _.template(exports.readTemplate(name), o);\n};\n\nexports.getAndValidateProjectPaths = function(argPath, opts) {\n\topts = opts || {};\n\tvar projectPath = path.resolve(argPath);\n\n\t// See if we got the \"app\" path or the project path as an argument\n\tprojectPath = fs.existsSync(path.join(projectPath, '..', 'tiapp.xml')) ?\n\t\tpath.join(projectPath, '..') : projectPath;\n\n\t// Assign paths objects\n\tvar paths = {\n\t\tproject: projectPath,\n\t\tapp: path.join(projectPath, 'app'),\n\t\tindexBase: path.join(CONST.DIR.CONTROLLER, CONST.NAME_DEFAULT + '.' + CONST.FILE_EXT.CONTROLLER)\n\t};\n\tpaths.index = path.join(paths.app, paths.indexBase);\n\tpaths.assets = path.join(paths.app, 'assets');\n\tpaths.resources = path.join(paths.project, 'Resources');\n\tpaths.resourcesAlloy = path.join(paths.resources, 'alloy');\n\n\t// validate project and \"app\" paths\n\tif (!fs.existsSync(paths.project)) {\n\t\texports.die('Titanium project path does not exist at \"' + paths.project + '\".');\n\t} else if (!fs.existsSync(path.join(paths.project, 'tiapp.xml'))) {\n\t\texports.die('Invalid Titanium project path (no tiapp.xml) at \"' + paths.project + '\"');\n\t} else if (!fs.existsSync(paths.app)) {\n\t\texports.die('Alloy \"app\" directory does not exist at \"' + paths.app + '\"');\n\t} else if (!fs.existsSync(paths.index) && (opts.command !== CONST.COMMANDS.GENERATE)) {\n\t\texports.die('Alloy \"app\" directory has no \"' + paths.indexBase + '\" file at \"' + paths.index + '\".');\n\t}\n\n\t// TODO: https://jira.appcelerator.org/browse/TIMOB-14683\n\t// Resources/app.js must be present, even if not used\n\tvar appjs = path.join(paths.resources, 'app.js');\n\tif (!fs.existsSync(appjs)) {\n\t\twrench.mkdirSyncRecursive(paths.resources, 0755);\n\t\tfs.writeFileSync(appjs, '');\n\t}\n\n\treturn paths;\n};\n\nexports.createErrorOutput = function(msg, e) {\n\tvar errs = [msg || 'An unknown error occurred'];\n\tvar posArray = [];\n\n\tif (e) {\n\t\tvar line = e.line || e.lineNumber;\n\t\tif (e.message) { errs.push(e.message.split('\\n')); }\n\t\tif (line)  { posArray.push('line ' + line); }\n\t\tif (e.col) { posArray.push('column ' + e.col); }\n\t\tif (e.pos) { posArray.push('position ' + e.pos); }\n\t\tif (posArray.length) { errs.push(posArray.join(', ')); }\n\n\t\t// add the stack trace if we don't get anything good\n\t\tif (errs.length < 2) { errs.unshift(e.stack); }\n\t} else {\n\t\terrs.unshift(e.stack);\n\t}\n\n\treturn errs;\n};\n\nexports.updateFiles = function(srcDir, dstDir, opts) {\n\topts = opts || {};\n\topts.rootDir = opts.rootDir || dstDir;\n\tvar copiedFiles = [];\n\n\tif (!fs.existsSync(srcDir)) {\n\t\treturn;\n\t}\n\tlogger.trace('SRC_DIR=' + srcDir);\n\n\tif (!fs.existsSync(dstDir)) {\n\t\twrench.mkdirSyncRecursive(dstDir, 0755);\n\t}\n\n\t// don't process XML/controller files inside .svn folders (ALOY-839)\n\tvar excludeRegex = new RegExp('(?:^|[\\\\/\\\\\\\\])(?:' + CONST.EXCLUDED_FILES.join('|') + ')(?:$|[\\\\/\\\\\\\\])');\n\tvar ordered = [];\n\t_.each(wrench.readdirSyncRecursive(srcDir), function(file) {\n\t\tvar src = path.join(srcDir, file);\n\t\tvar dst = path.join(dstDir, file);\n\n\t\tif (excludeRegex.test(src)) {\n\t\t\treturn;\n\t\t}\n\n\t\t// make sure the file exists and that it is not filtered\n\t\tif (!fs.existsSync(src) ||\n\t\t\t(opts.filter && opts.filter.test(file)) ||\n\t\t\t(opts.exceptions && _.contains(opts.exceptions, file)) ||\n\t\t\t(opts.restrictionPath && !_.contains(opts.restrictionPath, src)) ) {\n\t\t\treturn;\n\t\t}\n\n\t\t// if this is the current platform-specific folder, adjust the dst path\n\t\tvar parts = file.split(/[\\/\\\\]/);\n\t\tif (opts.titaniumFolder && parts[0] === opts.titaniumFolder) {\n\t\t\tif (opts.type && opts.type !== 'ASSETS' && parts[0] === 'iphone') {\n\t\t\t\t// don't copy files in lib/iphone or vendor/iphone\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tdst = path.join(dstDir, parts.slice(1).join('/'));\n\t\t\tordered.push({ src:src, dst:dst });\n\t\t} else if (opts.titaniumFolder && opts.titaniumFolder === 'iphone' && opts.type && opts.type !== 'ASSETS' && parts[0] === 'ios') {\n\t\t\t// copy files in lib/ios and vendor/ios\n\t\t\tdst = path.join(dstDir, parts.slice(1).join('/'));\n\t\t\tordered.push({ src:src, dst:dst });\n\t\t} else {\n\t\t\tordered.unshift({ src:src, dst:dst });\n\t\t}\n\t});\n\n\t_.each(ordered, function(o) {\n\t\tvar src = o.src;\n\t\tvar dst = o.dst;\n\t\tvar srcStat = fs.statSync(src);\n\t\tif (fs.existsSync(dst)) {\n\t\t\tvar dstStat = fs.statSync(dst);\n\n\t\t\tif (!dstStat.isDirectory()) {\n\t\t\t\t// copy file in if it is a JS file or if its mtime is\n\t\t\t\t// greater than the one in Resources\n\t\t\t\tif (path.extname(src) === '.js' || opts.themeChanged || opts.isNew ||\n\t\t\t\t\tsrcStat.mtime.getTime() > dstStat.mtime.getTime()) {\n\t\t\t\t\tlogger.trace('Copying ' +\n\t\t\t\t\t\tpath.join('SRC_DIR', path.relative(srcDir, src)).yellow + ' --> ' +\n\t\t\t\t\t\tpath.relative(opts.rootDir, dst).yellow);\n\t\t\t\t\texports.copyFileSync(src, dst);\n\t\t\t\t\tcopiedFiles.push(path.relative(path.join(opts.rootDir, 'Resources'), dst));\n\t\t\t\t}\n\t\t\t}\n\t\t} else {\n\t\t\tif (srcStat.isDirectory()) {\n\t\t\t\tlogger.trace('Creating directory ' + path.relative(opts.rootDir, dst).yellow);\n\t\t\t\twrench.mkdirSyncRecursive(dst, 0755);\n\t\t\t} else {\n\t\t\t\tlogger.trace('Copying ' + path.join('SRC_DIR', path.relative(srcDir, src)).yellow +\n\t\t\t\t\t' --> ' + path.relative(opts.rootDir, dst).yellow);\n\t\t\t\texports.copyFileSync(src, dst);\n\t\t\t\tcopiedFiles.push(path.relative(path.join(opts.rootDir, 'Resources'), dst));\n\t\t\t}\n\t\t}\n\t\tif (!srcStat.isDirectory() && opts.createSourceMap && path.extname(src) === '.js') {\n\t\t\tvar tpath = path.join(opts.rootDir, 'build', 'map', 'Resources', (opts.compileConfig.alloyConfig.platform === 'ios' ? 'iphone' : opts.compileConfig.alloyConfig.platform), 'alloy');\n\t\t\tvar target = {\n\t\t\t\t\tfilename: path.join(tpath, path.basename(src)),\n\t\t\t\t\tfilepath: path.dirname(dst),\n\t\t\t\t\ttemplate: dst\n\t\t\t\t},\n\t\t\t\tdata = {\n\t\t\t\t\t'__MAPMARKER_NONCONTROLLER__': {\n\t\t\t\t\t\tfilename: src,\n\t\t\t\t\t\tfilepath: path.dirname(src),\n\t\t\t\t\t}\n\t\t\t\t};\n\t\t\tsourceMapper.generateSourceMap({\n\t\t\t\ttarget: target,\n\t\t\t\tdata: data,\n\t\t\t\torigFile: {\n\t\t\t\t\tfilename: src,\n\t\t\t\t\tfilepath: path.dirname(src)\n\t\t\t\t}\n\t\t\t}, opts.compileConfig);\n\t\t}\n\t});\n\tlogger.trace('');\n\n\treturn copiedFiles;\n};\n\nexports.getWidgetDirectories = function(appDir) {\n\tvar configPath = path.join(appDir, 'config.json');\n\tvar appWidgets = [];\n\tif (fs.existsSync(configPath)) {\n\t\ttry {\n\t\t\tvar content = fs.readFileSync(configPath, 'utf8');\n\t\t\tappWidgets = jsonlint.parse(content).dependencies;\n\t\t} catch (e) {\n\t\t\texports.die('Error parsing \"config.json\"', e);\n\t\t}\n\t}\n\n\tvar dirs = [];\n\tvar collections = [];\n\tvar widgetPaths = [];\n\twidgetPaths.push(path.join(__dirname, '..', 'widgets'));\n\twidgetPaths.push(path.join(appDir, 'widgets'));\n\n\t_.each(widgetPaths, function(widgetPath) {\n\t\tif (fs.existsSync(widgetPath)) {\n\t\t\tvar wFiles = fs.readdirSync(widgetPath);\n\t\t\tfor (var i = 0; i < wFiles.length; i++) {\n\t\t\t\tvar wDir = path.join(widgetPath, wFiles[i]);\n\t\t\t\tif (fs.statSync(wDir).isDirectory() &&\n\t\t\t\t\t_.indexOf(fs.readdirSync(wDir), 'widget.json') !== -1) {\n\t\t\t\t\tvar collection = parseManifestAsCollection(path.join(wDir, 'widget.json'));\n\t\t\t\t\tcollections[collection.manifest.id] = collection;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t});\n\n\tfunction parseManifestAsCollection(wFile) {\n\t\tvar wDir = path.dirname(wFile);\n\t\tvar manifest;\n\t\ttry {\n\t\t\tmanifest = jsonlint.parse(fs.readFileSync(wFile, 'utf8'));\n\t\t} catch (e) {\n\t\t\texports.die('Error parsing \"' + wFile + '\"', e);\n\t\t}\n\n\t\treturn {\n\t\t\tdir: wDir,\n\t\t\tmanifest: manifest\n\t\t};\n\t}\n\n\tfunction findWidgetAsNodeModule(id) {\n\t\tvar wFile;\n\t\ttry {\n\t\t\twFile = resolve.sync(path.join(CONST.NPM_WIDGET_PREFIX + id, 'widget'), { basedir: path.join(appDir, '..'), extensions: [ '.json' ], paths: paths() });\n\t\t} catch (err) {\n\t\t\treturn;\n\t\t}\n\n\t\tvar collection = parseManifestAsCollection(wFile);\n\t\tif (collection.manifest.id !== id) {\n\t\t\treturn logger.warn('Expected \"' + wFile + '\" to have id \"' + id + '\" instead of \"' + collection.manifest.id + '\"');\n\t\t}\n\n\t\tvar pFile = path.join(path.dirname(wFile), 'package.json');\n\t\tvar pkg;\n\t\ttry {\n\t\t\tpkg = jsonlint.parse(fs.readFileSync(pFile, 'utf8'));\n\t\t} catch (e) {\n\t\t\texports.die('Error parsing \"' + pFile + '\"', e);\n\t\t}\n\n\t\tvar missingKeywords = _.difference(CONST.NPM_WIDGET_KEYWORDS, pkg.keywords || []);\n\t\tif (missingKeywords.length > 0) {\n\t\t\treturn logger.warn('Expected \"' + pFile + '\" to have missing keywords \"' + missingKeywords.join('\", \"') + '\"');\n\t\t}\n\n\t\treturn collection;\n\t}\n\n\tfunction walkWidgetDependencies(id) {\n\t\tvar collection = collections[id];\n\n\t\tif (!collection) {\n\t\t\tcollection = findWidgetAsNodeModule(id);\n\n\t\t\tif (!collection) {\n\t\t\t\tnotFound.push(id);\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\n\t\tdirs.push(collection);\n\t\tfor (var dependency in collection.manifest.dependencies) {\n\t\t\twalkWidgetDependencies(dependency);\n\t\t}\n\t}\n\n\t// walk the dependencies, tracking any missing widgets\n\tvar notFound = [];\n\tfor (var id in appWidgets) {\n\t\twalkWidgetDependencies(id);\n\t}\n\n\t// if there are missing widgets, abort and tell the developer which ones\n\tif (!!notFound.length) { // eslint-disable-line no-extra-boolean-cast\n\t\texports.die([\n\t\t\t'config.json references non-existent widgets: ' + JSON.stringify(notFound),\n\t\t\t'If you are not using these widgets, remove them from your config.json dependencies.',\n\t\t\t'If you are using them, add them to your project\\'s widget folder or as NPM package.'\n\t\t]);\n\t}\n\n\treturn dirs;\n};\n\nexports.properCase = function(n) {\n\treturn n.charAt(0).toUpperCase() + n.substring(1);\n};\n\nexports.ucfirst = function (text) {\n\tif (!text)\n\t\treturn text;\n\treturn text[0].toUpperCase() + text.substr(1);\n};\n\nexports.lcfirst = function (text) {\n\tif (!text)\n\t\treturn text;\n\treturn text[0].toLowerCase() + text.substr(1);\n};\n\nexports.trim = function(line) {\n\treturn String(line).replace(/^\\s\\s*/, '').replace(/\\s\\s*$/, '');\n};\n\nexports.rmdirContents = function(dir, exceptions) {\n\tvar files;\n\ttry {\n\t\tfiles = fs.readdirSync(dir);\n\t} catch (e) {\n\t\treturn;\n\t}\n\n\tfor (var i = 0, l = files.length; i < l; i++) {\n\t\tvar currFile = path.join(dir, files[i]);\n\t\tvar stat = fs.lstatSync(currFile);\n\n\t\t// process the exceptions\n\t\tvar result = _.find(exceptions, function(exception) {\n\t\t\tif (exception instanceof RegExp) {\n\t\t\t\treturn exception.test(files[i]);\n\t\t\t} else {\n\t\t\t\treturn files[i] === exception;\n\t\t\t}\n\t\t});\n\n\t\t// skip any exceptions\n\t\tif (result) {\n\t\t\tcontinue;\n\t\t// use wrench to delete directories\n\t\t} else if (stat.isDirectory()) {\n\t\t\twrench.rmdirSyncRecursive(currFile, true);\n\t\t// unlink any files or links\n\t\t} else {\n\t\t\tfs.unlinkSync(currFile);\n\t\t}\n\t}\n};\n\nexports.resolveAppHome = function() {\n\tvar indexView = path.join(CONST.DIR.VIEW, CONST.NAME_DEFAULT + '.' + CONST.FILE_EXT.VIEW);\n\tvar paths = [ path.join('.', 'app'), path.join('.') ];\n\n\t// Do we have an Alloy project? Find views/index.xml.\n\tfor (var i = 0; i < paths.length; i++) {\n\t\tpaths[i] = path.resolve(paths[i]);\n\t\tvar testPath = path.join(paths[i], indexView);\n\t\tif (fs.existsSync(testPath)) {\n\t\t\treturn paths[i];\n\t\t}\n\t}\n\n\t// Report error, show the paths searched.\n\tvar errs = [ 'No valid Alloy project found at the following paths (no \"views/index.xml\"):' ];\n\terrs.push(paths);\n\texports.die(errs);\n};\n\nexports.copyFileSync = function(srcFile, destFile) {\n\tvar BUF_LENGTH = 64 * 1024,\n\t\tbuff,\n\t\tbytesRead,\n\t\tfdr,\n\t\tfdw,\n\t\tpos;\n\tbuff = new Buffer(BUF_LENGTH);\n\tfdr = fs.openSync(srcFile, 'r');\n\texports.ensureDir(path.dirname(destFile));\n\tfdw = fs.openSync(destFile, 'w');\n\tbytesRead = 1;\n\tpos = 0;\n\twhile (bytesRead > 0) {\n\t\tbytesRead = fs.readSync(fdr, buff, 0, BUF_LENGTH, pos);\n\t\tfs.writeSync(fdw, buff, 0, bytesRead);\n\t\tpos += bytesRead;\n\t}\n\tfs.closeSync(fdr);\n\treturn fs.closeSync(fdw);\n};\n\nexports.ensureDir = function(p) {\n\tif (!fs.existsSync(p)) {\n\t\twrench.mkdirSyncRecursive(p, 0755);\n\t}\n};\n\nexports.die = function(msg, e) {\n\tif (e) {\n\t\tlogger.error(exports.createErrorOutput(msg, e));\n\t} else {\n\t\tlogger.error(msg);\n\t}\n\tprocess.exit(1);\n};\n\nexports.dieWithNode = function(node, msg) {\n\tmsg = _.isArray(msg) ? msg : [msg];\n\tmsg.unshift('Error with <' + node.nodeName + '> at line ' + node.lineNumber);\n\texports.die(msg);\n};\n\nexports.changeTime = function(file) {\n\tif (!fs.existsSync(file)) { return -1; }\n\tvar stat = fs.statSync(file);\n\treturn Math.max(stat.mtime.getTime(), stat.ctime.getTime());\n};\n\nexports.stripColors = function(str) {\n\treturn str.replace(/\\x1B\\[([0-9]{1,2}(;[0-9]{1,2})?)?[m|K]/g, '');\n};\n\nexports.installPlugin = function(alloyPath, projectPath) {\n\tvar id = 'ti.alloy';\n\tvar plugins = {\n\t\tplugin: {\n\t\t\tfile: CONST.PLUGIN_FILE,\n\t\t\tsrc: path.join(alloyPath, 'Alloy', 'plugin'),\n\t\t\tdest: path.join(projectPath, 'plugins', id)\n\t\t},\n\t\thook: {\n\t\t\tfile: CONST.HOOK_FILE,\n\t\t\tsrc: path.join(alloyPath, 'hooks'),\n\t\t\tdest: path.join(projectPath, 'plugins', id, 'hooks')\n\t\t},\n\t\tcleanhook: {\n\t\t\tfile: CONST.HOOK_FILE_CLEAN,\n\t\t\tsrc: path.join(alloyPath, 'hooks'),\n\t\t\tdest: path.join(projectPath, 'plugins', id, 'hooks')\n\t\t}\n\t};\n\n\t_.each(plugins, function(o, type) {\n\t\tvar srcFile = path.join(o.src, o.file);\n\t\tvar destFile = path.join(o.dest, o.file);\n\n\t\t// skip if the src and dest are the same file\n\t\tif (fs.existsSync(destFile) &&\n\t\t\tfs.readFileSync(srcFile, 'utf8') === fs.readFileSync(destFile, 'utf8')) {\n\t\t\treturn;\n\t\t}\n\t\texports.ensureDir(o.dest);\n\t\texports.copyFileSync(srcFile, destFile);\n\n\t\tlogger.info('Deployed ti.alloy ' + type + ' to ' + destFile);\n\t});\n\n\t// add the plugin to tiapp.xml, if necessary\n\ttiapp.init(path.join(projectPath, 'tiapp.xml'));\n\ttiapp.installPlugin({\n\t\tid: 'ti.alloy',\n\t\tversion: '1.0'\n\t});\n};\n\nexports.normalizeReturns = function(s) {\n\treturn s.replace(/\\r\\n/g, '\\n');\n};\n\nexports.createHash = function(files) {\n\tif (_.isString(files)) {\n\t\tfiles = [files];\n\t} else if (!_.isArray(files)) {\n\t\tthrow new TypeError('bad argument');\n\t}\n\n\tvar source = '';\n\t_.each(files, function(f) {\n\t\tsource += util.format('%s\\n%s\\n', f, fs.existsSync(f) ? fs.readFileSync(f, 'utf8') : '');\n\t});\n\n\treturn crypto.createHash('md5').update(source).digest('hex');\n};\n\nexports.createHashFromString = function(string) {\n\tif (!_.isString(string)) {\n\t\tthrow new TypeError('bad argument');\n\t}\n\treturn crypto.createHash('md5').update(string).digest('hex');\n};\n\nexports.proxyPropertyNameFromFullname = function(fullname) {\n\tvar nameParts = fullname.split('.');\n\treturn exports.lcfirst(nameParts[nameParts.length - 1]);\n};\n\n/*\nTwo date-related functions for ALOY-263\n\t- used by compile/parsers/Ti.UI.Picker.js and compile/styler.js\n*/\nexports.isValidDate = function(d, dateField) {\n\t// not using _.isDate() because it accepts some invalid date strings\n\tif (!require('moment')(d).isValid()) {\n\t\texports.die('Invalid date string. ' + dateField + \" must be a string that can be parsed by MomentJS's `moment()` constructor.\");\n\t} else {\n\t\treturn true;\n\t}\n};\nexports.createDate = function(val) {\n\treturn require('moment')(val).toDate();\n};\n\nexports.isLocaleAlias = function(string) {\n\treturn /^\\s*L\\((['\\\"])(.+)\\1\\)\\s*$/.test(string);\n};\n\nexports.getDeploymentTargets = function(projDir) {\n\tvar tiappPath = path.join(projDir, 'tiapp.xml'),\n\t\ttiappDoc,\n\t\ttargets;\n\n\tif (fs.existsSync(tiappPath)) {\n\t\ttiapp.init(tiappPath);\n\t\ttargets = tiapp.getDeploymentTargets().join(',');\n\t} else {\n\t\ttargets = CONST.PLATFORMS.join(',');\n\t}\n\n\treturn targets;\n};\n","/home/travis/build/npmtest/node-npmtest-alloy/node_modules/alloy/Alloy/tiapp.js":"var fs = require('fs'),\n\tpath = require('path'),\n\tXMLSerializer = require('xmldom').XMLSerializer,\n\tpkg = require('../package'),\n\tU = require('./utils'),\n\tCONST = require('./common/constants'),\n\tlogger = require('./logger');\n\nvar DEFAULT_TIAPP = path.join('.', 'tiapp.xml');\n\nvar tiapp = {},\n\ttiappFile, doc;\n\n// initialize the project folder\ntiapp.init = function(file) {\n\ttiappFile = file || DEFAULT_TIAPP;\n\tdoc = tiapp.parse(tiappFile);\n};\n\n// Return an XML document object representing the tiapp.xml file\ntiapp.parse = function(file) {\n\tfile = file || tiappFile;\n\tif (!fs.existsSync(file)) {\n\t\tU.die('tiapp.xml file does not exist at \"' + file + '\"');\n\t}\n\treturn U.XML.parseFromFile(file);\n};\n\n// Get the Titanium SDK version as a string\n// Get the Titanium SDK version as a string\ntiapp.getSdkVersion = function() {\n\tvar elems = doc.documentElement.getElementsByTagName('sdk-version');\n\tif (elems && elems.length > 0) {\n\t\treturn U.XML.getNodeText(elems.item(elems.length - 1));\n\t} else {\n\t\tif (process.env.sdk) {\n\t\t\treturn process.env.sdk;\n\t\t} else {\n\t\t\treturn getSdkSelectVersion();\n\t\t}\n\t}\n};\nfunction getSdkSelectVersion() {\n\tvar homeDir = process.env[(process.platform == 'win32') ? 'USERPROFILE' : 'HOME'],\n\t\tfile = path.join(homeDir, '.titanium', 'config.json');\n\tif (!fs.existsSync(file)) {\n\t\tU.die('Titanium configuration file does not exist at \"' + file + '\"');\n\t}\n\tvar ticonfig = JSON.parse(fs.readFileSync(file, {encoding: 'utf8'}));\n\treturn ticonfig.sdk.selected;\n}\n\n// Get the value of a property from the tiapp.xml\ntiapp.getProperty = function(name) {\n\tvar props = doc.documentElement.getElementsByTagName('property');\n\tfor (var i = 0; i < props.length; i++) {\n\t\tif (props.item(i).getAttribute('name') === name) {\n\t\t\treturn props.item(i);\n\t\t}\n\t}\n\treturn null;\n};\n\n// Add a module to the tiapp.xml\ntiapp.installModule = function(opts) {\n\tinstall('module', opts);\n};\n\n// Add a plugin to the tiapp.xml\ntiapp.installPlugin = function(opts) {\n\tinstall('plugin', opts);\n};\n\n// make sure the target TiSDK version meets the minimum for Alloy\ntiapp.validateSdkVersion = function() {\n\tvar tiVersion = tiapp.getSdkVersion();\n\tif (tiVersion === null) {\n\t\tlogger.warn('Unable to determine Titanium SDK version from tiapp.xml.');\n\t\tlogger.warn('Your app may have unexpected behavior. Make sure your tiapp.xml is valid.');\n\t} else if (tiapp.version.lt(tiVersion, CONST.MINIMUM_TI_SDK)) {\n\t\tlogger.error('Alloy ' + pkg.version + ' requires Titanium SDK ' +\n\t\t\tCONST.MINIMUM_TI_SDK + ' or higher.');\n\t\tlogger.error('\"' + tiVersion + '\" was found in the \"sdk-version\" field of your tiapp.xml.');\n\t\tlogger.error('If you are building with the legacy titanium.py script and are specifying ');\n\t\tlogger.error('an SDK version as a CLI argument that is different than the one in your ');\n\t\tlogger.error('tiapp.xml, please change the version in your tiapp.xml file.');\n\t\tprocess.exit(1);\n\t}\n};\n\n// version comparison functions\ntiapp.version = {\n\tcompare: function(v1, v2) {\n\t\t// use the tiapp.xml version if v2 is not specified\n\t\tif (typeof v2 === 'undefined') {\n\t\t\tv2 = v1;\n\t\t\tv1 = tiapp.getSdkVersion();\n\t\t}\n\n\t\tvar parts1 = (v1 || '').split('.'),\n\t\t\tparts2 = (v2 || '').split('.');\n\n\t\tfor (var i = 0; i < 3; i++) {\n\t\t\tvar p1 = parseInt(parts1[i] || 0, 10),\n\t\t\t\tp2 = parseInt(parts2[i] || 0, 10);\n\t\t\tif (p1 > p2) {\n\t\t\t\treturn 1;\n\t\t\t} else if (p1 < p2) {\n\t\t\t\treturn -1;\n\t\t\t}\n\t\t}\n\n\t\treturn 0;\n\t},\n\teq: function(v1, v2) { return tiapp.version.compare(v1, v2) === 0; },\n\tgt: function(v1, v2) { return tiapp.version.compare(v1, v2) === 1; },\n\tgte: function(v1, v2) { return tiapp.version.compare(v1, v2) !== -1; },\n\tlt: function(v1, v2) { return tiapp.version.compare(v1, v2) === -1; },\n\tlte: function(v1, v2) { return tiapp.version.compare(v1, v2) !== 1; },\n\tneq: function(v1, v2) { return tiapp.version.compare(v1, v2) !== 0; }\n};\n\ntiapp.getDeploymentTargets = function() {\n\tvar deployment = doc.documentElement.getElementsByTagName('deployment-targets'),\n\t\tresults = [];\n\n\tif (deployment.length > 0) {\n\t\tvar targets = deployment.item(0).getElementsByTagName('target');\n\t\tfor (var i = 0, j = targets.length; i < j; i++) {\n\t\t\tvar target = targets.item(i);\n\t\t\tif (U.XML.getNodeText(target) === 'true') {\n\t\t\t\tvar platform = target.getAttribute('device');\n\t\t\t\tif (platform === 'iphone' || platform === 'ipad') {\n\t\t\t\t\tplatform = 'ios';\n\t\t\t\t}\n\n\t\t\t\tif (results.indexOf(platform) === -1) {\n\t\t\t\t\tresults.push(platform);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn results;\n};\n\nfunction install(type, opts) {\n\ttype = type || 'module';\n\topts = opts || {};\n\n\tvar err = 'Project creation failed. Unable to install ' + type + ' \"' +\n\t\t(opts.name || opts.id) + '\"';\n\n\t// read the tiapp.xml file\n\tvar collection = doc.documentElement.getElementsByTagName(type + 's');\n\tvar found = false;\n\n\t// Determine if the module or plugin is already installed\n\tif (collection.length > 0) {\n\t\tvar items = collection.item(0).getElementsByTagName(type);\n\t\tif (items.length > 0) {\n\t\t\tfor (var c = 0; c < items.length; c++) {\n\t\t\t\tvar theItem = items.item(c);\n\t\t\t\tvar theItemText = U.XML.getNodeText(theItem);\n\t\t\t\tif (theItemText == opts.id) {\n\t\t\t\t\tfound = true;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t// install module or plugin\n\tif (!found) {\n\t\t// create the node to be inserted\n\t\tvar node = doc.createElement(type);\n\t\tvar text = doc.createTextNode(opts.id);\n\t\tif (opts.platform) {\n\t\t\tnode.setAttribute('platform', opts.platform);\n\t\t}\n\t\tif (opts.version) {\n\t\t\tnode.setAttribute('version', opts.version);\n\t\t}\n\t\tnode.appendChild(text);\n\n\t\t// add the node into tiapp.xml\n\t\tvar pna = null;\n\t\tif (collection.length === 0) {\n\t\t\tvar pn = doc.createElement(type + 's');\n\t\t\tdoc.documentElement.appendChild(pn);\n\t\t\tdoc.documentElement.appendChild(doc.createTextNode('\\n'));\n\t\t\tpna = pn;\n\t\t} else {\n\t\t\tpna = collection.item(0);\n\t\t}\n\t\tpna.appendChild(node);\n\t\tpna.appendChild(doc.createTextNode('\\n'));\n\n\t\t// serialize the xml and write to tiapp.xml\n\t\tvar serializer = new XMLSerializer();\n\t\tvar newxml = serializer.serializeToString(doc);\n\t\tfs.writeFileSync(tiappFile, newxml, 'utf8');\n\n\t\tlogger.info('Installed \"' + opts.id + '\" ' + type + ' to ' + tiappFile);\n\t}\n\n}\n\nmodule.exports = tiapp;\n","/home/travis/build/npmtest/node-npmtest-alloy/node_modules/alloy/Alloy/common/constants.js":"var isTitanium = typeof Titanium !== 'undefined';\nvar _, generatePlatformArray;\n\nif (isTitanium) {\n\t_ = require('/alloy/underscore')._;\n} else {\n\tvar platforms = require('../../platforms/index');\n\t_ = require('../lib/alloy/underscore')._;\n\n\t// iterate through supported platforms to create specific constants\n\tgeneratePlatformArray = function(key) {\n\t\tvar ret = [];\n\t\t_.each(_.keys(platforms), function(p) {\n\t\t\tret.push(platforms[p][key]);\n\t\t});\n\t\treturn ret;\n\t};\n\n\t// generate compile time constants based on supported platforms\n\texports.PLATFORMS = generatePlatformArray('platform');\n\texports.PLATFORM_FOLDERS_ALLOY = generatePlatformArray('alloyFolder');\n\texports.PLATFORM_FOLDERS = generatePlatformArray('titaniumFolder');\n}\n\n// General default values\nexports.ALLOY_DIR = 'app';\nexports.ALLOY_RUNTIME_DIR = 'alloy';\nexports.RESOURCES_DIR = 'Resources';\nexports.NAME_DEFAULT = 'index';\nexports.NAME_WIDGET_DEFAULT = 'widget';\nexports.NPM_WIDGET_PREFIX = 'alloy-widget-';\nexports.NPM_WIDGET_KEYWORDS = ['appcelerator', 'titanium', 'alloy', 'widget'];\nexports.GLOBAL_STYLE = 'app.tss';\nexports.ROOT_NODE = 'Alloy';\nexports.NAMESPACE_DEFAULT = 'Ti.UI';\nexports.REQUIRE_TYPE_DEFAULT = 'view';\nexports.PLUGIN_NAME = 'ti.alloy';\nexports.EXPR_PREFIX = '#';\nexports.PLUGIN_FILE = 'plugin.py';\nexports.HOOK_FILE = 'alloy.js';\nexports.HOOK_FILE_CLEAN = 'deepclean.js';\nexports.MINIMUM_TI_SDK = '3.0.0';\nexports.ITEM_TEMPLATE_VAR = '__itemTemplate';\nexports.PARENT_SYMBOL_VAR = '__parentSymbol';\nexports.WIDGET_OBJECT = 'Widget';\nexports.SKIP_EVENT_HANDLING = ['Ti.UI.ListItem', 'Alloy.Abstract.ItemTemplate'];\nexports.ADAPTERS = ['localStorage', 'properties', 'sql'];\nexports.CONTROLLER_NODES = ['Alloy.Require', 'Alloy.Widget'];\nexports.DEFAULT_BACKBONE_VERSION = '0.9.2';\nexports.SUPPORTED_BACKBONE_VERSIONS = ['0.9.2', '1.1.2'];\n\n// property names\nexports.CLASS_PROPERTY = 'classes';\nexports.APINAME_PROPERTY = 'apiName';\nexports.AUTOSTYLE_PROPERTY = 'autoStyle';\nexports.DOCROOT_MODULE_PROPERTY = 'module';\nexports.DOCROOT_BASECONTROLLER_PROPERTY = 'baseController';\n\n// Constants related to model-view binding\nexports.BIND_PROPERTIES = ['dataCollection', 'dataFilter', 'dataTransform', 'dataFunction'];\nexports.BIND_COLLECTION = 'dataCollection';\nexports.BIND_WHERE = 'dataFilter';\nexports.BIND_TRANSFORM = 'dataTransform';\nexports.BIND_FUNCTION = 'dataFunction';\nexports.BIND_TRANSFORM_VAR = '__transform';\nexports.BIND_MODEL_VAR = '$model';\nexports.MODEL_ELEMENTS = ['Alloy.Collection', 'Alloy.Model'];\nexports.MODEL_BINDING_EVENTS = 'fetch change destroy';\nexports.COLLECTION_BINDING_EVENTS = 'fetch destroy change add remove reset';\n\n// Listings for supported platforms and commands\nexports.INSTALL_TYPES = ['plugin'];\nexports.GENERATE_TARGETS = ['controller', 'jmk', 'model', 'migration', 'view', 'widget', 'style'];\nexports.DEPLOY_TYPES = [\n\t{ key: 'ENV_DEV', value: 'development' },\n\t{ key: 'ENV_DEVELOPMENT', value: 'development' },\n\t{ key: 'ENV_TEST', value: 'test' },\n\t{ key: 'ENV_PROD', value: 'production' },\n\t{ key: 'ENV_PRODUCTION', value: 'production' }\n];\nexports.DIST_TYPES = [\n\t{ key: 'DIST_ADHOC', value: ['dist-adhoc'] },\n\t{ key: 'DIST_STORE', value: ['dist-appstore', 'dist-playstore'] }\n];\n\n// mappings of file extensions and folders for each file type\nexports.FILE_EXT = {\n\tVIEW: 'xml',\n\tSTYLE: 'tss',\n\tMODEL: 'js',\n\tMODELCODE: 'js',\n\tMIGRATION: 'js',\n\tCONTROLLER: 'js',\n\tCOMPONENT: 'js',\n\tCONFIG: 'json',\n\tJMK: 'jmk',\n\tMAP: 'map'\n};\nexports.DIR = {\n\tVIEW: 'views',\n\tSTYLE: 'styles',\n\tRUNTIME_STYLE: 'styles',\n\tCONTROLLER: 'controllers',\n\tMODEL: 'models',\n\tMODELCODE: 'models',\n\tMIGRATION: 'migrations',\n\tCONFIG: 'config',\n\tASSETS: 'assets',\n\tWIDGET: 'widgets',\n\tLIB: 'lib',\n\tCOMPONENT: 'controllers',\n\tMAP: 'build/map',\n\tVENDOR: 'vendor',\n\tTHEME: 'themes',\n\tBUILD: 'build/alloy',\n\tI18N: 'i18n',\n\tPLATFORM: 'platform'\n};\n// folders/files to exclude when copying and processing files\n// RegEx format: must escape special chars - so use \\.svn not .svn\nexports.EXCLUDED_FILES = [\n\t'\\\\.svn', '\\\\.git'\n];\n\n// constants identifying JS reserved words\nexports.JS_RESERVED = [\n\t'break', 'case', 'catch', 'continue', 'debugger', 'default', 'delete',\n\t'do', 'else', 'finally', 'for', 'function', 'if', 'in', 'instanceof',\n\t'new', 'return', 'switch', 'this', 'throw', 'try', 'typeof', 'var',\n\t'void', 'while', 'with'\n];\nexports.JS_RESERVED_FUTURE = [\n\t'class', 'enum', 'export', 'extends', 'import', 'super', 'implements',\n\t'interface', 'let', 'package', 'private', 'protected', 'public',\n\t'static', 'yield'\n];\nexports.JS_RESERVED_ALL = _.union(exports.JS_RESERVED, exports.JS_RESERVED_FUTURE);\n\n// constants for implicit namespaces in markup\nvar NS_ALLOY = 'Alloy',\n\tNS_ALLOY_ABSTRACT = 'Alloy.Abstract',\n\tNS_TI_ANDROID = 'Ti.Android',\n\tNS_TI_MAP = 'Ti.Map',\n\tNS_TI_MEDIA = 'Ti.Media',\n\tNS_TI_UI_IOS = 'Ti.UI.iOS',\n\tNS_TI_UI_IPAD = 'Ti.UI.iPad',\n\tNS_TI_UI_IPHONE = 'Ti.UI.iPhone',\n\tNS_TI_UI_MOBILEWEB = 'Ti.UI.MobileWeb',\n\tNS_TI_UI_WINDOWS = 'Ti.UI.Windows';\n\nexports.IMPLICIT_NAMESPACES = {\n\t// Alloy\n\tCollection: NS_ALLOY,\n\tModel: NS_ALLOY,\n\tModule: NS_ALLOY,\n\tRequire: NS_ALLOY,\n\tWidget: NS_ALLOY,\n\n\t// Alloy.Abstract\n\tButtonNames: NS_ALLOY_ABSTRACT,\n\tButtonName: NS_ALLOY_ABSTRACT,\n\tBarItemTypes: NS_ALLOY_ABSTRACT,\n\tBarItemType: NS_ALLOY_ABSTRACT,\n\tCoverFlowImageTypes: NS_ALLOY_ABSTRACT,\n\tCoverFlowImageType: NS_ALLOY_ABSTRACT,\n\tFlexSpace: NS_ALLOY_ABSTRACT,\n\tFixedSpace: NS_ALLOY_ABSTRACT,\n\tImages: NS_ALLOY_ABSTRACT,\n\tItem: NS_ALLOY_ABSTRACT,\n\tItems: NS_ALLOY_ABSTRACT,\n\tItemTemplate: NS_ALLOY_ABSTRACT,\n\tLabels: NS_ALLOY_ABSTRACT,\n\tOption: NS_ALLOY_ABSTRACT,\n\tOptions: NS_ALLOY_ABSTRACT,\n\tTemplates: NS_ALLOY_ABSTRACT,\n\tPreview: NS_ALLOY_ABSTRACT,\n\tActions: NS_ALLOY_ABSTRACT,\n\n\t// Ti.Android\n\tMenu: NS_TI_ANDROID,\n\tMenuItem: NS_TI_ANDROID,\n\tActionBar: NS_TI_ANDROID,\n\n\t// Ti.UI.Android\n\tCardView: 'Ti.UI.Android',\n\n\t// Ti.Map\n\tAnnotation: NS_TI_MAP,\n\n\t// Ti.Media\n\tVideoPlayer: NS_TI_MEDIA,\n\tMusicPlayer: NS_TI_MEDIA,\n\n\t// Ti.UI.iOS\n\tAdView: NS_TI_UI_IOS,\n\tBlurView: NS_TI_UI_IOS,\n\tCoverFlowView: NS_TI_UI_IOS,\n\tDocumentViewer: NS_TI_UI_IOS,\n\tLivePhotoView: NS_TI_UI_IOS,\n\tNavigationWindow: NS_TI_UI_IOS,\n\tSplitWindow: NS_TI_UI_IOS,\n\tTabbedBar: NS_TI_UI_IOS,\n\tToolbar: NS_TI_UI_IOS,\n\tPreviewContext: NS_TI_UI_IOS,\n\tPreviewAction: NS_TI_UI_IOS,\n\tPreviewActionGroup: NS_TI_UI_IOS,\n\tMenuPopup: NS_TI_UI_IOS,\n\tStepper: NS_TI_UI_IOS,\n\n\t// Ti.UI.iPad\n\tPopover: NS_TI_UI_IPAD,\n\n\t// Ti.UI.iPhone\n\tNavigationGroup: isTitanium && Ti.Platform.osname === 'mobileweb' ?\n\t\tNS_TI_UI_MOBILEWEB : NS_TI_UI_IPHONE,\n\tStatusBar: NS_TI_UI_IPHONE,\n\n\t// Ti.UI.Windows\n\tCommandBar: NS_TI_UI_WINDOWS,\n\tAppBarButton: NS_TI_UI_WINDOWS,\n\tAppBarToggleButton: NS_TI_UI_WINDOWS,\n\tAppBarSeparator: NS_TI_UI_WINDOWS,\n\n\t// Ti.UI.Window\n\tLeftNavButton: 'Ti.UI.Window',\n\tRightNavButton: 'Ti.UI.Window',\n\tLeftNavButtons: 'Ti.UI.Window',\n\tRightNavButtons: 'Ti.UI.Window',\n\tTitleControl: 'Ti.UI.Window',\n\tWindowToolbar: 'Ti.UI.Window',\n\n\t// Ti.UI.iPad.Popover\n\tContentView: 'Ti.UI.iPad.Popover',\n\n\t// Table and List proxy properties\n\tFooterView: '_ProxyProperty._Lists',\n\tHeaderView: '_ProxyProperty._Lists',\n\tHeaderPullView: '_ProxyProperty._Lists',\n\tPullView: '_ProxyProperty._Lists',\n\tSearch: '_ProxyProperty._Lists',\n\tSearchView: '_ProxyProperty._Lists',\n\n\t// misc proxy properties\n\tRightButton: '_ProxyProperty',\n\tLeftButton: '_ProxyProperty',\n\tKeyboardToolbar: '_ProxyProperty',\n\tActionView: '_ProxyProperty'\n\n};\n\n// properties named with \"on\" that aren't used to signify event listeners\nexports.SPECIAL_PROPERTY_NAMES = [\n\t'onHomeIconItemSelected',\n\t'onTintColor',\n\t'onCreateOptionsMenu',\n\t'onPrepareOptionsMenu'\n];\n\nexports.COMMANDS = {\n\tGENERATE: 'generate'\n};\n","/home/travis/build/npmtest/node-npmtest-alloy/node_modules/alloy/platforms/index.js":"var fs = require('fs'),\n\tpath = require('path'),\n\t_ = require('../Alloy/lib/alloy/underscore')._;\n\nmodule.exports = (function() {\n\tvar obj = {};\n\t_.each(fs.readdirSync(__dirname), function(file) {\n\t\tif (fs.existsSync(path.join(__dirname, file, 'index.js'))) {\n\t\t\tobj[file] = require('./' + file + '/index');\n\t\t}\n\t});\n\treturn obj;\n})();","/home/travis/build/npmtest/node-npmtest-alloy/node_modules/alloy/Alloy/lib/alloy/underscore.js":"//     Underscore.js 1.6.0\n//     http://underscorejs.org\n//     (c) 2009-2014 Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors\n//     Underscore may be freely distributed under the MIT license.\n\n(function() {\n\n  // Baseline setup\n  // --------------\n\n  // Establish the root object, `window` in the browser, or `exports` on the server.\n  var root = this;\n\n  // Save the previous value of the `_` variable.\n  var previousUnderscore = root._;\n\n  // Establish the object that gets returned to break out of a loop iteration.\n  var breaker = {};\n\n  // Save bytes in the minified (but not gzipped) version:\n  var ArrayProto = Array.prototype, ObjProto = Object.prototype, FuncProto = Function.prototype;\n\n  // Create quick reference variables for speed access to core prototypes.\n  var\n    push             = ArrayProto.push,\n    slice            = ArrayProto.slice,\n    concat           = ArrayProto.concat,\n    toString         = ObjProto.toString,\n    hasOwnProperty   = ObjProto.hasOwnProperty;\n\n  // All **ECMAScript 5** native function implementations that we hope to use\n  // are declared here.\n  var\n    nativeForEach      = ArrayProto.forEach,\n    nativeMap          = ArrayProto.map,\n    nativeReduce       = ArrayProto.reduce,\n    nativeReduceRight  = ArrayProto.reduceRight,\n    nativeFilter       = ArrayProto.filter,\n    nativeEvery        = ArrayProto.every,\n    nativeSome         = ArrayProto.some,\n    nativeIndexOf      = ArrayProto.indexOf,\n    nativeLastIndexOf  = ArrayProto.lastIndexOf,\n    nativeIsArray      = Array.isArray,\n    nativeKeys         = Object.keys,\n    nativeBind         = FuncProto.bind;\n\n  // Create a safe reference to the Underscore object for use below.\n  var _ = function(obj) {\n    if (obj instanceof _) return obj;\n    if (!(this instanceof _)) return new _(obj);\n    this._wrapped = obj;\n  };\n\n  // Export the Underscore object for **Node.js**, with\n  // backwards-compatibility for the old `require()` API. If we're in\n  // the browser, add `_` as a global object via a string identifier,\n  // for Closure Compiler \"advanced\" mode.\n  if (typeof exports !== 'undefined') {\n    if (typeof module !== 'undefined' && module.exports) {\n      exports = module.exports = _;\n    }\n    exports._ = _;\n  } else {\n    root._ = _;\n  }\n\n  // Current version.\n  _.VERSION = '1.6.0';\n\n  // Collection Functions\n  // --------------------\n\n  // The cornerstone, an `each` implementation, aka `forEach`.\n  // Handles objects with the built-in `forEach`, arrays, and raw objects.\n  // Delegates to **ECMAScript 5**'s native `forEach` if available.\n  var each = _.each = _.forEach = function(obj, iterator, context) {\n    if (obj == null) return obj;\n    if (nativeForEach && obj.forEach === nativeForEach) {\n      obj.forEach(iterator, context);\n    } else if (obj.length === +obj.length) {\n      for (var i = 0, length = obj.length; i < length; i++) {\n        if (iterator.call(context, obj[i], i, obj) === breaker) return;\n      }\n    } else {\n      var keys = _.keys(obj);\n      for (var i = 0, length = keys.length; i < length; i++) {\n        if (iterator.call(context, obj[keys[i]], keys[i], obj) === breaker) return;\n      }\n    }\n    return obj;\n  };\n\n  // Return the results of applying the iterator to each element.\n  // Delegates to **ECMAScript 5**'s native `map` if available.\n  _.map = _.collect = function(obj, iterator, context) {\n    var results = [];\n    if (obj == null) return results;\n    if (nativeMap && obj.map === nativeMap) return obj.map(iterator, context);\n    each(obj, function(value, index, list) {\n      results.push(iterator.call(context, value, index, list));\n    });\n    return results;\n  };\n\n  var reduceError = 'Reduce of empty array with no initial value';\n\n  // **Reduce** builds up a single result from a list of values, aka `inject`,\n  // or `foldl`. Delegates to **ECMAScript 5**'s native `reduce` if available.\n  _.reduce = _.foldl = _.inject = function(obj, iterator, memo, context) {\n    var initial = arguments.length > 2;\n    if (obj == null) obj = [];\n    if (nativeReduce && obj.reduce === nativeReduce) {\n      if (context) iterator = _.bind(iterator, context);\n      return initial ? obj.reduce(iterator, memo) : obj.reduce(iterator);\n    }\n    each(obj, function(value, index, list) {\n      if (!initial) {\n        memo = value;\n        initial = true;\n      } else {\n        memo = iterator.call(context, memo, value, index, list);\n      }\n    });\n    if (!initial) throw new TypeError(reduceError);\n    return memo;\n  };\n\n  // The right-associative version of reduce, also known as `foldr`.\n  // Delegates to **ECMAScript 5**'s native `reduceRight` if available.\n  _.reduceRight = _.foldr = function(obj, iterator, memo, context) {\n    var initial = arguments.length > 2;\n    if (obj == null) obj = [];\n    if (nativeReduceRight && obj.reduceRight === nativeReduceRight) {\n      if (context) iterator = _.bind(iterator, context);\n      return initial ? obj.reduceRight(iterator, memo) : obj.reduceRight(iterator);\n    }\n    var length = obj.length;\n    if (length !== +length) {\n      var keys = _.keys(obj);\n      length = keys.length;\n    }\n    each(obj, function(value, index, list) {\n      index = keys ? keys[--length] : --length;\n      if (!initial) {\n        memo = obj[index];\n        initial = true;\n      } else {\n        memo = iterator.call(context, memo, obj[index], index, list);\n      }\n    });\n    if (!initial) throw new TypeError(reduceError);\n    return memo;\n  };\n\n  // Return the first value which passes a truth test. Aliased as `detect`.\n  _.find = _.detect = function(obj, predicate, context) {\n    var result;\n    any(obj, function(value, index, list) {\n      if (predicate.call(context, value, index, list)) {\n        result = value;\n        return true;\n      }\n    });\n    return result;\n  };\n\n  // Return all the elements that pass a truth test.\n  // Delegates to **ECMAScript 5**'s native `filter` if available.\n  // Aliased as `select`.\n  _.filter = _.select = function(obj, predicate, context) {\n    var results = [];\n    if (obj == null) return results;\n    if (nativeFilter && obj.filter === nativeFilter) return obj.filter(predicate, context);\n    each(obj, function(value, index, list) {\n      if (predicate.call(context, value, index, list)) results.push(value);\n    });\n    return results;\n  };\n\n  // Return all the elements for which a truth test fails.\n  _.reject = function(obj, predicate, context) {\n    return _.filter(obj, function(value, index, list) {\n      return !predicate.call(context, value, index, list);\n    }, context);\n  };\n\n  // Determine whether all of the elements match a truth test.\n  // Delegates to **ECMAScript 5**'s native `every` if available.\n  // Aliased as `all`.\n  _.every = _.all = function(obj, predicate, context) {\n    predicate || (predicate = _.identity);\n    var result = true;\n    if (obj == null) return result;\n    if (nativeEvery && obj.every === nativeEvery) return obj.every(predicate, context);\n    each(obj, function(value, index, list) {\n      if (!(result = result && predicate.call(context, value, index, list))) return breaker;\n    });\n    return !!result;\n  };\n\n  // Determine if at least one element in the object matches a truth test.\n  // Delegates to **ECMAScript 5**'s native `some` if available.\n  // Aliased as `any`.\n  var any = _.some = _.any = function(obj, predicate, context) {\n    predicate || (predicate = _.identity);\n    var result = false;\n    if (obj == null) return result;\n    if (nativeSome && obj.some === nativeSome) return obj.some(predicate, context);\n    each(obj, function(value, index, list) {\n      if (result || (result = predicate.call(context, value, index, list))) return breaker;\n    });\n    return !!result;\n  };\n\n  // Determine if the array or object contains a given value (using `===`).\n  // Aliased as `include`.\n  _.contains = _.include = function(obj, target) {\n    if (obj == null) return false;\n    if (nativeIndexOf && obj.indexOf === nativeIndexOf) return obj.indexOf(target) != -1;\n    return any(obj, function(value) {\n      return value === target;\n    });\n  };\n\n  // Invoke a method (with arguments) on every item in a collection.\n  _.invoke = function(obj, method) {\n    var args = slice.call(arguments, 2);\n    var isFunc = _.isFunction(method);\n    return _.map(obj, function(value) {\n      return (isFunc ? method : value[method]).apply(value, args);\n    });\n  };\n\n  // Convenience version of a common use case of `map`: fetching a property.\n  _.pluck = function(obj, key) {\n    return _.map(obj, _.property(key));\n  };\n\n  // Convenience version of a common use case of `filter`: selecting only objects\n  // containing specific `key:value` pairs.\n  _.where = function(obj, attrs) {\n    return _.filter(obj, _.matches(attrs));\n  };\n\n  // Convenience version of a common use case of `find`: getting the first object\n  // containing specific `key:value` pairs.\n  _.findWhere = function(obj, attrs) {\n    return _.find(obj, _.matches(attrs));\n  };\n\n  // Return the maximum element or (element-based computation).\n  // Can't optimize arrays of integers longer than 65,535 elements.\n  // See [WebKit Bug 80797](https://bugs.webkit.org/show_bug.cgi?id=80797)\n  _.max = function(obj, iterator, context) {\n    if (!iterator && _.isArray(obj) && obj[0] === +obj[0] && obj.length < 65535) {\n      return Math.max.apply(Math, obj);\n    }\n    var result = -Infinity, lastComputed = -Infinity;\n    each(obj, function(value, index, list) {\n      var computed = iterator ? iterator.call(context, value, index, list) : value;\n      if (computed > lastComputed) {\n        result = value;\n        lastComputed = computed;\n      }\n    });\n    return result;\n  };\n\n  // Return the minimum element (or element-based computation).\n  _.min = function(obj, iterator, context) {\n    if (!iterator && _.isArray(obj) && obj[0] === +obj[0] && obj.length < 65535) {\n      return Math.min.apply(Math, obj);\n    }\n    var result = Infinity, lastComputed = Infinity;\n    each(obj, function(value, index, list) {\n      var computed = iterator ? iterator.call(context, value, index, list) : value;\n      if (computed < lastComputed) {\n        result = value;\n        lastComputed = computed;\n      }\n    });\n    return result;\n  };\n\n  // Shuffle an array, using the modern version of the\n  // [Fisher-Yates shuffle](http://en.wikipedia.org/wiki/Fisher–Yates_shuffle).\n  _.shuffle = function(obj) {\n    var rand;\n    var index = 0;\n    var shuffled = [];\n    each(obj, function(value) {\n      rand = _.random(index++);\n      shuffled[index - 1] = shuffled[rand];\n      shuffled[rand] = value;\n    });\n    return shuffled;\n  };\n\n  // Sample **n** random values from a collection.\n  // If **n** is not specified, returns a single random element.\n  // The internal `guard` argument allows it to work with `map`.\n  _.sample = function(obj, n, guard) {\n    if (n == null || guard) {\n      if (obj.length !== +obj.length) obj = _.values(obj);\n      return obj[_.random(obj.length - 1)];\n    }\n    return _.shuffle(obj).slice(0, Math.max(0, n));\n  };\n\n  // An internal function to generate lookup iterators.\n  var lookupIterator = function(value) {\n    if (value == null) return _.identity;\n    if (_.isFunction(value)) return value;\n    return _.property(value);\n  };\n\n  // Sort the object's values by a criterion produced by an iterator.\n  _.sortBy = function(obj, iterator, context) {\n    iterator = lookupIterator(iterator);\n    return _.pluck(_.map(obj, function(value, index, list) {\n      return {\n        value: value,\n        index: index,\n        criteria: iterator.call(context, value, index, list)\n      };\n    }).sort(function(left, right) {\n      var a = left.criteria;\n      var b = right.criteria;\n      if (a !== b) {\n        if (a > b || a === void 0) return 1;\n        if (a < b || b === void 0) return -1;\n      }\n      return left.index - right.index;\n    }), 'value');\n  };\n\n  // An internal function used for aggregate \"group by\" operations.\n  var group = function(behavior) {\n    return function(obj, iterator, context) {\n      var result = {};\n      iterator = lookupIterator(iterator);\n      each(obj, function(value, index) {\n        var key = iterator.call(context, value, index, obj);\n        behavior(result, key, value);\n      });\n      return result;\n    };\n  };\n\n  // Groups the object's values by a criterion. Pass either a string attribute\n  // to group by, or a function that returns the criterion.\n  _.groupBy = group(function(result, key, value) {\n    _.has(result, key) ? result[key].push(value) : result[key] = [value];\n  });\n\n  // Indexes the object's values by a criterion, similar to `groupBy`, but for\n  // when you know that your index values will be unique.\n  _.indexBy = group(function(result, key, value) {\n    result[key] = value;\n  });\n\n  // Counts instances of an object that group by a certain criterion. Pass\n  // either a string attribute to count by, or a function that returns the\n  // criterion.\n  _.countBy = group(function(result, key) {\n    _.has(result, key) ? result[key]++ : result[key] = 1;\n  });\n\n  // Use a comparator function to figure out the smallest index at which\n  // an object should be inserted so as to maintain order. Uses binary search.\n  _.sortedIndex = function(array, obj, iterator, context) {\n    iterator = lookupIterator(iterator);\n    var value = iterator.call(context, obj);\n    var low = 0, high = array.length;\n    while (low < high) {\n      var mid = (low + high) >>> 1;\n      iterator.call(context, array[mid]) < value ? low = mid + 1 : high = mid;\n    }\n    return low;\n  };\n\n  // Safely create a real, live array from anything iterable.\n  _.toArray = function(obj) {\n    if (!obj) return [];\n    if (_.isArray(obj)) return slice.call(obj);\n    if (obj.length === +obj.length) return _.map(obj, _.identity);\n    return _.values(obj);\n  };\n\n  // Return the number of elements in an object.\n  _.size = function(obj) {\n    if (obj == null) return 0;\n    return (obj.length === +obj.length) ? obj.length : _.keys(obj).length;\n  };\n\n  // Array Functions\n  // ---------------\n\n  // Get the first element of an array. Passing **n** will return the first N\n  // values in the array. Aliased as `head` and `take`. The **guard** check\n  // allows it to work with `_.map`.\n  _.first = _.head = _.take = function(array, n, guard) {\n    if (array == null) return void 0;\n    if ((n == null) || guard) return array[0];\n    if (n < 0) return [];\n    return slice.call(array, 0, n);\n  };\n\n  // Returns everything but the last entry of the array. Especially useful on\n  // the arguments object. Passing **n** will return all the values in\n  // the array, excluding the last N. The **guard** check allows it to work with\n  // `_.map`.\n  _.initial = function(array, n, guard) {\n    return slice.call(array, 0, array.length - ((n == null) || guard ? 1 : n));\n  };\n\n  // Get the last element of an array. Passing **n** will return the last N\n  // values in the array. The **guard** check allows it to work with `_.map`.\n  _.last = function(array, n, guard) {\n    if (array == null) return void 0;\n    if ((n == null) || guard) return array[array.length - 1];\n    return slice.call(array, Math.max(array.length - n, 0));\n  };\n\n  // Returns everything but the first entry of the array. Aliased as `tail` and `drop`.\n  // Especially useful on the arguments object. Passing an **n** will return\n  // the rest N values in the array. The **guard**\n  // check allows it to work with `_.map`.\n  _.rest = _.tail = _.drop = function(array, n, guard) {\n    return slice.call(array, (n == null) || guard ? 1 : n);\n  };\n\n  // Trim out all falsy values from an array.\n  _.compact = function(array) {\n    return _.filter(array, _.identity);\n  };\n\n  // Internal implementation of a recursive `flatten` function.\n  var flatten = function(input, shallow, output) {\n    if (shallow && _.every(input, _.isArray)) {\n      return concat.apply(output, input);\n    }\n    each(input, function(value) {\n      if (_.isArray(value) || _.isArguments(value)) {\n        shallow ? push.apply(output, value) : flatten(value, shallow, output);\n      } else {\n        output.push(value);\n      }\n    });\n    return output;\n  };\n\n  // Flatten out an array, either recursively (by default), or just one level.\n  _.flatten = function(array, shallow) {\n    return flatten(array, shallow, []);\n  };\n\n  // Return a version of the array that does not contain the specified value(s).\n  _.without = function(array) {\n    return _.difference(array, slice.call(arguments, 1));\n  };\n\n  // Split an array into two arrays: one whose elements all satisfy the given\n  // predicate, and one whose elements all do not satisfy the predicate.\n  _.partition = function(array, predicate) {\n    var pass = [], fail = [];\n    each(array, function(elem) {\n      (predicate(elem) ? pass : fail).push(elem);\n    });\n    return [pass, fail];\n  };\n\n  // Produce a duplicate-free version of the array. If the array has already\n  // been sorted, you have the option of using a faster algorithm.\n  // Aliased as `unique`.\n  _.uniq = _.unique = function(array, isSorted, iterator, context) {\n    if (_.isFunction(isSorted)) {\n      context = iterator;\n      iterator = isSorted;\n      isSorted = false;\n    }\n    var initial = iterator ? _.map(array, iterator, context) : array;\n    var results = [];\n    var seen = [];\n    each(initial, function(value, index) {\n      if (isSorted ? (!index || seen[seen.length - 1] !== value) : !_.contains(seen, value)) {\n        seen.push(value);\n        results.push(array[index]);\n      }\n    });\n    return results;\n  };\n\n  // Produce an array that contains the union: each distinct element from all of\n  // the passed-in arrays.\n  _.union = function() {\n    return _.uniq(_.flatten(arguments, true));\n  };\n\n  // Produce an array that contains every item shared between all the\n  // passed-in arrays.\n  _.intersection = function(array) {\n    var rest = slice.call(arguments, 1);\n    return _.filter(_.uniq(array), function(item) {\n      return _.every(rest, function(other) {\n        return _.contains(other, item);\n      });\n    });\n  };\n\n  // Take the difference between one array and a number of other arrays.\n  // Only the elements present in just the first array will remain.\n  _.difference = function(array) {\n    var rest = concat.apply(ArrayProto, slice.call(arguments, 1));\n    return _.filter(array, function(value){ return !_.contains(rest, value); });\n  };\n\n  // Zip together multiple lists into a single array -- elements that share\n  // an index go together.\n  _.zip = function() {\n    var length = _.max(_.pluck(arguments, 'length').concat(0));\n    var results = new Array(length);\n    for (var i = 0; i < length; i++) {\n      results[i] = _.pluck(arguments, '' + i);\n    }\n    return results;\n  };\n\n  // Converts lists into objects. Pass either a single array of `[key, value]`\n  // pairs, or two parallel arrays of the same length -- one of keys, and one of\n  // the corresponding values.\n  _.object = function(list, values) {\n    if (list == null) return {};\n    var result = {};\n    for (var i = 0, length = list.length; i < length; i++) {\n      if (values) {\n        result[list[i]] = values[i];\n      } else {\n        result[list[i][0]] = list[i][1];\n      }\n    }\n    return result;\n  };\n\n  // If the browser doesn't supply us with indexOf (I'm looking at you, **MSIE**),\n  // we need this function. Return the position of the first occurrence of an\n  // item in an array, or -1 if the item is not included in the array.\n  // Delegates to **ECMAScript 5**'s native `indexOf` if available.\n  // If the array is large and already in sort order, pass `true`\n  // for **isSorted** to use binary search.\n  _.indexOf = function(array, item, isSorted) {\n    if (array == null) return -1;\n    var i = 0, length = array.length;\n    if (isSorted) {\n      if (typeof isSorted == 'number') {\n        i = (isSorted < 0 ? Math.max(0, length + isSorted) : isSorted);\n      } else {\n        i = _.sortedIndex(array, item);\n        return array[i] === item ? i : -1;\n      }\n    }\n    if (nativeIndexOf && array.indexOf === nativeIndexOf) return array.indexOf(item, isSorted);\n    for (; i < length; i++) if (array[i] === item) return i;\n    return -1;\n  };\n\n  // Delegates to **ECMAScript 5**'s native `lastIndexOf` if available.\n  _.lastIndexOf = function(array, item, from) {\n    if (array == null) return -1;\n    var hasIndex = from != null;\n    if (nativeLastIndexOf && array.lastIndexOf === nativeLastIndexOf) {\n      return hasIndex ? array.lastIndexOf(item, from) : array.lastIndexOf(item);\n    }\n    var i = (hasIndex ? from : array.length);\n    while (i--) if (array[i] === item) return i;\n    return -1;\n  };\n\n  // Generate an integer Array containing an arithmetic progression. A port of\n  // the native Python `range()` function. See\n  // [the Python documentation](http://docs.python.org/library/functions.html#range).\n  _.range = function(start, stop, step) {\n    if (arguments.length <= 1) {\n      stop = start || 0;\n      start = 0;\n    }\n    step = arguments[2] || 1;\n\n    var length = Math.max(Math.ceil((stop - start) / step), 0);\n    var idx = 0;\n    var range = new Array(length);\n\n    while(idx < length) {\n      range[idx++] = start;\n      start += step;\n    }\n\n    return range;\n  };\n\n  // Function (ahem) Functions\n  // ------------------\n\n  // Reusable constructor function for prototype setting.\n  var ctor = function(){};\n\n  // Create a function bound to a given object (assigning `this`, and arguments,\n  // optionally). Delegates to **ECMAScript 5**'s native `Function.bind` if\n  // available.\n  _.bind = function(func, context) {\n    var args, bound;\n    if (nativeBind && func.bind === nativeBind) return nativeBind.apply(func, slice.call(arguments, 1));\n    if (!_.isFunction(func)) throw new TypeError;\n    args = slice.call(arguments, 2);\n    return bound = function() {\n      if (!(this instanceof bound)) return func.apply(context, args.concat(slice.call(arguments)));\n      ctor.prototype = func.prototype;\n      var self = new ctor;\n      ctor.prototype = null;\n      var result = func.apply(self, args.concat(slice.call(arguments)));\n      if (Object(result) === result) return result;\n      return self;\n    };\n  };\n\n  // Partially apply a function by creating a version that has had some of its\n  // arguments pre-filled, without changing its dynamic `this` context. _ acts\n  // as a placeholder, allowing any combination of arguments to be pre-filled.\n  _.partial = function(func) {\n    var boundArgs = slice.call(arguments, 1);\n    return function() {\n      var position = 0;\n      var args = boundArgs.slice();\n      for (var i = 0, length = args.length; i < length; i++) {\n        if (args[i] === _) args[i] = arguments[position++];\n      }\n      while (position < arguments.length) args.push(arguments[position++]);\n      return func.apply(this, args);\n    };\n  };\n\n  // Bind a number of an object's methods to that object. Remaining arguments\n  // are the method names to be bound. Useful for ensuring that all callbacks\n  // defined on an object belong to it.\n  _.bindAll = function(obj) {\n    var funcs = slice.call(arguments, 1);\n    if (funcs.length === 0) throw new Error('bindAll must be passed function names');\n    each(funcs, function(f) { obj[f] = _.bind(obj[f], obj); });\n    return obj;\n  };\n\n  // Memoize an expensive function by storing its results.\n  _.memoize = function(func, hasher) {\n    var memo = {};\n    hasher || (hasher = _.identity);\n    return function() {\n      var key = hasher.apply(this, arguments);\n      return _.has(memo, key) ? memo[key] : (memo[key] = func.apply(this, arguments));\n    };\n  };\n\n  // Delays a function for the given number of milliseconds, and then calls\n  // it with the arguments supplied.\n  _.delay = function(func, wait) {\n    var args = slice.call(arguments, 2);\n    return setTimeout(function(){ return func.apply(null, args); }, wait);\n  };\n\n  // Defers a function, scheduling it to run after the current call stack has\n  // cleared.\n  _.defer = function(func) {\n    return _.delay.apply(_, [func, 1].concat(slice.call(arguments, 1)));\n  };\n\n  // Returns a function, that, when invoked, will only be triggered at most once\n  // during a given window of time. Normally, the throttled function will run\n  // as much as it can, without ever going more than once per `wait` duration;\n  // but if you'd like to disable the execution on the leading edge, pass\n  // `{leading: false}`. To disable execution on the trailing edge, ditto.\n  _.throttle = function(func, wait, options) {\n    var context, args, result;\n    var timeout = null;\n    var previous = 0;\n    options || (options = {});\n    var later = function() {\n      previous = options.leading === false ? 0 : _.now();\n      timeout = null;\n      result = func.apply(context, args);\n      context = args = null;\n    };\n    return function() {\n      var now = _.now();\n      if (!previous && options.leading === false) previous = now;\n      var remaining = wait - (now - previous);\n      context = this;\n      args = arguments;\n      if (remaining <= 0) {\n        clearTimeout(timeout);\n        timeout = null;\n        previous = now;\n        result = func.apply(context, args);\n        context = args = null;\n      } else if (!timeout && options.trailing !== false) {\n        timeout = setTimeout(later, remaining);\n      }\n      return result;\n    };\n  };\n\n  // Returns a function, that, as long as it continues to be invoked, will not\n  // be triggered. The function will be called after it stops being called for\n  // N milliseconds. If `immediate` is passed, trigger the function on the\n  // leading edge, instead of the trailing.\n  _.debounce = function(func, wait, immediate) {\n    var timeout, args, context, timestamp, result;\n\n    var later = function() {\n      var last = _.now() - timestamp;\n      if (last < wait) {\n        timeout = setTimeout(later, wait - last);\n      } else {\n        timeout = null;\n        if (!immediate) {\n          result = func.apply(context, args);\n          context = args = null;\n        }\n      }\n    };\n\n    return function() {\n      context = this;\n      args = arguments;\n      timestamp = _.now();\n      var callNow = immediate && !timeout;\n      if (!timeout) {\n        timeout = setTimeout(later, wait);\n      }\n      if (callNow) {\n        result = func.apply(context, args);\n        context = args = null;\n      }\n\n      return result;\n    };\n  };\n\n  // Returns a function that will be executed at most one time, no matter how\n  // often you call it. Useful for lazy initialization.\n  _.once = function(func) {\n    var ran = false, memo;\n    return function() {\n      if (ran) return memo;\n      ran = true;\n      memo = func.apply(this, arguments);\n      func = null;\n      return memo;\n    };\n  };\n\n  // Returns the first function passed as an argument to the second,\n  // allowing you to adjust arguments, run code before and after, and\n  // conditionally execute the original function.\n  _.wrap = function(func, wrapper) {\n    return _.partial(wrapper, func);\n  };\n\n  // Returns a function that is the composition of a list of functions, each\n  // consuming the return value of the function that follows.\n  _.compose = function() {\n    var funcs = arguments;\n    return function() {\n      var args = arguments;\n      for (var i = funcs.length - 1; i >= 0; i--) {\n        args = [funcs[i].apply(this, args)];\n      }\n      return args[0];\n    };\n  };\n\n  // Returns a function that will only be executed after being called N times.\n  _.after = function(times, func) {\n    return function() {\n      if (--times < 1) {\n        return func.apply(this, arguments);\n      }\n    };\n  };\n\n  // Object Functions\n  // ----------------\n\n  // Retrieve the names of an object's properties.\n  // Delegates to **ECMAScript 5**'s native `Object.keys`\n  _.keys = function(obj) {\n    if (!_.isObject(obj)) return [];\n    if (nativeKeys) return nativeKeys(obj);\n    var keys = [];\n    for (var key in obj) if (_.has(obj, key)) keys.push(key);\n    return keys;\n  };\n\n  // Retrieve the values of an object's properties.\n  _.values = function(obj) {\n    var keys = _.keys(obj);\n    var length = keys.length;\n    var values = new Array(length);\n    for (var i = 0; i < length; i++) {\n      values[i] = obj[keys[i]];\n    }\n    return values;\n  };\n\n  // Convert an object into a list of `[key, value]` pairs.\n  _.pairs = function(obj) {\n    var keys = _.keys(obj);\n    var length = keys.length;\n    var pairs = new Array(length);\n    for (var i = 0; i < length; i++) {\n      pairs[i] = [keys[i], obj[keys[i]]];\n    }\n    return pairs;\n  };\n\n  // Invert the keys and values of an object. The values must be serializable.\n  _.invert = function(obj) {\n    var result = {};\n    var keys = _.keys(obj);\n    for (var i = 0, length = keys.length; i < length; i++) {\n      result[obj[keys[i]]] = keys[i];\n    }\n    return result;\n  };\n\n  // Return a sorted list of the function names available on the object.\n  // Aliased as `methods`\n  _.functions = _.methods = function(obj) {\n    var names = [];\n    for (var key in obj) {\n      if (_.isFunction(obj[key])) names.push(key);\n    }\n    return names.sort();\n  };\n\n  // Extend a given object with all the properties in passed-in object(s).\n  _.extend = function(obj) {\n    each(slice.call(arguments, 1), function(source) {\n      if (source) {\n        for (var prop in source) {\n          obj[prop] = source[prop];\n        }\n      }\n    });\n    return obj;\n  };\n\n  // Return a copy of the object only containing the whitelisted properties.\n  _.pick = function(obj) {\n    var copy = {};\n    var keys = concat.apply(ArrayProto, slice.call(arguments, 1));\n    each(keys, function(key) {\n      if (key in obj) copy[key] = obj[key];\n    });\n    return copy;\n  };\n\n   // Return a copy of the object without the blacklisted properties.\n  _.omit = function(obj) {\n    var copy = {};\n    var keys = concat.apply(ArrayProto, slice.call(arguments, 1));\n    for (var key in obj) {\n      if (!_.contains(keys, key)) copy[key] = obj[key];\n    }\n    return copy;\n  };\n\n  // Fill in a given object with default properties.\n  _.defaults = function(obj) {\n    each(slice.call(arguments, 1), function(source) {\n      if (source) {\n        for (var prop in source) {\n          if (obj[prop] === void 0) obj[prop] = source[prop];\n        }\n      }\n    });\n    return obj;\n  };\n\n  // Create a (shallow-cloned) duplicate of an object.\n  _.clone = function(obj) {\n    if (!_.isObject(obj)) return obj;\n    return _.isArray(obj) ? obj.slice() : _.extend({}, obj);\n  };\n\n  // Invokes interceptor with the obj, and then returns obj.\n  // The primary purpose of this method is to \"tap into\" a method chain, in\n  // order to perform operations on intermediate results within the chain.\n  _.tap = function(obj, interceptor) {\n    interceptor(obj);\n    return obj;\n  };\n\n  // Internal recursive comparison function for `isEqual`.\n  var eq = function(a, b, aStack, bStack) {\n    // Identical objects are equal. `0 === -0`, but they aren't identical.\n    // See the [Harmony `egal` proposal](http://wiki.ecmascript.org/doku.php?id=harmony:egal).\n    if (a === b) return a !== 0 || 1 / a == 1 / b;\n    // A strict comparison is necessary because `null == undefined`.\n    if (a == null || b == null) return a === b;\n    // Unwrap any wrapped objects.\n    if (a instanceof _) a = a._wrapped;\n    if (b instanceof _) b = b._wrapped;\n    // Compare `[[Class]]` names.\n    var className = toString.call(a);\n    if (className != toString.call(b)) return false;\n    switch (className) {\n      // Strings, numbers, dates, and booleans are compared by value.\n      case '[object String]':\n        // Primitives and their corresponding object wrappers are equivalent; thus, `\"5\"` is\n        // equivalent to `new String(\"5\")`.\n        return a == String(b);\n      case '[object Number]':\n        // `NaN`s are equivalent, but non-reflexive. An `egal` comparison is performed for\n        // other numeric values.\n        return a != +a ? b != +b : (a == 0 ? 1 / a == 1 / b : a == +b);\n      case '[object Date]':\n      case '[object Boolean]':\n        // Coerce dates and booleans to numeric primitive values. Dates are compared by their\n        // millisecond representations. Note that invalid dates with millisecond representations\n        // of `NaN` are not equivalent.\n        return +a == +b;\n      // RegExps are compared by their source patterns and flags.\n      case '[object RegExp]':\n        return a.source == b.source &&\n               a.global == b.global &&\n               a.multiline == b.multiline &&\n               a.ignoreCase == b.ignoreCase;\n    }\n    if (typeof a != 'object' || typeof b != 'object') return false;\n    // Assume equality for cyclic structures. The algorithm for detecting cyclic\n    // structures is adapted from ES 5.1 section 15.12.3, abstract operation `JO`.\n    var length = aStack.length;\n    while (length--) {\n      // Linear search. Performance is inversely proportional to the number of\n      // unique nested structures.\n      if (aStack[length] == a) return bStack[length] == b;\n    }\n    // Objects with different constructors are not equivalent, but `Object`s\n    // from different frames are.\n    var aCtor = a.constructor, bCtor = b.constructor;\n    if (aCtor !== bCtor && !(_.isFunction(aCtor) && (aCtor instanceof aCtor) &&\n                             _.isFunction(bCtor) && (bCtor instanceof bCtor))\n                        && ('constructor' in a && 'constructor' in b)) {\n      return false;\n    }\n    // Add the first object to the stack of traversed objects.\n    aStack.push(a);\n    bStack.push(b);\n    var size = 0, result = true;\n    // Recursively compare objects and arrays.\n    if (className == '[object Array]') {\n      // Compare array lengths to determine if a deep comparison is necessary.\n      size = a.length;\n      result = size == b.length;\n      if (result) {\n        // Deep compare the contents, ignoring non-numeric properties.\n        while (size--) {\n          if (!(result = eq(a[size], b[size], aStack, bStack))) break;\n        }\n      }\n    } else {\n      // Deep compare objects.\n      for (var key in a) {\n        if (_.has(a, key)) {\n          // Count the expected number of properties.\n          size++;\n          // Deep compare each member.\n          if (!(result = _.has(b, key) && eq(a[key], b[key], aStack, bStack))) break;\n        }\n      }\n      // Ensure that both objects contain the same number of properties.\n      if (result) {\n        for (key in b) {\n          if (_.has(b, key) && !(size--)) break;\n        }\n        result = !size;\n      }\n    }\n    // Remove the first object from the stack of traversed objects.\n    aStack.pop();\n    bStack.pop();\n    return result;\n  };\n\n  // Perform a deep comparison to check if two objects are equal.\n  _.isEqual = function(a, b) {\n    return eq(a, b, [], []);\n  };\n\n  // Is a given array, string, or object empty?\n  // An \"empty\" object has no enumerable own-properties.\n  _.isEmpty = function(obj) {\n    if (obj == null) return true;\n    if (_.isArray(obj) || _.isString(obj)) return obj.length === 0;\n    for (var key in obj) if (_.has(obj, key)) return false;\n    return true;\n  };\n\n  // Is a given value a DOM element?\n  _.isElement = function(obj) {\n    return !!(obj && obj.nodeType === 1);\n  };\n\n  // Is a given value an array?\n  // Delegates to ECMA5's native Array.isArray\n  _.isArray = nativeIsArray || function(obj) {\n    return toString.call(obj) == '[object Array]';\n  };\n\n  // Is a given variable an object?\n  _.isObject = function(obj) {\n    return obj === Object(obj);\n  };\n\n  // Add some isType methods: isArguments, isFunction, isString, isNumber, isDate, isRegExp.\n  each(['Arguments', 'Function', 'String', 'Number', 'Date', 'RegExp'], function(name) {\n    _['is' + name] = function(obj) {\n      return toString.call(obj) == '[object ' + name + ']';\n    };\n  });\n\n  // Define a fallback version of the method in browsers (ahem, IE), where\n  // there isn't any inspectable \"Arguments\" type.\n  if (!_.isArguments(arguments)) {\n    _.isArguments = function(obj) {\n      return !!(obj && _.has(obj, 'callee'));\n    };\n  }\n\n  // Optimize `isFunction` if appropriate.\n  if (typeof (/./) !== 'function') {\n    _.isFunction = function(obj) {\n      return typeof obj === 'function';\n    };\n  }\n\n  // Is a given object a finite number?\n  _.isFinite = function(obj) {\n    return isFinite(obj) && !isNaN(parseFloat(obj));\n  };\n\n  // Is the given value `NaN`? (NaN is the only number which does not equal itself).\n  _.isNaN = function(obj) {\n    return _.isNumber(obj) && obj != +obj;\n  };\n\n  // Is a given value a boolean?\n  _.isBoolean = function(obj) {\n    return obj === true || obj === false || toString.call(obj) == '[object Boolean]';\n  };\n\n  // Is a given value equal to null?\n  _.isNull = function(obj) {\n    return obj === null;\n  };\n\n  // Is a given variable undefined?\n  _.isUndefined = function(obj) {\n    return obj === void 0;\n  };\n\n  // Shortcut function for checking if an object has a given property directly\n  // on itself (in other words, not on a prototype).\n  _.has = function(obj, key) {\n    return hasOwnProperty.call(obj, key);\n  };\n\n  // Utility Functions\n  // -----------------\n\n  // Run Underscore.js in *noConflict* mode, returning the `_` variable to its\n  // previous owner. Returns a reference to the Underscore object.\n  _.noConflict = function() {\n    root._ = previousUnderscore;\n    return this;\n  };\n\n  // Keep the identity function around for default iterators.\n  _.identity = function(value) {\n    return value;\n  };\n\n  _.constant = function(value) {\n    return function () {\n      return value;\n    };\n  };\n\n  _.property = function(key) {\n    return function(obj) {\n      return obj[key];\n    };\n  };\n\n  // Returns a predicate for checking whether an object has a given set of `key:value` pairs.\n  _.matches = function(attrs) {\n    return function(obj) {\n      if (obj === attrs) return true; //avoid comparing an object to itself.\n      for (var key in attrs) {\n        if (attrs[key] !== obj[key])\n          return false;\n      }\n      return true;\n    }\n  };\n\n  // Run a function **n** times.\n  _.times = function(n, iterator, context) {\n    var accum = Array(Math.max(0, n));\n    for (var i = 0; i < n; i++) accum[i] = iterator.call(context, i);\n    return accum;\n  };\n\n  // Return a random integer between min and max (inclusive).\n  _.random = function(min, max) {\n    if (max == null) {\n      max = min;\n      min = 0;\n    }\n    return min + Math.floor(Math.random() * (max - min + 1));\n  };\n\n  // A (possibly faster) way to get the current timestamp as an integer.\n  _.now = Date.now || function() { return new Date().getTime(); };\n\n  // List of HTML entities for escaping.\n  var entityMap = {\n    escape: {\n      '&': '&amp;',\n      '<': '&lt;',\n      '>': '&gt;',\n      '\"': '&quot;',\n      \"'\": '&#x27;'\n    }\n  };\n  entityMap.unescape = _.invert(entityMap.escape);\n\n  // Regexes containing the keys and values listed immediately above.\n  var entityRegexes = {\n    escape:   new RegExp('[' + _.keys(entityMap.escape).join('') + ']', 'g'),\n    unescape: new RegExp('(' + _.keys(entityMap.unescape).join('|') + ')', 'g')\n  };\n\n  // Functions for escaping and unescaping strings to/from HTML interpolation.\n  _.each(['escape', 'unescape'], function(method) {\n    _[method] = function(string) {\n      if (string == null) return '';\n      return ('' + string).replace(entityRegexes[method], function(match) {\n        return entityMap[method][match];\n      });\n    };\n  });\n\n  // If the value of the named `property` is a function then invoke it with the\n  // `object` as context; otherwise, return it.\n  _.result = function(object, property) {\n    if (object == null) return void 0;\n    var value = object[property];\n    return _.isFunction(value) ? value.call(object) : value;\n  };\n\n  // Add your own custom functions to the Underscore object.\n  _.mixin = function(obj) {\n    each(_.functions(obj), function(name) {\n      var func = _[name] = obj[name];\n      _.prototype[name] = function() {\n        var args = [this._wrapped];\n        push.apply(args, arguments);\n        return result.call(this, func.apply(_, args));\n      };\n    });\n  };\n\n  // Generate a unique integer id (unique within the entire client session).\n  // Useful for temporary DOM ids.\n  var idCounter = 0;\n  _.uniqueId = function(prefix) {\n    var id = ++idCounter + '';\n    return prefix ? prefix + id : id;\n  };\n\n  // By default, Underscore uses ERB-style template delimiters, change the\n  // following template settings to use alternative delimiters.\n  _.templateSettings = {\n    evaluate    : /<%([\\s\\S]+?)%>/g,\n    interpolate : /<%=([\\s\\S]+?)%>/g,\n    escape      : /<%-([\\s\\S]+?)%>/g\n  };\n\n  // When customizing `templateSettings`, if you don't want to define an\n  // interpolation, evaluation or escaping regex, we need one that is\n  // guaranteed not to match.\n  var noMatch = /(.)^/;\n\n  // Certain characters need to be escaped so that they can be put into a\n  // string literal.\n  var escapes = {\n    \"'\":      \"'\",\n    '\\\\':     '\\\\',\n    '\\r':     'r',\n    '\\n':     'n',\n    '\\t':     't',\n    '\\u2028': 'u2028',\n    '\\u2029': 'u2029'\n  };\n\n  var escaper = /\\\\|'|\\r|\\n|\\t|\\u2028|\\u2029/g;\n\n  // JavaScript micro-templating, similar to John Resig's implementation.\n  // Underscore templating handles arbitrary delimiters, preserves whitespace,\n  // and correctly escapes quotes within interpolated code.\n  _.template = function(text, data, settings) {\n    var render;\n    settings = _.defaults({}, settings, _.templateSettings);\n\n    // Combine delimiters into one regular expression via alternation.\n    var matcher = new RegExp([\n      (settings.escape || noMatch).source,\n      (settings.interpolate || noMatch).source,\n      (settings.evaluate || noMatch).source\n    ].join('|') + '|$', 'g');\n\n    // Compile the template source, escaping string literals appropriately.\n    var index = 0;\n    var source = \"__p+='\";\n    text.replace(matcher, function(match, escape, interpolate, evaluate, offset) {\n      source += text.slice(index, offset)\n        .replace(escaper, function(match) { return '\\\\' + escapes[match]; });\n\n      if (escape) {\n        source += \"'+\\n((__t=(\" + escape + \"))==null?'':_.escape(__t))+\\n'\";\n      }\n      if (interpolate) {\n        source += \"'+\\n((__t=(\" + interpolate + \"))==null?'':__t)+\\n'\";\n      }\n      if (evaluate) {\n        source += \"';\\n\" + evaluate + \"\\n__p+='\";\n      }\n      index = offset + match.length;\n      return match;\n    });\n    source += \"';\\n\";\n\n    // If a variable is not specified, place data values in local scope.\n    if (!settings.variable) source = 'with(obj||{}){\\n' + source + '}\\n';\n\n    source = \"var __t,__p='',__j=Array.prototype.join,\" +\n      \"print=function(){__p+=__j.call(arguments,'');};\\n\" +\n      source + \"return __p;\\n\";\n\n    try {\n      render = new Function(settings.variable || 'obj', '_', source);\n    } catch (e) {\n      e.source = source;\n      throw e;\n    }\n\n    if (data) return render(data, _);\n    var template = function(data) {\n      return render.call(this, data, _);\n    };\n\n    // Provide the compiled function source as a convenience for precompilation.\n    template.source = 'function(' + (settings.variable || 'obj') + '){\\n' + source + '}';\n\n    return template;\n  };\n\n  // Add a \"chain\" function, which will delegate to the wrapper.\n  _.chain = function(obj) {\n    return _(obj).chain();\n  };\n\n  // OOP\n  // ---------------\n  // If Underscore is called as a function, it returns a wrapped object that\n  // can be used OO-style. This wrapper holds altered versions of all the\n  // underscore functions. Wrapped objects may be chained.\n\n  // Helper function to continue chaining intermediate results.\n  var result = function(obj) {\n    return this._chain ? _(obj).chain() : obj;\n  };\n\n  // Add all of the Underscore functions to the wrapper object.\n  _.mixin(_);\n\n  // Add all mutator Array functions to the wrapper.\n  each(['pop', 'push', 'reverse', 'shift', 'sort', 'splice', 'unshift'], function(name) {\n    var method = ArrayProto[name];\n    _.prototype[name] = function() {\n      var obj = this._wrapped;\n      method.apply(obj, arguments);\n      if ((name == 'shift' || name == 'splice') && obj.length === 0) delete obj[0];\n      return result.call(this, obj);\n    };\n  });\n\n  // Add all accessor Array functions to the wrapper.\n  each(['concat', 'join', 'slice'], function(name) {\n    var method = ArrayProto[name];\n    _.prototype[name] = function() {\n      return result.call(this, method.apply(this._wrapped, arguments));\n    };\n  });\n\n  _.extend(_.prototype, {\n\n    // Start chaining a wrapped Underscore object.\n    chain: function() {\n      this._chain = true;\n      return this;\n    },\n\n    // Extracts the result from a wrapped and chained object.\n    value: function() {\n      return this._wrapped;\n    }\n\n  });\n\n  // AMD registration happens at the end for compatibility with AMD loaders\n  // that may not enforce next-turn semantics on modules. Even though general\n  // practice for AMD registration is to be anonymous, underscore registers\n  // as a named module because, like jQuery, it is a base library that is\n  // popular enough to be bundled in a third party lib, but not be part of\n  // an AMD load request. Those cases could generate an error when an\n  // anonymous define() is called outside of a loader request.\n  if (typeof define === 'function' && define.amd) {\n    define('underscore', [], function() {\n      return _;\n    });\n  }\n}).call(this);","/home/travis/build/npmtest/node-npmtest-alloy/node_modules/alloy/platforms/android/index.js":"module.exports = new (require('../base.js'))({\n\tplatform: 'android'\n});","/home/travis/build/npmtest/node-npmtest-alloy/node_modules/alloy/platforms/base.js":"var _ = require('../Alloy/lib/alloy/underscore')._,\n\tU = require('../Alloy/utils');\n\nmodule.exports = function(def) {\n\tif (!def.platform) {\n\t\tU.die([\n\t\t\t'platform undefined',\n\t\t\tnew Error().stack\n\t\t]);\n\t}\n\n\t_.extend(this, _.defaults(def, {\n\t\talloyFolder: def.platform,\n\t\ttitaniumFolder: def.platform,\n\t\tname: def.platform,\n\t\tosname: def.platform,\n\t\tcondition: {}\n\t}));\n\n\tthis.condition = {\n\t\tcompile: def.condition.compile || 'OS_' + this.platform.toUpperCase(),\n\t\truntime: def.condition.runtime || runtimeCondition(this.osname, this.name)\n\t};\n};\n\nfunction runtimeCondition(osname, name) {\n\tvar output, map;\n\tosname = osname || [];\n\tname = name || [];\n\n\tif (!osname && !name) {\n\t\treturn 'true';\n\t} else if (_.isString(name)) {\n\t\treturn \"Ti.Platform.name === '\" + name + \"'\";\n\t} else if (_.isString(osname)) {\n\t\treturn \"Ti.Platform.osname === '\" + osname + \"'\";\n\t} else {\n\t\tif (_.isArray(name)) {\n\t\t\tmap = _.map(name, function(n) { return \"Ti.Platform.name === '\" + n + \"'\"; });\n\t\t}\n\t\tif (_.isArray(osname) && (!map || osname.length < name.length)) {\n\t\t\tmap = _.map(osname, function(n) { return \"Ti.Platform.osname === '\" + n + \"'\"; });\n\t\t}\n\t\tif (!map) { return 'true'; }\n\t}\n\n\treturn map.join('||');\n}\n","/home/travis/build/npmtest/node-npmtest-alloy/node_modules/alloy/platforms/ios/index.js":"module.exports = new (require('../base.js'))({\n\tplatform: 'ios',\n\ttitaniumFolder: 'iphone',\n\tname: 'iPhone OS',\n\tosname: ['ipad', 'iphone']\n});","/home/travis/build/npmtest/node-npmtest-alloy/node_modules/alloy/platforms/mobileweb/index.js":"module.exports = new (require('../base.js'))({\n\tplatform: 'mobileweb'\n});","/home/travis/build/npmtest/node-npmtest-alloy/node_modules/alloy/platforms/windows/index.js":"module.exports = new (require('../base.js'))({\n\tplatform: 'windows',\n\talloyFolder: 'windows',\n\ttitaniumFolder: 'windows',\n\tname: 'Windows Phone',\n\tosname: 'windows'\n});","/home/travis/build/npmtest/node-npmtest-alloy/node_modules/alloy/Alloy/commands/compile/sourceMapper.js":"/*\n\tSets options and wraps some functionality around the source mapping functions\n\tprovided by the UglifyJS library\n*/\nvar SM = require('source-map'),\n\tfs = require('fs'),\n\tpath = require('path'),\n\twrench = require('wrench'),\n\tU = require('../../utils'),\n\tCONST = require('../../common/constants'),\n\tuglifyjs = require('uglify-js'),\n\tlogger = require('../../logger'),\n\t_ = require('../../lib/alloy/underscore')._;\n\nvar lineSplitter = /(?:\\r\\n|\\r|\\n)/,\n\tmods = [\n\t\t'builtins',\n\t\t'optimizer',\n\t\t'compress'\n\t],\n\tmodLocation = './ast/';\n\nexports.OPTIONS_OUTPUT = {\n\tindent_start  : 0,     // start indentation on every line (only when `beautify`)\n\tindent_level  : 4,     // indentation level (only when `beautify`)\n\tquote_keys    : false, // quote all keys in object literals?\n\tspace_colon   : true,  // add a space after colon signs?\n\tascii_only    : false, // output ASCII-safe? (encodes Unicode characters as ASCII)\n\tinline_script : false, // escape \"</script\"?\n\twidth         : 80,    // informative maximum line width (for beautified output)\n\tmax_line_len  : 32000, // maximum line length (for non-beautified output)\n\tbeautify      : true, // beautify output?\n\tbracketize    : false, // use brackets every time?\n\tcomments      : false, // output comments?\n\tsemicolons    : true  // use semicolons to separate statements?\n};\n\nfunction mapLine(mapper, theMap, genMap, line) {\n\tmapper.addMapping({\n\t\toriginal: {\n\t\t\tline: theMap.count++,\n\t\t\tcolumn: 0\n\t\t},\n\t\tgenerated: {\n\t\t\tline: genMap.count++,\n\t\t\tcolumn: 0\n\t\t},\n\t\tsource: theMap.filename\n\t});\n\tgenMap.code += line + '\\n';\n}\n\nfunction getTextFromGenerator(content, template) {\n\tif (typeof content !== 'undefined' && content !== null) {\n\t\treturn content;\n\t} else {\n\t\tif (template && fs.existsSync(template)) {\n\t\t\treturn fs.readFileSync(template, 'utf8');\n\t\t} else {\n\t\t\treturn '';\n\t\t}\n\t}\n}\n\nexports.generateCodeAndSourceMap = function(generator, compileConfig) {\n\tvar target = generator.target;\n\tvar data = generator.data;\n\tvar markers = _.map(data, function(v, k) { return k; });\n\tvar mapper = new SM.SourceMapGenerator({ file: target.filename });\n\tvar genMap = {\n\t\tfile: target.filename,\n\t\tcount: 1,\n\t\tcode: ''\n\t};\n\n\t// initialize the rest of the generator properties\n\ttarget.count = 1;\n\ttarget.lines = getTextFromGenerator(target.templateContent, target.template).split(lineSplitter);\n\t_.each(markers, function(m) {\n\t\tvar marker = data[m];\n\t\tmarker.count = 1;\n\t\tmarker.lines = getTextFromGenerator(marker.fileContent, marker.filepath).split(lineSplitter);\n\t});\n\n\t// generate the source map and composite code\n\t_.each(target.lines, function(line) {\n\t\tvar trimmed = U.trim(line);\n\t\tif (_.contains(markers, trimmed)) {\n\t\t\t_.each(data[trimmed].lines, function(line) {\n\t\t\t\tmapLine(mapper, data[trimmed], genMap, line);\n\t\t\t});\n\t\t} else {\n\t\t\tmapLine(mapper, target, genMap, line);\n\t\t}\n\t});\n\n\t// parse composite code into an AST\n\tvar ast;\n\ttry {\n\t\tast = uglifyjs.parse(genMap.code, { filename: genMap.file });\n\t} catch (e) {\n\t\tlogger.trace(genMap.code);\n\t\tthrow e;\n\t}\n\n\t// process all AST operations\n\t_.each(mods, function(mod) {\n\t\tlogger.trace('- Processing \"' + mod + '\" module...');\n\t\tast.figure_out_scope();\n\t\tast = require(modLocation + mod).process(ast, compileConfig) || ast;\n\t});\n\n\t// create uglify-js source map and stream it out\n\tvar stream, sourceMap;\n\tif (compileConfig.sourcemap) {\n\t\tsourceMap = uglifyjs.SourceMap({\n\t\t\tfile: target.filename,\n\t\t\torig: mapper.toString()\n\t\t});\n\t\tstream = uglifyjs.OutputStream(_.extend(_.clone(exports.OPTIONS_OUTPUT), {\n\t\t\tsource_map: sourceMap\n\t\t}));\n\t} else {\n\t\tstream = uglifyjs.OutputStream(exports.OPTIONS_OUTPUT);\n\t}\n\tast.print(stream);\n\n\t// write the generated controller code\n\tvar outfile = target.filepath;\n\tvar relativeOutfile = path.relative(compileConfig.dir.project, outfile);\n\twrench.mkdirSyncRecursive(path.dirname(outfile), 0755);\n\tfs.writeFileSync(outfile, stream.toString());\n\tlogger.info('  created:    \"' + relativeOutfile + '\"');\n\n\t// write source map for the generated file\n\tif (compileConfig.sourcemap !== false) {\n\t\tvar mapDir = path.join(compileConfig.dir.project, CONST.DIR.MAP);\n\t\toutfile = path.join(mapDir, relativeOutfile) + '.' + CONST.FILE_EXT.MAP;\n\t\trelativeOutfile = path.relative(compileConfig.dir.project, outfile);\n\t\twrench.mkdirSyncRecursive(path.dirname(outfile), 0755);\n\t\tfs.writeFileSync(outfile, sourceMap.toString());\n\t\tlogger.debug('  map:        \"' + relativeOutfile + '\"');\n\t}\n};\n\nexports.generateSourceMap = function(generator, compileConfig) {\n\tif (!fs.existsSync(generator.target.filename) || fs.statSync(generator.target.filename).isDirectory()) {\n\t\treturn;\n\t}\n\tvar target = generator.target;\n\tvar data = generator.data;\n\tvar markers = _.map(data, function(v, k) { return k; });\n\tvar mapper = new SM.SourceMapGenerator({ file: target.filename });\n\tvar genMap = {\n\t\tfile: target.filename,\n\t\tcount: 1,\n\t\tcode: ''\n\t};\n\n\t// initialize the rest of the generator properties\n\ttarget.count = 1;\n\ttarget.lines = getTextFromGenerator(target.templateContent, target.template).split(lineSplitter);\n\t_.each(markers, function(m) {\n\t\tvar marker = data[m];\n\t\tmarker.count = 1;\n\t\tmarker.lines = getTextFromGenerator(marker.fileContent, marker.filename).split(lineSplitter);\n\t});\n\n\t// generate the source map and composite code\n\t_.each(target.lines, function(line) {\n\t\tvar trimmed = U.trim(line);\n\t\tif (_.contains(markers, trimmed)) {\n\t\t\t_.each(data[trimmed].lines, function(line) {\n\t\t\t\tmapLine(mapper, data[trimmed], genMap, line);\n\t\t\t});\n\t\t} else {\n\t\t\tmapLine(mapper, target, genMap, line);\n\t\t}\n\t});\n\n\t// parse composite code into an AST\n\tvar ast;\n\ttry {\n\t\tast = uglifyjs.parse(genMap.code, { filename: genMap.file });\n\t} catch (e) {\n\t\tlogger.trace(genMap.code);\n\t\tthrow e;\n\t}\n\n\t// process all AST operations\n\t_.each(mods, function(mod) {\n\t\tlogger.trace('- Processing \"' + mod + '\" module...');\n\t\tast.figure_out_scope();\n\t\tast = require(modLocation + mod).process(ast, compileConfig) || ast;\n\t});\n\n\t// create uglify-js source map and stream it out\n\tvar origFileName = path.relative(compileConfig.dir.project, generator.origFile.filename),\n\t\tcompiledFileName = path.join('Resources', path.basename(generator.origFile.filename));\n\tvar sourceMap = uglifyjs.SourceMap({\n\t\tfile: compiledFileName,\n\t\torig: mapper.toString()\n\t});\n\tvar stream = uglifyjs.OutputStream(_.extend(_.clone(exports.OPTIONS_OUTPUT), {\n\t\tsource_map: sourceMap\n\t}));\n\tast.print(stream);\n\n\t// write source map for the generated file\n\tvar relativeOutfile = path.relative(compileConfig.dir.project, target.filepath);\n\tvar mapDir = path.join(compileConfig.dir.project, CONST.DIR.MAP);\n\tvar outfile = path.join(mapDir, relativeOutfile, path.basename(target.filename)) + '.' + CONST.FILE_EXT.MAP;\n\twrench.mkdirSyncRecursive(path.dirname(outfile), 0755);\n\tvar tmp = JSON.parse(sourceMap.toString());\n\ttmp.sources[0] = compiledFileName;\n\ttmp.sources[1] = origFileName;\n\tfs.writeFileSync(outfile, JSON.stringify(tmp));\n\tlogger.debug('  map:        \"' + outfile + '\"');\n};\n","/home/travis/build/npmtest/node-npmtest-alloy/node_modules/alloy/.eslintrc.js":"var OFF = 0;\nvar WARNING = 1;\nvar ERROR = 2;\n\nmodule.exports = {\n\tenv: {\n\t\t'node': true\n\t},\n\n\textends: 'eslint:recommended',\n\n\trules: {\n\t\t'brace-style': [ERROR, '1tbs', {'allowSingleLine': true}],\n\t\t'comma-spacing': [ERROR, {'before': false, 'after': true}],\n\t\t'indent': [ERROR, 'tab', {'SwitchCase': 1, 'FunctionExpression': {'body': 1}}],\n\t\t'keyword-spacing': ERROR,\n\t\t'linebreak-style': [ERROR, 'unix'],\n\t\t'no-cond-assign': OFF,\n\t\t'no-console': OFF,\n\t\t'no-control-regex': OFF,\n\t\t'no-fallthrough': OFF,\n\t\t'no-unused-vars': OFF,\n\t\t'no-undef': OFF,\n\t\t'no-octal': OFF,\n\t\t'quotes': [ERROR, 'single', {'avoidEscape': true, allowTemplateLiterals: true}],\n\t\t'space-before-blocks': [ERROR, 'always'],\n\t\t'space-infix-ops': [ERROR, {'int32Hint': false}],\n\t\t'semi': [ERROR, 'always'],\n\t\t'valid-typeof': OFF\n\t}\n};","/home/travis/build/npmtest/node-npmtest-alloy/node_modules/alloy/hooks/alloy.js":"/**\n * Alloy\n * Copyright (c) 2012 by Appcelerator, Inc. All Rights Reserved.\n * See LICENSE for more information on licensing.\n */\n\nexports.cliVersion = '>=3.X';\nexports.version = '1.0.0';\nvar SILENT = true;\n\nexports.init = function (logger, config, cli, appc) {\n\tvar path = require('path'),\n\t\tfs = require('fs'),\n\t\tafs = appc.fs,\n\t\ti18n = appc.i18n(__dirname),\n\t\t__ = i18n.__,\n\t\t__n = i18n.__n,\n\t\tpkginfo = appc.pkginfo.package(module),\n\t\texec = require('child_process').exec,\n\t\tspawn = require('child_process').spawn,\n\t\tparallel = appc.async.parallel;\n\n\tif (!process.env.sdk) {\n\t\tprocess.env.sdk = cli.sdk.name;\n\t}\n\n\tfunction run(deviceFamily, deployType, target, finished, silent) {\n\t\tvar appDir = path.join(cli.argv['project-dir'], 'app');\n\t\tif (!afs.exists(appDir)) {\n\t\t\tlogger.info(__('Project not an Alloy app, continuing'));\n\t\t\tfinished();\n\t\t\treturn;\n\t\t}\n\t\tlogger.info(__('Found Alloy app in %s', appDir.cyan));\n\n\t\t// TODO: Make this check specific to a TiSDK version\n\t\t// create a .alloynewcli file to tell old plugins not to run\n\t\tvar buildDir = path.join(cli.argv['project-dir'], 'build');\n\t\tif (!afs.exists(buildDir)) {\n\t\t\tfs.mkdirSync(buildDir);\n\t\t}\n\t\tfs.writeFileSync(path.join(buildDir, '.alloynewcli'), '');\n\n\t\tvar cRequire = afs.resolvePath(__dirname, '..', 'Alloy', 'commands', 'compile', 'index.js'),\n\t\t\tconfig = {\n\t\t\t\tplatform: /(?:iphone|ipad)/.test(cli.argv.platform) ? 'ios' : cli.argv.platform,\n\t\t\t\tversion: '0',\n\t\t\t\tsimtype: 'none',\n\t\t\t\tdevicefamily: /(?:iphone|ios)/.test(cli.argv.platform) ? deviceFamily : 'none',\n\t\t\t\tdeploytype: deployType || cli.argv['deploy-type'] || 'development',\n\t\t\t\ttarget: target\n\t\t\t};\n\t\tif (silent) {\n\t\t\t// turn off all logging output for code analyzer build hook\n\t\t\tconfig.noBanner = 'true';\n\t\t\tconfig.logLevel = '-1';\n\t\t}\n\n\t\tconfig = Object.keys(config).map(function (c) {\n\t\t\treturn c + '=' + config[c];\n\t\t}).join(',');\n\n\t\tif (afs.exists(cRequire)) {\n\t\t\t// we're being invoked from the actual alloy directory!\n\t\t\t// no need to subprocess, just require() and run\n\t\t\tvar origLimit = Error.stackTraceLimit;\n\t\t\tError.stackTraceLimit = Infinity;\n\t\t\ttry {\n\t\t\t\trequire(cRequire)({}, {\n\t\t\t\t\tconfig: config,\n\t\t\t\t\toutputPath: cli.argv['project-dir'],\n\t\t\t\t\t_version: pkginfo.version\n\t\t\t\t});\n\t\t\t} catch (e) {\n\t\t\t\tlogger.error(__('Alloy compiler failed'));\n\t\t\t\te.toString().split('\\n').forEach(function (line) {\n\t\t\t\t\tif (line) { logger.error(line); }\n\t\t\t\t});\n\t\t\t\tprocess.exit(1);\n\t\t\t}\n\t\t\tError.stackTraceLimit = origLimit;\n\t\t\tfinished();\n\t\t} else {\n\t\t\t// we have no clue where alloy is installed, so we're going to subprocess\n\t\t\t// alloy and hope it's in the system path or a well known place\n\t\t\tvar paths = {};\n\t\t\tvar locatorCmd = process.platform === 'win32' ? 'where' : 'which';\n\t\t\tparallel(this, ['alloy', 'node'].map(function (bin) {\n\t\t\t\treturn function (done) {\n\t\t\t\t\tvar envName = 'ALLOY_' + (bin === 'node' ? 'NODE_' : '') + 'PATH';\n\n\t\t\t\t\tpaths[bin] = process.env[envName];\n\t\t\t\t\tif (paths[bin]) {\n\t\t\t\t\t\tdone();\n\t\t\t\t\t} else if (process.platform === 'win32' && bin === 'alloy') {\n\t\t\t\t\t\tpaths.alloy = 'alloy.cmd';\n\t\t\t\t\t\tdone();\n\t\t\t\t\t} else {\n\t\t\t\t\t\texec(locatorCmd + ' ' + bin, function (err, stdout, strerr) {\n\t\t\t\t\t\t\tif (!err) {\n\t\t\t\t\t\t\t\tpaths[bin] = stdout.trim();\n\t\t\t\t\t\t\t\tdone();\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tparallel(this, [\n\t\t\t\t\t\t\t\t\t'/usr/local/bin/' + bin,\n\t\t\t\t\t\t\t\t\t'/opt/local/bin/' + bin,\n\t\t\t\t\t\t\t\t\tpath.join(process.env.HOME, 'local/bin', bin),\n\t\t\t\t\t\t\t\t\t'/opt/bin/' + bin,\n\t\t\t\t\t\t\t\t\t'/usr/bin/' + bin\n\t\t\t\t\t\t\t\t].map(function (p) {\n\t\t\t\t\t\t\t\t\treturn function (cb) {\n\t\t\t\t\t\t\t\t\t\tif (afs.exists(p)) { paths[bin] = p; }\n\t\t\t\t\t\t\t\t\t\tcb();\n\t\t\t\t\t\t\t\t\t};\n\t\t\t\t\t\t\t\t}), done);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\t\t\t\t};\n\t\t\t}), function () {\n\n\t\t\t\t// compose alloy command execution\n\t\t\t\tvar cmd = [paths.node, paths.alloy, 'compile', appDir, '--config', config];\n\t\t\t\tif (cli.argv['no-colors'] || cli.argv['color'] === false) { cmd.push('--no-colors'); }\n\n\t\t\t\t// process each line of output from alloy\n\t\t\t\tfunction checkLine(line) {\n\t\t\t\t\tvar re = new RegExp(\n\t\t\t\t\t\t'^(?:\\u001b\\\\[\\\\d+m)?\\\\[?(' +\n\t\t\t\t\t\tlogger.getLevels().join('|') +\n\t\t\t\t\t\t')\\\\]?\\s*(?:\\u001b\\\\[\\\\d+m)?(.*)', 'i'\n\t\t\t\t\t);\n\t\t\t\t\tif (line) {\n\t\t\t\t\t\tvar m = line.match(re);\n\t\t\t\t\t\tif (m) {\n\t\t\t\t\t\t\tlogger[m[1].toLowerCase()](m[2].trim());\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tlogger.debug(line);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t// execute alloy in os-specific manner\n\t\t\t\tvar child;\n\t\t\t\tif (process.platform === 'win32' && paths.alloy === 'alloy.cmd') {\n\t\t\t\t\tcmd.shift();\n\t\t\t\t\tlogger.info(__('Executing Alloy compile: %s',\n\t\t\t\t\t\t['cmd', '/s', '/c'].concat(cmd).join(' ').cyan));\n\n\t\t\t\t\t// arg processing from https://github.com/MarcDiethelm/superspawn\n\t\t\t\t\tchild = spawn('cmd', [['/s', '/c', '\"' +\n\t\t\t\t\t\tcmd.map(function(a) {\n\t\t\t\t\t\t\tif (/^[^\"].* .*[^\"]/.test(a)) return '\"' + a + '\"'; return a;\n\t\t\t\t\t\t}).join(' ') + '\"'].join(' ')], {\n\t\t\t\t\t\t\tstdio: 'inherit',\n\t\t\t\t\t\t\twindowsVerbatimArguments: true\n\t\t\t\t\t\t}\n\t\t\t\t\t);\n\t\t\t\t} else {\n\t\t\t\t\tlogger.info(__('Executing Alloy compile: %s', cmd.join(' ').cyan));\n\t\t\t\t\tchild = spawn(cmd.shift(), cmd);\n\t\t\t\t\tchild.stdout.on('data', function (data) {\n\t\t\t\t\t\tdata.toString().split('\\n').forEach(checkLine);\n\t\t\t\t\t});\n\t\t\t\t\tchild.stderr.on('data', function (data) {\n\t\t\t\t\t\tdata.toString().split('\\n').forEach(checkLine);\n\t\t\t\t\t});\n\t\t\t\t}\n\n\t\t\t\t// handle the completion of alloy, success or otherwise\n\t\t\t\tchild.on('exit', function (code) {\n\t\t\t\t\tif (code) {\n\t\t\t\t\t\tlogger.error(__('Alloy compiler failed'));\n\t\t\t\t\t\tprocess.exit(1);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tlogger.info(__('Alloy compiler completed successfully'));\n\n\t\t\t\t\t\tafs.exists(path.join(cli.argv['project-dir'], 'build', 'i18n')) && process.argv.push('--i18n-dir', 'build');\n\t\t\t\t\t\tafs.exists(path.join(cli.argv['project-dir'], 'build', 'platform')) && (cli.argv['platform-dir'] = 'build/platform');\n\t\t\t\t\t}\n\t\t\t\t\tfinished();\n\t\t\t\t});\n\n\t\t\t});\n\t\t}\n\t}\n\n\tcli.addHook('build.pre.compile', function (build, finished) {\n\t\tvar deployType = build.deployType,\n\t\t\ttarget = build.target;\n\n\t\trun(build.deviceFamily, deployType, target, finished);\n\t});\n\n\tcli.addHook('codeprocessor.pre.run', function (build, finished) {\n\t\trun('none', 'development', undefined, finished, SILENT);\n\t});\n};\n","/home/travis/build/npmtest/node-npmtest-alloy/node_modules/alloy/hooks/deepclean.js":"/**\n * Alloy\n * Copyright (c) 2014 by Appcelerator, Inc. All Rights Reserved.\n * See LICENSE for more information on licensing.\n */\n\nexports.cliVersion = '>=3.X';\nvar SILENT = true;\n\nexports.init = function (logger, config, cli, appc) {\n\tvar path = require('path'),\n\t\tfs = require('fs'),\n\t\tafs = appc.fs;\n\n\tfunction run(finished) {\n\t\tif (cli.argv['shallow'] === '') {\n\t\t\tlogger.info('Not cleaning the Resources directory');\n\t\t\tfinished();\n\t\t\treturn;\n\t\t}\n\t\tvar appDir = path.join(cli.argv['project-dir'], 'app');\n\t\tif (!afs.exists(appDir)) {\n\t\t\tlogger.debug('Project not an Alloy app, exiting.');\n\t\t\tfinished();\n\t\t\treturn;\n\t\t}\n\n\t\tvar resourcesDir = path.join(cli.argv['project-dir'], 'Resources');\n\t\tif (!afs.exists(resourcesDir)) {\n\t\t\tlogger.debug('Resources directory does not exist.');\n\t\t\tfinished();\n\t\t\treturn;\n\t\t}\n\t\trmdir(resourcesDir, fs, path, logger);\n\t\tlogger.debug('Resources directory of %s has been emptied', appDir.cyan);\n\t\tfinished();\n\t}\n\n\tcli.addHook('clean.post', function (build, finished) {\n\t\trun(finished);\n\t});\n\n};\n\nfunction rmdir(dirPath, fs, path, logger, removeSelf) {\n\tvar files;\n\ttry {\n\t\tfiles = fs.readdirSync(dirPath);\n\t} catch (e) {\n\t\treturn;\n\t}\n\tif (files.length > 0) {\n\t\tfor (var i = 0; i < files.length; i++) {\n\t\t\tvar filePath = path.join(dirPath, files[i]);\n\t\t\tif (fs.statSync(filePath).isFile()) {\n\t\t\t\tfs.unlinkSync(filePath);\n\t\t\t} else {\n\t\t\t\trmdir(filePath, fs, path, logger, true);\n\t\t\t}\n\t\t}\n\t}\n\tif (removeSelf) {\n\t\tfs.rmdirSync(dirPath);\n\t}\n}\n","/home/travis/build/npmtest/node-npmtest-alloy/node_modules/alloy/locales/en.js":"{\n\t\"Project not an Alloy app, continuing\": \"Project not an Alloy app, continuing\",\n\t\"Found Alloy app in %s\": \"Found Alloy app in %s\",\n\t\"Alloy compiler failed\": \"Alloy compiler failed\",\n\t\"Executing Alloy compile: %s\": \"Executing Alloy compile: %s\",\n\t\"Alloy compiler completed successfully\": \"Alloy compiler completed successfully\"\n}","/home/travis/build/npmtest/node-npmtest-alloy/node_modules/alloy/tools/checkmap.js":"#!/usr/bin/env node\n\n/*\n\tReads the source map files (foo.js.map) for the Harness app\n\tand outputs the the generated and original line information\n\tfor each map\n*/\n\nvar async = require('async'),\n\tpath = require('path'),\n\tplatforms = require('../platforms'),\n\tfs = require('fs'),\n\tos = require('os'),\n\tSM = require('source-map'),\n\t_ = require('../Alloy/lib/alloy/underscore');\n\nscan(path.join(__dirname, '..', 'test', 'projects', 'Harness', 'build', 'map', 'Resources'), '.map', function(err, files) {\n\t// Do something with files that ends in '.ext'.\n\t_.map(files, function(sourceMapFile) {\n\t\tconsole.log(path.basename(sourceMapFile));\n\t\tconsole.log('------------------------------');\n\t\tconsole.log('Generated line -> Original line');\n\t\tvar sourceMap = fs.readFileSync(sourceMapFile, {encoding: 'utf8'}),\n\t\t\tlineArray = [];\n\t\tvar smc = new SM.SourceMapConsumer(sourceMap);\n\t\tsmc.eachMapping(function (m) {\n\t\t\tlineArray.push({gen: m.generatedLine, orig: m.originalLine});\n\t\t});\n\t\tvar uniqueList = _.uniq(lineArray, function(item, key, gen) {\n\t\t\treturn item.gen;\n\t\t});\n\t\t_.each(uniqueList, function(l) {\n\t\t\tvar spacer = '                  '.slice(JSON.stringify(l.gen).length);\n\t\t\tconsole.log('   ' + l.gen + spacer + l.orig);\n\t\t});\n\t\tconsole.log('');\n\t});\n});\n\n\nfunction scan(dir, suffix, callback) {\n\tfs.readdir(dir, function(err, files) {\n\t\tvar returnFiles = [];\n\t\tasync.each(files, function(file, next) {\n\t\t\tvar filePath = dir + '/' + file;\n\t\t\tfs.stat(filePath, function(err, stat) {\n\t\t\t\tif (err) {\n\t\t\t\t\treturn next(err);\n\t\t\t\t}\n\t\t\t\tif (stat.isDirectory()) {\n\t\t\t\t\tscan(filePath, suffix, function(err, results) {\n\t\t\t\t\t\tif (err) {\n\t\t\t\t\t\t\treturn next(err);\n\t\t\t\t\t\t}\n\t\t\t\t\t\treturnFiles = returnFiles.concat(results);\n\t\t\t\t\t\tnext();\n\t\t\t\t\t});\n\t\t\t\t} else if (stat.isFile()) {\n\t\t\t\t\tif (file.indexOf(suffix, file.length - suffix.length) !== -1) {\n\t\t\t\t\t\treturnFiles.push(filePath);\n\t\t\t\t\t}\n\t\t\t\t\tnext();\n\t\t\t\t}\n\t\t\t});\n\t\t}, function(err) {\n\t\t\tcallback(err, returnFiles);\n\t\t});\n\t});\n}\n","/home/travis/build/npmtest/node-npmtest-alloy/node_modules/alloy/tools/compiles.js":"var async = require('async'),\n\tpath = require('path'),\n\texec = require('child_process').exec,\n\tplatforms = require('../platforms'),\n\t_ = require('../Alloy/lib/alloy/underscore');\n\nvar harnessPath = path.join(__dirname, '..', 'test', 'projects', 'Harness');\n\nasync.series(_.map(platforms, function(p) {\n\n\t// return a function that compiles and copies generated code for the given app\n\treturn function(callback) {\n\n\t\t// compile the app for all platforms\n\t\tvar cmd = 'alloy compile --outputPath \"' + harnessPath + '\" --config platform=' + p.platform;\n\t\tconsole.log(cmd);\n\t\texec(cmd, function(err, stdout, stderr) {\n\t\t\tif (err) { return callback(err); }\n\n\t\t\t// copy the generated controllers\n\t\t\tvar src = path.join(harnessPath, 'Resources', p.titaniumFolder, 'alloy', 'controllers', '*');\n\t\t\tvar dst = path.join(__dirname, '..', 'test', 'apps', process.argv[2], '_generated', p.platform, 'alloy', 'controllers');\n\t\t\tvar cmd2 = 'cp -r ' + src + ' ' + dst + '/ && rm ' + dst + '/BaseController.js';\n\t\t\tconsole.log(cmd2);\n\t\t\texec(cmd2, function(err, stdout, stderr) {\n\t\t\t\treturn callback(err);\n\t\t\t});\n\t\t});\n\t};\n}), function(err, results) {\n\tif (err) { throw new Error(err); }\n});\n\n","/home/travis/build/npmtest/node-npmtest-alloy/node_modules/alloy/tools/create_generated_code.js":"var fs = require('fs'),\n\tpath = require('path'),\n\twrench = require('wrench'),\n\tplatforms = require('../platforms/index'),\n\t_ = require('../Alloy/lib/alloy/underscore')._,\n\tcolors = require('colors'),\n\texec = require('child_process').exec,\n\tTESTS_WITH_DATES = ['ALOY-263', 'ALOY-1003', 'ALOY-1058'],\n\tTESTS_TO_SKIP = ['ALOY-840', 'ALOY-887', 'ALOY-932', 'ALOY-1080'];\n\nvar alloyRoot = path.join(__dirname, '..'),\n\tpaths = {\n\t\tapps: path.join(alloyRoot, 'test', 'apps'),\n\t\tharness: path.join(alloyRoot, 'test', 'projects', 'Harness')\n\t},\n\tplatformsArray = _.keys(platforms),\n\tplatformCtr = 0;\n\n// make sure we get a test app\nvar testApp = process.argv[2];\nif (!testApp) {\n\tconsole.error('You must specify a test app');\n\tconsole.error('  ex. node testgen.js advanced/device_query');\n\tprocess.exit(1);\n} else if (TESTS_TO_SKIP.indexOf(testApp) !== -1) {\n\tconsole.log((testApp + ' has code known to fail matching generated code. Canceling creation of _generated code.').yellow);\n\tprocess.exit();\n} else if (TESTS_WITH_DATES.indexOf(testApp) !== -1) {\n\tconsole.log((testApp + ' contains date functions, which create localized code unlikely to match on other systems.').yellow);\n\tconsole.log(('Canceling creation of _generated code.').yellow);\n\tprocess.exit();\n} else {\n\tconsole.log('generating code for ' + testApp.yellow);\n}\n\n// Stage the app\nvar cmd = 'jake app:setup dir=' + testApp + ' quiet=1';\nexec(cmd, function(error, stdout, stderr) {\n\tif (error !== null) {\n\t\tconsole.error(error);\n\t\tconsole.error(stderr);\n\t\tprocess.exit(2);\n\t}\n\n\tdoCompile(platformsArray[platformCtr++]);\n});\n\nfunction doCompile(platform) {\n\tif (!platform) { return; }\n\n\texec('alloy compile ' + paths.harness + ' --config platform=' + platform, function(error, stdout, stderr) {\n\t\tif (error !== null) {\n\t\t\tconsole.error(error);\n\t\t\tconsole.error(stderr);\n\t\t\tprocess.exit(3);\n\t\t}\n\n\t\tvar genDir = path.join(paths.apps, testApp, '_generated', platform);\n\t\twrench.rmdirSyncRecursive(genDir, true);\n\t\twrench.mkdirSyncRecursive(genDir, 0777);\n\n\t\tvar locations = [\n\t\t\tpath.join('alloy', 'controllers'),\n\t\t\tpath.join('alloy', 'models'),\n\t\t\tpath.join('alloy', 'widgets')\n\t\t];\n\t\t_.each(locations, function(l) {\n\t\t\tvar src = path.join(paths.harness, 'Resources', (platform === 'ios' ? 'iphone' : platform), l);\n\t\t\tvar dst = path.join(genDir, l);\n\t\t\tif (fs.existsSync(src) && fs.readdirSync(src).length !== 0) {\n\t\t\t\twrench.mkdirSyncRecursive(dst, 0777);\n\t\t\t\twrench.copyDirSyncRecursive(src, dst);\n\n\t\t\t\t// we don't need to evaluate BaseController.js every time\n\t\t\t\tvar bc = path.join(dst, 'BaseController.js');\n\t\t\t\tif (l === path.join('alloy', 'controllers') && fs.existsSync(bc)) {\n\t\t\t\t\tfs.unlinkSync(bc);\n\t\t\t\t}\n\n\t\t\t\tconsole.log('Generated runtime files in ' +\n\t\t\t\t\tpath.join('_generated', platform, l).cyan\n\t\t\t\t);\n\t\t\t}\n\t\t});\n\n\t\tdoCompile(platformsArray[platformCtr++]);\n\t});\n}\n\n"}